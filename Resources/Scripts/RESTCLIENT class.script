<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="122" UUID="78777381-ccba-4e27-8f8a-f4c5bab4270a" created="Wed Apr 02 20:06:03 CEST 2025" createdBy="eddiehartman" main="RESTCLIENT class" modified="Thu Apr 17 19:33:13 CEST 2025" modifiedBy="eddiehartman" project="_Restify" version="7.1.1">
    <Script name="RESTCLIENT class">
        <ModTime>1744911189620</ModTime>
        <parameter name="includeFiles"/>
        <parameter name="script"><![CDATA[// 20250116 1116 Created
// 20250121 1146 Finishing (I hope) the creation of this Class - vrs.0.9
// 20250121 2104 RestClientConnector form working! RESTCLIENT class doing its job both in the test AL and in the Form
// 20250123 1819 Tightening up code
// 20250128 2122 Fixing httpEntry() so it does not fail on argument = null
// 20250130 1243 Making sure this class works both inside and outside a Connector
// 20250131 1942 Made this.logmsg() write to both System.out and main.logmsg
// 20250319 1452 Franz and I made some changes to makeRequest(), adding support for redirection
// 20250321 2041 Still working on it
// 20250322 1443 Working now! Added Franz's code, plus made cookie handling better
// 20250402 1345 Added "accept" arg to makeRequest method, else default is 'application/json'
// 20250402 1429 Added handling of Redirect for makeRequest method
// 20250411 1538 Removing this.sessionId since it is a cookie and handled elsewhere. Also renaming .token to .csrftoken
// 20250411 1626 Adding handling for contextRoot
// 20250416 1512 Fixed broken code for retCode 302 and prevent only rootContext calls
// 20250417 1914 makeRequest - if 404 and url endsWith("/itim") retry one more time with .../systemuser/me
//
// This is the class that provides methods for making HTTP requests
//
// NOTES:
//			* It uses its own this.logmsg() for more control over logging

function RESTCLIENT(args) {
	this.baseUrl = (args.baseUrl || "").trim();
//	this.authUrl = args.authUrl || ""; // not used
	this.rootContext = args.rootContext || "";
	this.apikey = args.apikey || "";
	this.username = args.username || ""; 
	this.password = args.password || "";
	this.debug = true //args.debug || false;
	this.cookieArrayList = new java.util.ArrayList();
	
	this.gettingToken = false;
	
	// The HTTP Client Connector to use
	this.http = system.getConnector("ibmdi.HTTPClient");
	
	// Member variables
	this.requestEntry = system.newEntry();
	
	this.csrftoken = null;
	this.sessionId = null; // REMOVE ME REMOVE ME REMOVE ME REMOVE ME !!!!!
	
	// Get the authentication token. Argument token tells makeRequest not to getToken, and skip parsing the body and instead return http.Set-Cookie
	this.getToken = function() {
		var retEntry;
		
		// Get rid of cookies
		this.cookieArrayList.clear();
		
		// First get session id
		retEntry = this.makeRequest({
				gettingToken: true, // Getting a token, so dont call getToken again
				verb: "GET",
				url: "/itim/restlogin/login.jsp", // @@TODO Should make this a parameter under Connections
				returnValue: "entry",
				where: "getToken()"
		});
		
		// Now for the LTPAToken2
		retEntry = this.makeRequest({
				gettingToken: true, // Getting a token, so dont call getToken again
				verb: "POST",
				url: "/itim/j_security_check", // @@TODO Should make this a parameter under Connections
				ctype: "application/x-www-form-urlencoded",
				headers: {
					Authorization: "Bearer " + this.apikey
				},
				body: "j_username=" + this.username + "&j_password=" + this.password,
				returnValue: "entry",
				where: "getToken()"
		});
		
		// Get CSRFToken
		retEntry = this.makeRequest({
				gettingToken: true, // Getting a token, so dont call getToken again
				returnValue: "entry",
				verb: "POST",
				url: "/itim/rest/systemusers/me", // @@TODO Should make this a parameter under Connections
				ctype: "application/json",
				returnValue: "entry",
				where: "getToken()"
		});
		this.csrftoken = retEntry.getString("http.CSRFToken")
	}
	
	// Get the currently set Cookies
	this.getCookies = function() {
		return this.cookieArrayList.toArray().join("; ")
	}
	
	// Put together a URL from an array of parts
	this.assembleUrl = function(partsArray) {
		if (!(partsArray instanceof Array)) partsArray = [partsArray];
		var url = "";
		
		for (var i = 0; i < partsArray.length; i++) {
			var part = (partsArray[i] || "").trim();
			if (!part) continue; // skip empty string
			
			// Remove starting and/or ending slashes
			if (part.startsWith("/")) 
			{
				part = part.substring(1)
			}	
			else
			if (part.endsWith("/"))
			{
				part = part.substring(0, part.length-1)
			}
			
			// Assemble the url
			url += ((i > 0) ? "/" : "") + part	
		}
		
		return url
	}	
	
	// REST Client http-call method. The first lines of code show you the parameters you can send in the 'param' JS object
	this.makeRequest = function(params) {
		// Get token if necessary
		if (!this.csrftoken && !this.gettingToken) {
			this.gettingToken = true;
			this.getToken();
			this.gettingToken = false
		} 
		
		//if (form && this.debug) this.alert("RESTCLIENT.makeRequest(" + toJson(params) + "}");
			
		// Here come the various local variables set from parameters passed OR default values
		var verb = params.verb || "GET";
		var url = params.url || this.throwException("makeRequest called with no URL");
		var body = params.body || null;
		var ctype = params.ctype || "application/json";
		var where = params.where || "";
		var headers = params.headers || {};
		var accept = params.accept || "application/json";
		var gettingToken = params.gettingToken || false;
		var username = params.username || "";
		var password = params.password || "";
		var contextRoot = params.contextRoot || "";
		
		var returnValue = params.returnValue || "JS object";
		
		var alreadyImportedCert = false;
		
		// Empty out the requestEntry before setting it up for the call
		this.requestEntry.removeAllAttributes();
		
		// Prepare the url
		var origUrl = url;
		if (gettingToken) {
			url = this.assembleUrl([this.baseUrl, url]) // Skip the context root for these calls
		} else {
			url = this.assembleUrl([this.baseUrl, this.contextRoot, url])
		}	

		if (url == this.assembleUrl([this.baseUrl, this.contextRoot])){
			url = this.assembleUrl([this.baseUrl, this.contextRoot, "me"])
		}	
				
		// If a body is passed, this must be a POST (I think)
		if (typeof body !== "undefined" && body !== null) {
			verb = "POST";
	
			if (typeof body != "string") {
				this.requestEntry["http.body"] = toJson(body);
			} else {
				this.requestEntry["http.body"] = body;
			}
		}	
		
		// Set up the global HTTP Connector
		this.http.setParam("method", verb.toUpperCase());
		this.http.setParam("url", url);
		this.http.setParam("username", username);
		this.http.setParam("password", password);
	
		// Now set up the request entry
		this.requestEntry["http.url"] = url;
		this.requestEntry["http.method"] = verb.toUpperCase();
		this.requestEntry["http.Content-Type"] = ctype;
		this.requestEntry["http.remote_user"] = username;
		this.requestEntry["http.remote_password"] = password;
		this.requestEntry["http.Accept"] = accept;
		this.requestEntry["http.Connection"] = "keep-alive";
				
		for (var hdr in headers) {
			this.requestEntry["http." + hdr] = headers[hdr]
		}
		
		if (this.debug) {
			this.logDetails({msg : "Request to itim", 
						obj : this.httpEntry(this.requestEntry, true), 
						url : url, 
						verb : verb, 
						ctype : ctype, 
						where : where,
						sent: true});
		}
	
		// Reinitialize the HTTP Client connector so the updated parameters are applied
		this.http.terminate();
		this.http.initialize(null);
	
		alreadyImportedCert = false; 
		var retry = false;
		var reply = null;
		var swappedURLalready = false;
		// Keep making the call until something not handled happens
		do { // while (retry)
			try {	
				this.alert("\nMaking call:" + this.requestEntry + "\n");
				retry = false;
				
				// Set cookies
				this.requestEntry["http.Cookie"] = this.getCookies(); // In case these have been changed since last time
		
				// *****************************************************************************************
				// ****************         Make the actual request         ********************************
				// *****************************************************************************************

				var retEntry = this.http.queryReply(this.requestEntry);


				// Grab any cookies if found
				if (retEntry["http.Set-Cookie"]) {
					this.cookieArrayList.add(retEntry.getString("http.Set-Cookie"));
				}

				// Grab the CSRFToken if found
				if (retEntry.getString("http.CSRFToken")) {
					this.csrftoken = retEntry.getString("http.CSRFToken");
				}	
				
				var retCode = retEntry.getString("http.responseCode");
				
				if (retCode.startsWith("3")) {
					var location = retEntry.getString("http.location");
					this.requestEntry["http.url"] = location;
					retry = true
				} else
				if (retCode.equals("404") && (this.requestEntry.getString("http.url") || "").toLowerCase().endsWith("/itim") && !swappedURLalready) {
					this.requestEntry["http.utl"] = this.assembleUrl([this.baseUrl, this.contextRoot, "me"]); // @TODO Is this just a problem with our test server?
					swappedURLalready = true;
					retry = true
				} else
				// Else decide what to return, based on the returnValue argument passed in and continue processing this request
				if (returnValue == "JS object") {
					reply = this.parseReply(retEntry);
				} else {
					reply = retEntry
				}	
				
			} catch (ex) {
				//if (form && this.debug) this.alert("Exception: " + ex);
				
				// If the token has expired, get a new one
				if (ex.toString().indexOf("Unauthorized") >= 0) {
					this.getToken();
					retry = true
				} else
				// Else if we first must import the client cert, then do so. The Server must be restarted after.
				if (ex instanceof javax.net.ssl.SSLHandshakeException) {
					if ((ex.toString().indexOf("Certificate chaining error") >= 0) && alreadyImportedCert) {
						this.throwException("You must restart the SDI server in order for the imported certificate to be trusted.")
					}
					this.getCertificate();
					alreadyImportedCert = true;
					retry = true
				} 	
				
				// If we don't know how to handle this (i.e. retry is true) then throw the exception upwards
				if (!retry) {
					throw ex
				}	
			}
		} while (retry);
		
		retEntry["http.url"] = "http://" + retEntry["http.host"] + retEntry["http.base"]; // demotes automatically from Attributes to getString value. Very handy
		retEntry.removeAttribute("http.url");
		retEntry.removeAttribute("http.base");
		retEntry.removeAttribute("http.host");
		retEntry.removeAttribute("http.method");
		
		if (this.debug) {
			this.logDetails({msg : "Response from itim", 
						obj : this.httpEntry(retEntry),
						where: where,
					    entry : retEntry});
		}
		
		//if (form && this.debug) this.alert("reply: " + toJson(reply));
		
		return reply;
	}
	
	// Handle terminate to close the connector
	this.terminate = function() {
		this.http.terminate();
		this.csrftoken = null
	}
	
	// Handle alerting - @@ DISABLED for now
	this.alert = function(msg) {
		if (!this.debug) continue;
		main.logmsg(msg);
		java.lang.System.out.println(msg)
	}	
		
	
	// Get the client certificate from the server and import it to the TDI keystore
	this.getCertificate = function() {
		this.logmsg("! Getting client cert");
		var msg = com.ibm.di.security.GetSSLCertificate.installCertificateFrom(this.baseUrl, 443);
		this.logmsg("! Result: " + msg)
	}
	
	// Log specifics arguments passed to makeRequest()
	this.logDetails = function(params, sent) {
		sent = sent || false;
		var msg = params.msg;
		var obj = params.obj; 
		var url = params.url;
		var verb = params.verb;
		var ctype = params.ctype; 
		var where = params.where;
		
		if (!this.debug) continue;
		
		if (msg == null) {
			msg = "*unknown entry*";
		}
	
		var s = new java.lang.StringBuffer();
		
		if (where != null) {
			s.append("\n<<" + where + ">> " + msg);
		} else {
			s.append("\n---------> " + msg);
		}
		
		
		if (verb != null) { s.append("   " + verb.toUpperCase()); } 
		if (ctype != null) { s.append("   " + ctype); } 
		if (url != null) { s.append("   " + url); } 
		s.append("\n");
	
		if (obj != null) {
			if (obj instanceof com.ibm.di.entry.Entry) {	
				s.append(this.httpEntry(obj, sent))	
			} else {
				s.append(obj.toString());
			}
		}	
	
		this.logmsg(s.toString());
	}

	this.throwException = function(msg) {
		throw new java.lang.Exception(msg);
	}

	// Checks the validity of the reply and sets up for Iteration
	this.parseReply = function(replyEntry) {
		if (replyEntry === null) { return } 
		
		var status = replyEntry.getString("http.responseCode");
	
		// Check the return status
		if (status == "401") { // Unauthorized - time to renew the token
			this.throwException("Unauthorized")
		}
		if (!status.startsWith("2")) {
			this.throwException("Error response from ITIM. Response code: " 
								+ status
								+ "    Message: " + replyEntry.getString("http.responseMsg"));
		}
		
		// Now parse the body
		var body = replyEntry.getString("http.bodyAsString");
	
		try {
			var reply = fromJson(body);
		} catch (ex) {
			this.throwException("Error parsing return payload from itim: " + ex.toString()
							+ "\n*** dump of reply ***\n" 
							+ replyEntry)
		}
			
		return reply;
	}
	
	// Left justified text
	this.LJ = function(txt, len) {
		txt = txt || "";
		len = len || txt.length;
		return (txt + "                                                       ").substring(0, len)
	}
	
	// Returns a string with legible listing of important attributes and their values
	this.httpEntry = function(entry, sent) {
		if (!entry) return "";
		
		sent = sent || false;
		var txt = sent ? "--->>>> Request:\n" : "<<<<--- Response:\n";
	
		for (var att in entry) {
			var name = att.getName();
			var val = att.getValue();
			if (val && name.indexOf("tcp.") < 0 
				&& typeof val != "object" && typeof val !=  "com.ibm.di.entry.Attribute" 
				&& !(val instanceof Array) && !val.startsWith("[B@")) {
				txt += "  " + this.LJ(name + ": ", 25) + val + "\n"
			}
		}
		
		return txt
	}

	// Own logmsg() to aid in debugging
	this.logmsg = function(lvl, msg) {
		if (!lvl) { // undefined, and allows just a call to this.logmsg() to log a carriage return
			lvl = "INFO";
			msg = ""
		} else
		if (!msg) {
			msg = lvl;
			lvl = "INFO"
		}
		
		if ("DEBUG".equalsIgnoreCase(lvl)) {
			// Write to console out also
			java.lang.System.out.println("|" + this.LJ(lvl,5) + "| " + msg);
		}
		
		//if (form && this.debug) this.alert("RESTCLIENT.logmsg: " + msg);
		//this.alert("task: " + (typeof task) + " - " + (task instanceof com.ibm.di.server.AssemblyLine));
		
		// This to allow it to be used by Connector Form Event script
		//if (task && task instanceof com.ibm.di.server.AssemblyLine) 	task.logmsg(lvl, msg)
		main.logmsg(lvl, msg);
		java.lang.System.out.println(((lvl == "INFO") ? "" : lvl) + msg)
	}	
}]]></parameter>
    </Script>
</MetamergeConfig>