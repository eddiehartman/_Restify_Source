<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig IDIversion="Created by SDI7.2 - 2024-06-26" created="Sun Nov 17 15:16:51 CET 2024" createdBy="eddiehartman" modified="Sat Mar 22 18:11:14 CET 2025" modifiedBy="eddiehartman" version="7.1.1">
    <Folder name="AssemblyLines">
        
    
        
    
    
    
    
        
        
    
        
    
    
    
    
    
    
    
    
    
    <AssemblyLine name="_testScriptConnectorCode">
            <ModTime>1739890833962</ModTime>
            <Settings>
                <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
                <parameter name="automapattributes">false</parameter>
                <parameter name="createTombstones">false</parameter>
                <parameter name="includeGlobalPrologs">true</parameter>
                <parameter name="includePrologs"><![CDATA[RESTIFY library class
SCHEMA class
RESTCLIENT class
]]></parameter>
                <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
            </Settings>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="SpoofLib" state="Enabled"/>
                    <Component name="Connector Form Event Script" state="Enabled"/>
                    <Component name="Test Form Event Script" state="Enabled"/>
                    <Component name="Connector Script" state="Enabled"/>
                    <Component name="ITIMRestClientConnector" state="Enabled"/>
                    <Component name="DumpWorkEntry" state="Enabled"/>
                    <Component name="Test Connector Script" state="Enabled"/>
                    <Component name="Test Connector Script INITIAL" state="Enabled"/>
                    <Component name="Connector Form Event Script_1" state="Enabled"/>
                    <Component name="Set up parameter value" state="Enabled"/>
                    <Component name="Code parameters Param handling" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1739890833962</ModTime>
                <Script name="SpoofLib">
                    <ModTime>1739287846076</ModTime>
                    <parameter name="script"><![CDATA[function spoofing(args) {
	this.querymode = args.querymode || 0;
}

__forceQueryMode = "";

function control(val) {
	this.val = val;
	
	this.getText = function() {
		return this.val
	}
	
	this.removeAll = function() {
		
	}
	
	this.add = function(arg) {
		
	}
	
	this.select = function(arg) {
		
	}
	
	return this
}

form = {
	getControl: function(pname) {
		switch (pname.toLowerCase()) {
			case "action": 	 	return control("get");
			case "apikey": 	 	return control("xyzzy");
			case "schema":	 	return control("/schema");
			case "authurl":  	return control("/v1.0/endpoint/default/token");
			case "debug": 	 	return control(true);
			case "path": 	 	return control("/people/{personId}");
			case "password": 	return control("R0kz");
			case "url": 	 	return control("http://localhost:8080");
			case "username": 	return control("edbird");
			case "item": 		return new control("/people");
			case "action": 		return new control("post");	
			case "searchcrit": 	return new control("NO12345");
			case "querymode" : 	if (!__forceQueryMode) {
									return new control("Data");
								} 
								else return new control(__forceQueryMode); // Available parameters or Data from REST call
			case "parameters":  return new control("attributes=name,rank,serialnumber\rembedded=manager\rforms=false\rboogy=woogy\rignoreme=\randme")
			default: 		 	return control("*Invalid param: " + pname + "*")
		}
	},
	alert: function(msg) {
		main.logmsg(msg)
	}
}


connector = {
	getParam: function(pname) {
		var ctrl = form.getControl(pname);
		return ctrl.getText();
	}	
}


/*
combo = {
	text: "",
	getText: function() { return txt },
	removeAll: function() {},
	add: function() {},
	select: function() {}
}	
*/
COMBO = function(value) {
	this.value = string = value;
	this.getText = function() {return this.value};
	this.add = function() {};
	this.select = function() {};
	this.removeAll = function() {}
}

list = new java.util.ArrayList();

entry = system.newEntry();
entry[""]]]></parameter>
                </Script>
                <Script name="Connector Form Event Script">
                    <ModTime>1738095914651</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[// 20250104 1959 Initial
// 20250121 1154 Created RESTCLIENT class and used that instead of lots of functions
// 20250121 2047 Copied back test Event Script after _testScriptConnectorCode succeeded in testing Form code
// 20250121 2103 Form Working! Now to look at Mode ops (putEntry, findEntry, ...)
// 20250128 1608 Hardened the fetchActions and fetchItems so it checks for schema first
//
//						GLOBAL VARIABLES
//
var __schema = null;
var __initialized = false;
//var __lib = null;

//
//							FUNCTIONS
//

function debug() {
	return false;
	return form.getControl("debug").getText()
}

function alert(msg) {
	if (debug()) alert(msg);
	main.logmsg(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (__initialized) return;
	__initialized = true;
	
	//alert("Initializing...");
	//eval(system.getScriptText("RESTIFY library class")); // Load script library class
	//__lib = new RESTIFY();

	eval(system.getScriptText("RESTCLIENT class")); // Load HTTP Client class
	
	// Recreate in case parameters are changed
	__http = new RESTCLIENT({
						baseUrl:  form.getControl("url").getText(),
						authUrl:  form.getControl("authUrl").getText(),
						apikey:   form.getControl("apikey").getText(),
						username: form.getControl("username").getText(),
						password: form.getControl("password").getText(),
						schemaUrl: form.getControl("schema").getText(),
						debug: debug() // true => debug output
				})		
}

// Return the openAPI schema - @TEST hardcoded for now
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	initialize();

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: "/schema",
			authUrl: form.getControl("authUrl").getText(),
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Update the dropdown with paths
function fetchItems() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")
	//alert("---> fetchItems");

	initialize();

	path = "paths";

    updateDropdown("path",
        [path],
        "Cannot fetch actions for Path");
        
	fetchActions()
}

// Update the dropdown with opera tions for the selected path
function fetchActions() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")
	
	initialize();
	
    var selectedItem = form.getControl("path").getText() || "";
	// alert("fetchActions() for " + selectedItem);

    updateDropdown("action",
        ["paths", selectedItem],
        "Cannot fetch actions for Path: " + selectedItem)
}

// Update dropdown based api
function updateDropdown(controlName, path, errorMsg) {
    try {
    	alert("updateDropdown("
    			+ controlName
    			+ ", " + path + ", errmsg)");

	    initialize();
		
        if (!path) {
        	alert("updateDropdown() - Path parameter must be set");
        	return	
        };

        var subtree = __schema.getChildren(path);
        
        if (subtree == null) {
        	path.shift();
        	alert("Invalid item path: " + path.toString());
        	return
        }
        
		combo = form.getControl(controlName);
		combo.removeAll(); // Empty drop-down

		var arrList = java.util.ArrayList();
        for (var propName in subtree) {
        	arrList.add(propName);
        }
        var arr = arrList.toArray();
        java.util.Arrays.sort(arr);
    			
        for (var propName in arr) {
            //alert("   ..adding " + res);
            combo.add(propName)
        }

        alert("drop-down updated!");

        combo.select(0)

    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        alert(msg);
        throw msg
    }
}

// Empty out both Item and Object dropdowns
function clearDropdowns() {
	form.getControl("path").removeAll();
	form.getControl("action").removeAll()	
}

// For debugging from inside 
function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("_Restify/Log_" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]></parameter>
                </Script>
                <Script name="Test Form Event Script">
                    <ModTime>1738095916831</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[//initialize();
fetchSchema();
fetchItems();
fetchActions();

i = 42;]]></parameter>
                </Script>
                <Script name="Connector Script">
                    <ModTime>1739555638647</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[// 20250104 2008 Initial
// 20250111 1915 Handling queryParameters in url
// 20250126 1901 Adding queryMode for querySchema to return either params, or schema of data
// 20250127 1346 initialize(), terminate(), selectEntries() and a test queryReply() in place
// 20250127	1854 maded querySchema drop the token in the parameters returned
// 20250128 1503 selectEntries and getNextEntry implemented - ready for more testing I'm sure :)
// 20250128 1705 Added the check for spoofing
// 20250128 2136 querySchema() can now return either parameters or data when you press Connect and Next in the Schema pane
// 20250130 1207 Hopefully now
// 20250130 1221 Fixing it in place in the Connector
// 20250131 1928 Gonna get querySchema to work right
// 20250131 2009 Now looking at getNextEntry() so I can return parameter descriptions with Connect + Next if querySchemaMode == Parameters
// 20250131 2033 Something still not right - alas, tomorrow
// 20250202 1313 Looking for my "entry not found" error when Connect while queryMode == Data
// 20250202 1407 Connect working for both settings!!!! 
// 20250202 1453 getNextEntry for Connect + Next now it's working!
// 20250207 1819 looking at selectEntries and getNextEntry, as well as findEntry, putEntry and modEntry. Tonight!!!
//          1917 Nope - manana
// 20250211 2024 Fixed mock server for people put, delete and servers - I hope
// 20250212 1142 Adding putEntry, deleteEntry and findEntry
//
// --- TODO Freetext parameter where all the standard set of parameter values can be set
//                                        
//
//						GLOBAL VARIABLES
//
var __parameters = {};						// params for the chosen path and action
var __debug = connector.getParam("debug");	// debug output?
var __schema = null;						// shared openAPI schema object (SCHEMA class)
var __initialized = false;					// Do I need this?
var __emptyEntry = system.newEntry();		// for craftQueryString
var __http = null; 							// for the RESTCLIENT we will use for the calls
var __resultSet = null;						// A container for returned entries (selectEntries/findEntry)
var __resultSetIndex = 0;					// Index into the result set
var __forceQueryMode = "";
var __formEventCalling = false;

var __paramNames = {
	action: true,
	apikey: true,
	schema: true,
	authUrl: true,
	debug: true,
	path: true,
	password: true,
	url: true,
	username: true,
	item: true,
	action: true,
	queryMode: true,
	searchCrit: true,
	includeUIDs: true,
	parameters: true
}

//
//							FUNCTIONS
//



function connParamField2Entry(connParams) {
	var paramsEntry = system.newEntry();
	var paramSetting = connParams.parameters;
	var lines = paramSetting.split(/\r?\n|\r/);
	for (var lineIndex = 0; lineIndex < lines.length; lineIndex++){
		var thisLine = lines[lineIndex];
		var parts = thisLine.split("=");
		var paramName = parts[0].trim();
		var paramValue = (parts.length > 1) ? parts[1].trim() : "";
		
		if (paramValue) {
			paramsEntry[paramName] = paramValue
		}
	}
	
	return paramsEntry
}

function craftQueryString(args) {
	var path = args.path;
	var action = args.action;
	var connParams = args.connParams;
	var useParams = args.epParams || {};
	var entry = args.entry || __emptyEntry;
	
	var embeddedUID = __schema.getEmbeddedUID(path);

	var paramsEntry = connParamField2Entry(connParams);
	
	var epParams = [];
	for (var i in useParams) {
		var param = useParams[i];
		var paramName = param.name;
		if (param["in"] == "query" || true) {
			if (entry[paramName] != null || paramsEntry[paramName] != null) {
				paramValue = paramsEntry[paramName] ? paramsEntry[paramName].getValue() : entry[paramName].getValue(0);
				if (paramValue != null) {
					epParams.push(paramName + "=" + paramValue)
				}
			}
		}	
	}
	
	return epParams.join("&")
}

function fixUrl(url) {
	if (!url.endsWith("/")) {
		return url + "/";
	} else {
		return url;
	}
}

function debug() {
	return __debug;
}

// Rest the connector and re-initialize it in case parameters have changed
function resetConnector() {
	__initialized = false;
	__resultSetIndex = 0;
	
	
	// Now zero out the __resultSet global ArrayList
	__resultSet = new java.util.ArrayList();

	if (typeof list != "undefined") list.clear(); // so it works while spoofing
	if (__http != null) __http.terminate();
	
	// Renew the RESTCLIENT with the currently set parameters
	if (!RESTCLIENT) eval(system.getScriptText("RESTCLIENT class"));
	__http = new RESTCLIENT({
						baseUrl:   __parameters.url,
						authUrl:   __parameters.authUrl,
						apikey:    __parameters.apikey,
						username:  __parameters.username,
						password:  __parameters.password,
						schemaUrl: __parameters.schema,
						debug: 	   debug() // true => debug output		
					})
}

// Change the URL path so the UID placeholder is replace with the Attribute value
function replaceUID(path, entry) {
	
}

// Turn the JS object returned from a call into the global entry object
function toEntry(obj, entry) {
	var connParams = refreshParameters();
	entry = entry || system.newEntry();

	//main.logmsg("toEntry() - includeUIDs: " + connector.getParam("includeUIDs"))
	
	for (var propName in obj) {
		// skip _links
		if (propName.equalsIgnoreCase("_links") && !connParams.includeUIDs) continue;
		for (var subPropName in obj[propName]) {
			if (typeof(subPropName) != "string") {
				//main.logmsg("toEntry() - !!!!!!!! subPropName not string: " + subPropName);
			} else {
				var newVal = beautifyValue(obj[propName][subPropName]);
				/*
				var prepend = (propName.equalsIgnoreCase("_links") ? propName + "_" : "");
				
				// For _links we must prepend the propName to the Attribute name
				subPropName = prepend + subPropName;
				*/
				if (newVal.toLowerCase().startsWith("erglobalid=")) {
					//main.logmsg("FOUND erglobalid value for " + subPropName)
					if (!connParams.includeUIDs) continue;	
				}
				
				//main.logmsg("toEntry() - adding " + subPropName + " - " + obj[propName][subPropName]);
				entry[subPropName] = newVal
			}
		}
	}
	
	//main.logmsg("toEntry - Complete: \n" + entry)
	
	return entry // Not necessary, since entry is global in the Connector context - I just like doing it :)
}

function debugMsg(msg) {
	if (__debug) {
//		task.logmsg(msg);
		main.logmsg(msg);
		java.lang.System.out.println(msg)
	}
}

function alertObject(objName, obj) {
	debugMsg("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	debugMsg(arr.toString())
}

// Return the openAPI schema
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: __parameters.schema,
			authUrl: __parameters.authUrl,
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Parse the openAPI schema
function parseSchema() {
	if (__schema) return __schema;

	// @@TODO Make actual call
	debugMsg("Fetching schema...")
	//var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	//var schemaJSON = fetchSchema();

	//debugMsg("Creating SCHEMA object");
	__schema = fetchSchema();

	//var toplvl = "";
	//for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
	//debugMsg("SCHEMA -> " + toplvl)

	//debugMsg("Got it!");
	return __schema
}

function refreshParameters() {
	var path = connector.getParam("path");
	//if (!path) throw new java.lang.RuntimeException("Path parameter has not been set")
	var action = connector.getParam("action");
	// if (!action) throw new java.lang.RuntimeException("Action parameter has not been set")

	__parameters = {};
	
	for (var paramName in __paramNames) {
		//java.lang.System.out.println("> " + paramName);
		__parameters[paramName] = connector.getParam(paramName);
	}
	
	return __parameters
}

function beautifyValue(val) {
	//main.logmsg("beautifyValue() - " + val);
	if (typeof(val) != "object") return val;
	
	try {
		var newVal = toJson(val);
		
		//main.logmsg("!!! It IS JSON !!!");
		if (val.description) newVal = val.description;
		//main.logmsg("--- Returning: '" + newVal + "'");
		return newVal;
	} catch (ex) {
		return val
	}
}

// Figure out which endpoint param is for the base path and grab the value from the entry
function extractUID(entry, epParams) {
	// If epParams is not passed in, look it up yourself
	epParams = epParams || getParameters(connParams.path, connParams.action);

	var uid = null;
	var uidAttName = null;

	for (var i in epParams) {
		var param = epParams[i];
		if (param["in"] == "path") {
			uidAttName = param.name;
			break
		}
	}
	
	if (uidAttName) {
		var uidAtt = entry[uidAttName];
		if (uidAtt) uid = uidAtt.getValue(0)
	}
	
	if (!uid) throw new java.lang.Exception("The UID attribute must be mapped out: " + uidAttName)
	
	return {
		value: uid,
		name: uidAttName
	}
}



//
// -------  Standard Connector functions 
//
function initialize() {
	refreshParameters();
	resetConnector();
	parseSchema()
}

function terminate() {
	resetConnector()
}

// CallReply function
function queryReply() {
	// Get latest settings in case changed
	var connParams = refreshParameters();
	
	// Embed mapped parameters into the path
	java.lang.System.out.println("queryReply() - entry: " + entry);
	// main.logmsg("queryReply() - entry: " + entry);
	
	var usePath = replaceEmbeddedUID(connParams.path, entry);

	// Now for queryParameters
	var epParams = getParameters(connParams.path, connParams.action);
	
	var queryString = craftQueryString({
		path: usePath,
		connParams: connParams,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Make the REST call @@TODO Only does GET for now
	var reply = __http.makeRequest({
			verb: "GET", // @@TODO Must figure out how to set the HTTP verb based on the schema
			url: usePath + queryString,
			ctype: "application/json",
			where: "queryReply()"
	});

	java.lang.System.out.println("Reply: " + entry.fromJSON(toJson(reply)));

	toEntry(reply, entry);
	return entry
}

// Since this function is being double-purposed, to also retrieve parameters for the Schema pane
// I have to add more logic that is not necessary for normal connector operations.
function selectEntries() {
	// Clear out the selected array of entries and set the index to 0
	__resultSetIndex = 0;
	if (typeof(form) == "undefined") __resultSet.clear();
	
	// Always refresh connParams to catch any user changes
	var connParams = refreshParameters();
	
	// So this code works in my testScriptConnectorCode AL
	if (typeof(entry) == "undefined") var entry = system.newEntry();
	
	// Return either the parameters from the path + action from the openAPI schema, which means 
	// you can use Connect + Next to list all available parameters w/ descriptions...
	if (connParams.queryMode == "Parameters" || typeof(task) == "undefined") {
		var restParams = getParameters(connParams.path, connParams.action);
		
		for (var i in restParams) {
			var paramName = restParams[i].name;
			//main.logmsg("getNextEntry() - " + paramName + " - " + beautifyValue(restParams[i]))
			entry[paramName] = beautifyValue(restParams[i]);
		}
		
		__resultSet.add(entry)
	} else {
		// ...else work like getNextEntry() usually does and return data
		
		// This the search filter parameter in the Connections tab
		var personId = connParams.searchCrit;
		if (!personId) throw java.lang.Exception("Search criteria (personId) must be configured")
		
		// Get the path and replace id's as required
		var usePath = replaceEmbeddedUID(connParams.path, personId);
	
		// Now for queryParameters
		var epParams = getParameters(connParams.path, connParams.action);
		
		var queryString = craftQueryString({
			connParams: connParams,
			path: usePath,
			epParams: epParams,
			action: connParams.action,
			entry: entry
		});
		
		// If there is a queryString, prepend it with ?
		queryString = queryString ? "?" + queryString : "";
		
		//main.logmsg("selectEntries for Data - making call");
		
		// Make the REST call @@TODO Only does GET for now
		var reply = __http.makeRequest({
				verb: "GET", // @@TODO Must figure out how to set the HTTP verb based on the schema
				url: usePath + queryString,
				ctype: "application/json",
				where: "queryReply()"
		});
	
		//main.logmsg("selectEntries for Data - Reply: " + com.ibm.di.entry.Entry.fromJSON(toJson(reply)));

		// Update the global 'entry' variable with these values
		var entry = toEntry(reply);
		
		//main.logmsg("selectEntries for Data - toEntry(): " + entry);

		var resultEntry = system.newEntry();
		resultEntry.merge(entry);
		__resultSet.add(resultEntry);
	}

	return __resultSet	
}

function getNextEntry() {
	//main.logmsg("@@getNextEntry - remaining in buffer: " + __resultSet.size());
	if (__resultSetIndex >= __resultSet.size()) {
		result.setStatus(0);
		return null;
	}

	if (typeof(entry) == "undefined") entry = system.newEntry(); // only for testing
	
	//main.logmsg("getNextEntry() - getting index " + __resultSetIndex);
	entry.merge(__resultSet.get(__resultSetIndex));
	__resultSetIndex++;

	result.setStatus(1);
	//main.logmsg("@@getNextEntry: " + entry);
	return entry
}

function putEntry(entry) {
	// Always refresh connParams to catch any user changes
	var connParams = refreshParameters();
	
	// So this code works in my testScriptConnectorCode AL
	//if (typeof(entry) == "undefined") var entry = system.newEntry();
	
	// Now for queryParameters
	var epParams = getParameters(connParams.path, connParams.action);
	
	var queryString = craftQueryString({
		connParams: connParams,
		path: usePath,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// Check parameters for the one in the path(base) - the UID
	var uidObj = extractUID(entry, epParams);
	
	var entryUID = uidObj.value;
	var entryUIDattName = uidObj.name;
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Get the path and replace id's as required
	var usePath = replaceEmbeddedUID(connParams.path, entryUID);

	//main.logmsg("putEntry - making call");
	
	// Make the REST call 
	var reply = __http.makeRequest({
			verb: "POST",
			url: usePath + queryString,
			ctype: "application/json",
			where: "putEntry()",
			body: entry.toJSON()
	});

	//main.logmsg("selectEntries for Data - Reply: " + com.ibm.di.entry.Entry.fromJSON(toJson(reply)));

	//var resultEntry = toEntry(reply);
	//task.logmsg("putEntry() - " + entry.fromJSON(toJson(reply)));
	
	return entry
}

function modEntry() {}

function deleteEntry() {}

// Finding an entry only works as direct read using the UID
function findEntry(searchCriteria) {
	// Always refresh connParams to catch any user changes
	var connParams = refreshParameters();
	var crit = null;
	try {
		crit = searchCriteria.getCriteria(0);
	} catch (ex) {
		crit = searchCriteria.getScriptFilter();
		var critValue,
			critName;
		var parts = system.splitString(crit, "=");
		if (parts < 2) {
			critName = parts[0].trim();
			critValue = parts[1].trim()
		} else {
			critName = uidObj.name;
			critValue = crit
		}
		
		crit = {
			name: critName,
			match: com.ibm.di.server.SearchCriteria.EXACT,
			value: critValue
		}
	}
	
	// Now for queryParameters
	var epParams = getParameters(connParams.path, connParams.action);
	
	var queryString = craftQueryString({
		connParams: connParams,
		path: usePath,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// Check parameters for the one in the path(base) - the UID
	uidObj = extractUID(entry, epParams);
	if (!crit.name.equalsIgnoreCase(uidObj.name)) {
		throw new java.lang.Exception("Search criteria is not an exact match with the UID attribute: " + uidObj.name)
	}
	
	entryUID = crit.value;
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Get the path and replace id's as required
	var usePath = replaceEmbeddedUID(connParams.path, entryUID);

	//main.logmsg("putEntry - making call");
	
	// Make the REST call 
	var reply = __http.makeRequest({
			verb: "GET",
			url: usePath + queryString,
			ctype: "application/json",
			where: "findEntry()"
	});

	//main.logmsg("selectEntries for Data - Reply: " + com.ibm.di.entry.Entry.fromJSON(toJson(reply)));

	//var resultEntry = toEntry(reply);
	//task.logmsg("putEntry() - " + entry.fromJSON(toJson(reply)));
	
	return entry
}

function querySchema() {
	//main.logmsg("@@querySchema...");
	var connParams = refreshParameters();
	var path = connParams.path;
	var action = connParams.action;
	
	list.clear(); // For use in the _testScriptConnectorCode
	
	if (connParams.queryMode == "Parameters" || typeof(task) == "undefined") {
/* don't think this is needed
		var embeddedParameter = getEmbeddedUID(path);
		if (embeddedParameter) {
			var e = system.newEntry();
			e.name = embeddedParameter;
			e.syntax = "MUST/uid";
			e.required = true;
			e.mandatory = true;
			list.add(e)
		}
*/
		var parameters = getParameters(path, action);
	
		for (var i in parameters) {
			var param = parameters[i];
	   
			if (param.name.equalsIgnoreCase("CSRFToken")) continue;
			
			var e = system.newEntry();
			e.name = param.name;
			e.syntax = "MUST/" + param.schema.type;
			e.required = true;
			e.mandatory = true;
			//main.logmsg("@@adding " + param.name);
			list.add(e)
		}
	} else { // queryMode is "Data"
		selectEntries();
		var dataEntry = getNextEntry();
		// Remember to reset the index to the result set for any getNextEntry() called after
		__resultSetIndex = Math.min(0, __resultSetIndex - 1);
		
		
		for (var att in dataEntry) {
			if (att instanceof com.ibm.di.entry.Entry) { // This is one of the links
				var name = "link_";
				throw "OOOOOOPS!! Connector Script line 373"
			} else {
				var name = att.getName();
				var val = att.getValue(0);
				
				//main.logmsg("querySchema() adding " + name + " - " + val);
				
				e = system.newEntry();
				e.name = name;
				e.syntax = typeof(val);
				list.add(e)
			}	
		}
	}

	result.setStatus(1);
	return list
}]]></parameter>
                </Script>
                <Connector name="ITIMRestClientConnector">
                    <InheritFrom>/Connectors/ITIMRestClientConnector</InheritFrom>
                    <ModTime>1739890833962</ModTime>
                    <ConnectorMode>AddOnly</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739557167569</ModTime>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739557409347</ModTime>
                        <AttributeMapItem>
                            <Name>mail</Name>
                            <Type>advanced</Type>
                            <Script>"elon@skynet.global"</Script>
                            <Simple>mail</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>name</Name>
                            <Type>advanced</Type>
                            <Script>"Elon Musk"</Script>
                            <Simple>name</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>personId</Name>
                            <Type>advanced</Type>
                            <Script>"satan"</Script>
                            <Simple>personId</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>sn</Name>
                            <Type>advanced</Type>
                            <Script>"Musk(rat)"</Script>
                            <Simple>sn</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>uid</Name>
                            <Type>advanced</Type>
                            <Script>"X"</Script>
                            <Simple>uid</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <DeltaSettings>
                        <ModTime>1739555641947</ModTime>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739890824304</ModTime>
                        <AdvancedLinkMode>true</AdvancedLinkMode>
                        <Script>'NO12345'</Script>
                        <LinkCriteriaItem>
                            <Key>19505afedd4</Key>
                            <Attribute>personId</Attribute>
                            <Operator>equals</Operator>
                            <Value>NO12345</Value>
                        </LinkCriteriaItem>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
                <Script name="DumpWorkEntry">
                    <ModTime>1739367299329</ModTime>
                    <parameter name="enabled">true</parameter>
                    <parameter name="script"><![CDATA[// Dump the work entry
task.dumpEntry(work);
]]></parameter>
                </Script>
                <Script name="Test Connector Script">
                    <ModTime>1739367281785</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[initialize();

entry.personId = "NO12345";
entry.name = "Alan Smith";
entry.givenname = "Alan";
entry.sn = "Smith";
entry.personType = "Person";
entry.manager = "erglobalid=328759766326767909,ou=0,ou=people,erglobalid=00000000000000000000,ou=org,dc=com";
entry.ercustomdisplay = "Smith";
entry.mail = "asmith@ibm.com";
entry.erparent = "erglobalid=00000000000000000000,ou=org,dc=com";
entry.uid = "asmith";
entry.erpersonstatus = "ACTIVE";
entry.cn = "Alan Smith";
entry.ersupervisor = "erglobalid=328759766326767909,ou=0,ou=people,erglobalid=00000000000000000000,ou=org,dc=com";

entry = putEntry(entry);

sc = system.newSearchCriteria();
sc.addCriteria("personId", sc.EXACT, "NO12345");

entry = findEntry(sc);
task.logmsg("findEntry: " + entry);]]></parameter>
                </Script>
                <Script name="Test Connector Script INITIAL">
                    <ModTime>1739358643124</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[initialize();

// First we test the alternative querySchema functionality (data or parameters)
cnt = 1;

__forceQueryMode = "Parameters"
querySchema();
params = refreshParameters();
task.logmsg("\n ---- SCHEMA (" + params.queryMode + ") ----\n" + list)

__forceQueryMode = "Data"
params = refreshParameters();
querySchema();
task.logmsg("\n ---- SCHEMA (" + params.queryMode + ") ----\n" + list)


// Now to test the alternative getNext() functionality (data or parameters)
cnt = 1;

selectEntries();

__forceQueryMode = "Parameters"
params = refreshParameters();
e = getNextEntry();
task.logmsg("\n ---- ENTRY (" + params.queryMode + ") ----\n" + e)

__forceQueryMode = "Data"
params = refreshParameters();
e = getNextEntry();
task.logmsg("\n ---- ENTRY (" + params.queryMode + ") ----\n" + e)]]></parameter>
                </Script>
                <Script name="Connector Form Event Script_1">
                    <ModTime>1737914686188</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[// 20250104 1959 Initial
// 20250121 1154 Created RESTCLIENT class and used that instead of lots of functions
// 20250121 2047 Copied back test Event Script after _testScriptConnectorCode succeeded in testing Form code
// 20250121 2103 Form Working! Now to look at Mode ops (putEntry, findEntry, ...)
// 20250126 1901 Adding queryMode for querySchema to return either params, or schema of data
//
//						GLOBAL VARIABLES
//
var __schema = null;
var __initialized = false;
//var __lib = null;

//
//							FUNCTIONS
//

function debug() {
	return false;
	return form.getControl("debug").getText()
}

function alert(msg) {
	if (debug()) alert(msg);
	main.logmsg(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (__initialized) return;
	__initialized = true;
	
	//alert("Initializing...");
	//eval(system.getScriptText("RESTIFY library class")); // Load script library class
	//__lib = new RESTIFY();

	eval(system.getScriptText("RESTCLIENT class")); // Load HTTP Client class
	
	// Recreate in case parameters are changed
	__http = new RESTCLIENT({
						baseUrl:  form.getControl("url").getText(),
						authUrl:  form.getControl("authUrl").getText(),
						apikey:   form.getControl("apikey").getText(),
						username: form.getControl("username").getText(),
						password: form.getControl("password").getText(),
						schemaUrl: form.getControl("schema").getText(),
						debug: debug() // true => debug output
				})		
}

// Return the openAPI schema - @TEST hardcoded for now
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	initialize();

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: "/schema",
			authUrl: form.getControl("authUrl").getText(),
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Update the dropdown with paths
function fetchItems() {
	//alert("---> fetchItems");
    //var path = form.getControl("PathToObjects").getText();

	initialize();

	path = "paths";

    updateDropdown("path",
        [path],
        "Cannot fetch actions for Path");
        
	fetchActions()
}

// Update the dropdown with opera tions for the selected path
function fetchActions() {
	initialize();
	
    var selectedItem = form.getControl("path").getText() || "";
	// alert("fetchActions() for " + selectedItem);

    updateDropdown("action",
        ["paths", selectedItem],
        "Cannot fetch actions for Path: " + selectedItem)
}

// Update dropdown based api
function updateDropdown(controlName, path, errorMsg) {
    try {
    	alert("updateDropdown("
    			+ controlName
    			+ ", " + path + ", errmsg)");

	    initialize();
		
        if (!path) {
        	alert("updateDropdown() - Path parameter must be set");
        	return	
        };

        var subtree = __schema.getChildren(path);
        
        if (subtree == null) {
        	path.shift();
        	alert("Invalid item path: " + path.toString());
        	return
        }
        
		combo = form.getControl(controlName);
		combo.removeAll(); // Empty drop-down

		var arrList = java.util.ArrayList();
        for (var propName in subtree) {
        	arrList.add(propName);
        }
        var arr = arrList.toArray();
        java.util.Arrays.sort(arr);
    			
        for (var propName in arr) {
            //alert("   ..adding " + res);
            combo.add(propName)
        }

        alert("drop-down updated!");

        combo.select(0)

    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        alert(msg);
        throw msg
    }
}

// Empty out both Item and Object dropdowns
function clearDropdowns() {
	form.getControl("path").removeAll();
	form.getControl("action").removeAll()	
}

// For debugging from inside 
function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("_Restify/Log_" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]></parameter>
                </Script>
                <ALMap name="Set up parameter value">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <ModTime>1739216094137</ModTime>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739215969894</ModTime>
                        <AttributeMapItem>
                            <Name>parameters</Name>
                            <Type>substitution</Type>
                            <Script>work.parameters</Script>
                            <SubstitutionTemplate><![CDATA[attributes=name,rank,serialnumber
embedded=manager
forms=false
boogy=woogy
ignoreme
novalue=
]]></SubstitutionTemplate>
                        </AttributeMapItem>
                    </AttributeMap>
                    <State>Disabled</State>
                </ALMap>
                <Script name="Code parameters Param handling">
                    <ModTime>1739216096240</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[function parseParamsValue(paramsValue) {
	var paramsObj = {};
	var lines = paramsValue.split(/\r?\n|\r/);
	for (var lineIndex = 0; lineIndex < lines.length; lineIndex++){
		var thisLine = lines[lineIndex];
		var parts = thisLine.split("=");
		var paramName = parts[0].trim();
		var paramValue = (parts.length > 1) ? parts[1].trim() : "";
		
		if (paramValue) {
			paramsObj[paramName] = paramValue
		}
	}
	
	return paramsObj
}

paramsValue = work.getString("parameters");

obj = parseParamsValue(paramsValue);
task.logmsg(work.fromJSON(toJson(obj)));]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    
    
        
        
    
    
    
    <AssemblyLine name="__testService">
            <ModTime>1738503303908</ModTime>
            <Settings/>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="Script lib" state="Enabled"/>
                    <Component name="Handle call" state="Enabled"/>
                    <Component name="Log it" state="Enabled"/>
                    <Component name="HTTPServerConnector" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer">
                <ModTime>1738503303908</ModTime>
                <Connector name="HTTPServerConnector">
                    <InheritFrom>system:/Connectors/ibmdi.HTTPServer</InheritFrom>
                    <ModTime>1738503303908</ModTime>
                    <ConnectorMode>Server</ConnectorMode>
                    <ConnectorState>Disabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                        <parameter name="tcpPort">8080</parameter>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <DeltaSettings/>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1737731821189</ModTime>
                        <Hook name="before_reply">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>before_reply</Name>
                            <Script>task.logmsg("&gt;&gt;&gt; Making response: \n" + conn.toJSON());</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
            </ContainerEF>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1737731753884</ModTime>
                <Script name="Script lib">
                    <ModTime>1737731706881</ModTime>
                    <parameter name="enabled">true</parameter>
                    <parameter name="script"><![CDATA[var authReturn = {
  csrftoken: "token-xyz",
  sessionId: "session-xyz",
  user: {
    id: "12345",
    name: "Edbird"
  }	
}

// Returns a string with legible listing of important attributes and their values
function httpEntry(entry, sent) {
	sent = sent || false;
	var txt = sent ? "--->>>> Request:\n" : "<<<<--- Response:\n";

	for (var att in entry) {
		var name = att.getName();
		var val = att.getValue();
		if (val && name.indexOf("tcp.") < 0 
			&& typeof val != "object" && typeof val !=  "com.ibm.di.entry.Attribute" 
			&& !(val instanceof Array) && !val.startsWith("[B@")) {
			txt += "  " + this.LJ(name + ": ", 25) + val + "\n"
		}
	}
	
	return txt
}


function getString(e, attname) {
	return e.getString(attname) || "** " + attname + " not specified **"
}

function bodyHas(req, props) {
	var body = req.getString("http.bodyAsString");
	try {
		var creds = fromJson(body);		
	} catch (ex) {
		task.logmsg("ERROR", "Cannot parse http.body - " + e + ": " + body);
		return false
	}

	for (var p in props) {
		if (!req[p] == props[p]) {
			task.logmsg("ERROR", "Credentials " + p + " does not match: " + req[p]);
			return false	
		}
	}
	
	return true
}

function fail(msg) {
	task.logmsg("FATAL", msg);
	work.removeAllAttributes();
	work["http.responseCode"] = 400;
	work["http.responseMsg"] = msg;
	work["http.body"] = toJson({
		error: msg,
		base_received: base
	})
	system.exitFlow()
}

// Left justified text
function LJ(txt, len) {
	txt = txt || "";
	len = len || txt.length;
	return (txt + "                                                       ").substring(0, len)
}

function httpEntry(entry, sent) {
	sent = sent || false;
	var txt = sent ? "--->>>> Request:\n" : "<<<<--- Response:\n";

	for (var att in entry) {
		var name = att.getName();
		var val = att.getValue();
		if (val && name.indexOf("tcp.") < 0 
			&& typeof val != "object" && typeof val !=  "com.ibm.di.entry.Attribute" 
			&& !(val instanceof Array) && !val.startsWith("[B@")) {
			txt += "  " + LJ(name + ": ", 25) + val + "\n"
		}
	}
	
	return txt
}

function handleAuth(req) {
	if (getString(req, "http.method") != "POST") {
		fail("You must POST an auth request, instead of " + getString(req, "http.method"))
	} else
	if (getString(req, "http.content-type").equalsIgnoreCase("appliation/json")) {
		fail("Request type must be application/json but is instead '" + requ.getString("http.content-type"))
	} else
	if (getString(req, "http.Authorization").toLowerCase().indexOf("xyz") < 0) {
		fail("Authorization code is wrong: " + request.getString("http.authorization"))
	} else
	if (!bodyHas(req, {username: "edbird", password: "R0kz"})) {
		fail("Username/password invalid: " + getString("http.bodyAsString"))
	}

	req["http.body"] = toJson(authReturn);
	req["http.responseCode"] = 200
}

function handleGetAccounts(req) {
	if (getString(req, "http.method") != "GET") {
		fail("You must GET person accounts, instead of " + req["http.method"])
	} else
	if (getString(req, "http.content-type").equalsIgnoreCase("appliation/json")) {
		fail("Request type must be application/json but is instead '" + req["http.content-type"])
	} /* else
	if (getString(req, "http.X-CRF-TOKEN").toLowerCase().indexOf("xyz") < 0) {
		fail("Access token is wrong: " + req["http.X-CRF-TOKEN"])
	} */

	req["http.body"] = system.getScriptText("__testService_getReturn");
	req["http.responseCode"] = 200
}

function handleSchema(req) {
	req.removeAllAttributes();
	req["http.responseCode"] = 200;
	req["http.responseMsg"] = "OK"
	req["http.Content-Type"] = "YAML or JSON OpenAPI Schema, I presume ";
	req["http.body"] = system.getScriptText("itim_swagger.json");
	req["http.responseCode"] = 200
}]]></parameter>
                </Script>
                <Script name="Handle call">
                    <ModTime>1737731618683</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[// Dump the work entry
task.logmsg("\n<<<<<--- Request: " + httpEntry(work));

base = work.getString("http.base");

if (base.endsWith("/schema")) {
	task.logmsg("Schema request...");
	handleSchema(work);
	task.logmsg("Schema sent!");
} else
if (base.endsWith("/token")) {
	task.logmsg("Authorizing...");
	handleAuth(work);
	task.logmsg("Authorized!")
} else
if (base.indexOf("/accounts") > 0) {
	task.logmsg("Returning accounts...");
	handleGetAccounts(work);
	task.logmsg("Accounts returned!")
}

task.logmsg("\n--->>>> Reply: " + httpEntry(work));]]></parameter>
                </Script>
                <Script name="Log it">
                    <ModTime>1737731753884</ModTime>
                    <parameter name="script"><![CDATA[java.lang.System.out.println("\n\nRECEIVED: " + httpEntry(work));
task.logmsg("\n\nRECEIVED: " + httpEntry(work))]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
        
    
        
    
        
        
    
        
    
    <AssemblyLine name="__testService 20250114 1546 hopefully fixed spoofing data">
            <ModTime>1736797642804</ModTime>
            <Settings/>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="Script lib" state="Enabled"/>
                    <Component name="Handle call" state="Enabled"/>
                    <Component name="HTTPServerConnector" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer">
                <ModTime>1736797108027</ModTime>
                <Connector name="HTTPServerConnector">
                    <InheritFrom>system:/Connectors/ibmdi.HTTPServer</InheritFrom>
                    <ModTime>1736797108027</ModTime>
                    <ConnectorMode>Server</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                        <parameter name="tcpPort">8080</parameter>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1735931738303</ModTime>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <DeltaSettings/>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1736797108027</ModTime>
                        <Hook name="before_reply">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>before_reply</Name>
                            <Script><![CDATA[task.logmsg(">>> Making response: \n" + conn.toJSON());


// Check if this call was handled
var statusCode = conn["http.responseCode"];
// If not, then fix the return
if (!statusCode) {
	conn.removeAllAttributes();
	conn["http.responseCode"] = "400";
	conn["http.responseMsg"] = "Bad request";
	conn["http.body"] = toJson({
		error: "Bad request",
		base_received: base
	})
}]]></Script>
                            <Enabled>true</Enabled>
                        </Hook>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
            </ContainerEF>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1736797642804</ModTime>
                <Script name="Script lib">
                    <ModTime>1736797642804</ModTime>
                    <parameter name="script"><![CDATA[var authReturn = {
  csrftoken: "token-xyz",
  sessionId: "session-xyz",
  user: {
    id: "12345",
    name: "Edbird"
  }	
}

function getString(e, attname) {
	return e.getString(attname) || "** " + attname + " not specified **"
}

function bodyHas(req, props) {
	var body = req.getString("http.bodyAsString");
	try {
		var creds = fromJson(body);		
	} catch (ex) {
		task.logmsg("ERROR", "Cannot parse http.body - " + e + ": " + body);
		return false
	}

	for (var p in props) {
		if (!req[p] == props[p]) {
			task.logmsg("ERROR", "Credentials " + p + " does not match: " + req[p]);
			return false	
		}
	}
	
	return true
}

function fail(msg) {
	task.logmsg("FATAL", msg);
	work.removeAllAttributes();
	work["http.responseCode"] = 400;
	work["http.responseMsg"] = msg;
	work["http.body"] = toJson({
		error: msg,
		base_received: base
	})
	system.exitFlow()
}

function handleAuth(req) {
	if (getString(req, "http.method") != "POST") {
		fail("You must POST an auth request, instead of " + getString(req, "http.method"))
	} else
	if (getString(req, "http.content-type").equalsIgnoreCase("appliation/json")) {
		fail("Request type must be application/json but is instead '" + requ.getString("http.content-type"))
	} else
	if (getString(req, "http.Authorization").toLowerCase().indexOf("xyzzy") < 0) {
		fail("Authorization code is wrong: " + request.getString("http.authorization"))
	} else
	if (!bodyHas(req, {username: "edbird", password: "R0kz"})) {
		fail("Username/password invalid: " + getString("http.bodyAsString"))
	}

	req["http.body"] = toJson(authReturn);
	req["http.responseCode"] = 200
}

function handleGetAccounts(req) {
	if (getString(req, "http.method") != "GET") {
		fail("You must GET person accounts, instead of " + req["http.method"])
	} else
	if (getString(req, "http.content-type").equalsIgnoreCase("appliation/json")) {
		fail("Request type must be application/json but is instead '" + req["http.content-type"])
	} else
	if (getString(req, "http.Authorization").toLowerCase().indexOf("xyzzy") < 0) {
		fail("Authorization code is wrong: " + req["http.authorization"])
	} else
	if (getString(req, "http.X-CRF-TOKEN").toLowerCase().indexOf("xyzzy") < 0) {
		fail("Access token is wrong: " + req["http.X-CRF-TOKEN"])
	}

	req["http.body"] = system.getScriptText("__testService_getReturn");
	req["http.responseCode"] = 200
}]]></parameter>
                </Script>
                <Script name="Handle call">
                    <ModTime>1736797062891</ModTime>
                    <parameter name="script"><![CDATA[// Dump the work entry
task.logmsg("====== Request: "
	+ work.getString("http.method")
	+ " " + work.getString("http.base")
	+ "\n" + work.getString("http.body"));

base = work.getString("http.base");

if (base.endsWith("/auth")) {
	task.logmsg("Authorizing...");
	handleAuth(work);
	task.logmsg("Authorized!")
} else
if (base.indexOf("/accounts") > 0) {
	task.logmsg("Returning accounts");
	handleGetAccounts(work)
}

task.logmsg("\n------ Reply: " + work);]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
        
    
    
    
    
    
    
    
    <AssemblyLine name="_testScriptConnectorCode 20250128 1503 selectEntries and getNextEntry implemented">
            <ModTime>1738075847388</ModTime>
            <Settings>
                <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
                <parameter name="automapattributes">false</parameter>
                <parameter name="createTombstones">false</parameter>
                <parameter name="includeGlobalPrologs">true</parameter>
                <parameter name="includePrologs"><![CDATA[RESTIFY library class
SCHEMA class
RESTCLIENT class
]]></parameter>
                <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
            </Settings>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="SpoofLib" state="Enabled"/>
                    <Component name="Connector Form Event Script" state="Enabled"/>
                    <Component name="Test Form Event Script" state="Enabled"/>
                    <Component name="Connector Script" state="Enabled"/>
                    <Component name="Test Connector Script" state="Enabled"/>
                    <Component name="Connector Form Event Script_1" state="Enabled"/>
                    <Component name="RestClientConnector" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1738075847388</ModTime>
                <Script name="SpoofLib">
                    <ModTime>1738073114381</ModTime>
                    <parameter name="script"><![CDATA[function control(val) {
	this.val = val;
	
	this.getText = function() {
		return this.val
	}
	
	this.removeAll = function() {
		
	}
	
	this.add = function(arg) {
		
	}
	
	this.select = function(arg) {
		
	}
	
	return this
}

form = {
	getControl: function(pname) {
		switch (pname.toLowerCase()) {
			case "action": 	 	return control("get");
			case "apikey": 	 	return control("xyzzy");
			case "schema":	 	return control("/schema");
			case "authurl":  	return control("/v1.0/endpoint/default/token");
			case "debug": 	 	return control(true);
			case "path": 	 	return control("/people/{personId}");
			case "password": 	return control("R0kz");
			case "url": 	 	return control("http://localhost:8080");
			case "username": 	return control("edbird");
			case "item": 		return new control("/people");
			case "action": 		return new control("post");	
			case "searchcrit": 	return new control("NO12345");
			case "querymode" : 	return new control("Available parameters"); // Available parameters or Data from REST call
			default: 		 	return control("*Invalid param: " + pname + "*")
		}
	},
	alert: function(msg) {
		main.logmsg(msg)
	}
}


connector = {
	getParam: function(pname) {
		var ctrl = form.getControl(pname);
		return ctrl.getText();
	}	
}

/*
combo = {
	text: "",
	getText: function() { return txt },
	removeAll: function() {},
	add: function() {},
	select: function() {}
}	
*/
COMBO = function(value) {
	this.value = string = value;
	this.getText = function() {return this.value};
	this.add = function() {};
	this.select = function() {};
	this.removeAll = function() {}
}

list = new java.util.ArrayList();

entry = system.newEntry();]]></parameter>
                </Script>
                <Script name="Connector Form Event Script">
                    <ModTime>1738000447743</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[// 20250104 1959 Initial
// 20250121 1154 Created RESTCLIENT class and used that instead of lots of functions
// 20250121 2047 Copied back test Event Script after _testScriptConnectorCode succeeded in testing Form code
// 20250121 2103 Form Working! Now to look at Mode ops (putEntry, findEntry, ...)
//
//						GLOBAL VARIABLES
//
var __schema = null;
var __initialized = false;
//var __lib = null;

//
//							FUNCTIONS
//

function debug() {
	return false;
	return form.getControl("debug").getText()
}

function alert(msg) {
	if (debug()) alert(msg);
	main.logmsg(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (__initialized) return;
	__initialized = true;
	
	//alert("Initializing...");
	//eval(system.getScriptText("RESTIFY library class")); // Load script library class
	//__lib = new RESTIFY();

	eval(system.getScriptText("RESTCLIENT class")); // Load HTTP Client class
	
	// Recreate in case parameters are changed
	__http = new RESTCLIENT({
						baseUrl:  form.getControl("url").getText(),
						authUrl:  form.getControl("authUrl").getText(),
						apikey:   form.getControl("apikey").getText(),
						username: form.getControl("username").getText(),
						password: form.getControl("password").getText(),
						schemaUrl: form.getControl("schema").getText(),
						debug: debug() // true => debug output
				})		
}

// Return the openAPI schema - @TEST hardcoded for now
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	initialize();

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: "/schema",
			authUrl: form.getControl("authUrl").getText(),
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Update the dropdown with paths
function fetchItems() {
	//alert("---> fetchItems");
    //var path = form.getControl("PathToObjects").getText();

	initialize();

	path = "paths";

    updateDropdown("path",
        [path],
        "Cannot fetch actions for Path");
        
	fetchActions()
}

// Update the dropdown with opera tions for the selected path
function fetchActions() {
	initialize();
	
    var selectedItem = form.getControl("path").getText() || "";
	// alert("fetchActions() for " + selectedItem);

    updateDropdown("action",
        ["paths", selectedItem],
        "Cannot fetch actions for Path: " + selectedItem)
}

// Update dropdown based api
function updateDropdown(controlName, path, errorMsg) {
    try {
    	alert("updateDropdown("
    			+ controlName
    			+ ", " + path + ", errmsg)");

	    initialize();
		
        if (!path) {
        	alert("updateDropdown() - Path parameter must be set");
        	return	
        };

        var subtree = __schema.getChildren(path);
        
        if (subtree == null) {
        	path.shift();
        	alert("Invalid item path: " + path.toString());
        	return
        }
        
		combo = form.getControl(controlName);
		combo.removeAll(); // Empty drop-down

		var arrList = java.util.ArrayList();
        for (var propName in subtree) {
        	arrList.add(propName);
        }
        var arr = arrList.toArray();
        java.util.Arrays.sort(arr);
    			
        for (var propName in arr) {
            //alert("   ..adding " + res);
            combo.add(propName)
        }

        alert("drop-down updated!");

        combo.select(0)

    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        alert(msg);
        throw msg
    }
}

// Empty out both Item and Object dropdowns
function clearDropdowns() {
	form.getControl("path").removeAll();
	form.getControl("action").removeAll()	
}

// For debugging from inside 
function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("_Restify/Log_" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]></parameter>
                </Script>
                <Script name="Test Form Event Script">
                    <ModTime>1737914831075</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[//initialize();
fetchSchema();
fetchItems();
fetchActions();

i = 42;]]></parameter>
                </Script>
                <Script name="Connector Script">
                    <ModTime>1738075847388</ModTime>
                    <parameter name="enabled">true</parameter>
                    <parameter name="script"><![CDATA[// 20250104 2008 Initial
// 20250111 1915 Handling queryParameters in url
// 20250126 1901 Adding queryMode for querySchema to return either params, or schema of data
// 20250127 1346 initialize(), terminate(), selectEntries() and a test queryReply() in place
// 20250127	1854 maded querySchema drop the token in the parameters returned
// 20250128 1503 selectEntries and getNextEntry implemented - ready for more testing I'm sure :)

//
//						GLOBAL VARIABLES
//
var __parameters = {};						// params for the chosen path and action
var __debug = connector.getParam("debug");	// debug output?
var __schema = null;						// shared openAPI schema object (SCHEMA class)
var __initialized = false;					// Do I need this?
var __emptyEntry = system.newEntry();		// for craftQueryString
var __http = null; 							// for the RESTCLIENT we will use for the calls
var __resultSet = null;						// A container for returned entries (selectEntries/findEntry)

var __paramNames = {
	action: true,
	apikey: true,
	schema: true,
	authUrl: true,
	debug: true,
	path: true,
	password: true,
	url: true,
	username: true,
	item: true,
	action: true,
	queryMode: true,
	searchCrit: true
}

//var __baseUrl = connector.|etParam("url");	// the service domain and port
//var __requestEntry = system.newEntry();		// global shared to limit memory usage
//var __http = system.getConnector("ibmdi.HTTPClient"); // HTTP Client connector
//var __token = "";							// returned OAuth token
//var __sessionId = "";						// current session id

//
//							FUNCTIONS
//




function fixQueryParam(qp, value) {
	var retval = qp.name + "=";
	var value = (value || value == "") ? value : "<" + qp.description + ">"

	if (qp.schema.type == "string") {
		retval += "\"" + value + "\""
	} else {
		retval += value
	}

	return retval
}

function craftQueryString(args) {
	var path = args.path;
	var action = args.action;
	var parameters = args.parameters || {};
	var entry = args.entry || __emptyEntry;
	
	var embeddedUID = __schema.getEmbeddedUID(path);
	
	var queryParams = [];
	for (var param in parameters) {
		if (param != embeddedUID) {
			paramValue = entry[param];
			if (paramValue != null) {
				queryParams.push(param + "=" + paramValue)
			}
		}	
	}	
	
	return queryParams.join("&")
}

function fixUrl(url) {
	if (!url.endsWith("/")) {
		return url + "/";
	} else {
		return url;
	}
}

function debug() {
	return __debug;
}

// Rest the connector and re-initialize it in case parameters have changed
function resetConnector() {
	__initialized = false;
	__entryFound = null;
	
	// Now zero out the __resultSet global ArrayList
	__resultSet = new java.util.ArrayList();

	if (typeof list != "undefined") list.clear(); // so it works while spoofing
	if (__http != null) __http.terminate();
	
	// Renew the RESTCLIENT with the currently set parameters
	if (!RESTCLIENT) eval(system.getScriptText("RESTCLIENT class"));
	__http = new RESTCLIENT({
						baseUrl:   __parameters.url,
						authUrl:   __parameters.authUrl,
						apikey:    __parameters.apikey,
						username:  __parameters.username,
						password:  __parameters.password,
						schemaUrl: __parameters.schema,
						debug: 	   debug() // true => debug output		
					})
}

// Change the URL path so the UID placeholder is replace with the Attribute value
function replaceUID(path, entry) {
	
}

// Turn the JS object returned from a call into the global entry object
function toEntry(obj) {
	entry.removeAllAttributes();
	
	for (var propName in obj) {
		var prepend = (propName == "_links") ? propName + "_" : "";
		
		for (var subPropName in obj[propName]) {
			entry[prepend + subPropName] = obj[propName][subPropName]
		}
	}
	
	return entry // Not necessary, since entry is global in the Connector context - I just like doing it :)
}

function debugMsg(msg) {
	if (__debug) {
//		task.logmsg(msg);
//		main.logmsg(msg);
		java.lang.System.out.println(msg)
	}
}

function alertObject(objName, obj) {
	debugMsg("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	debugMsg(arr.toString())
}

// Return the openAPI schema
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: __parameters.schema,
			authUrl: __parameters.authUrl,
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Parse the openAPI schema
function parseSchema() {
	if (__schema) return __schema;

	// @@TODO Make actual call
	debugMsg("Fetching schema...")
	//var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	//var schemaJSON = fetchSchema();

	//debugMsg("Creating SCHEMA object");
	__schema = fetchSchema();

	//var toplvl = "";
	//for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
	//debugMsg("SCHEMA -> " + toplvl)

	//debugMsg("Got it!");
	return __schema
}

function refreshParameters() {
	var path = connector.getParam("path");
	//if (!path) throw new java.lang.RuntimeException("Path parameter has not been set")
	var action = connector.getParam("action");
	// if (!action) throw new java.lang.RuntimeException("Action parameter has not been set")

	__parameters = {};
	
	for (var paramName in __paramNames) {
		//java.lang.System.out.println("> " + paramName);
		__parameters[paramName] = connector.getParam(paramName);
	}
	
	return __parameters
}





//
// -------  Standard Connector functions 
//
function initialize() {
	refreshParameters();
	resetConnector();
	parseSchema()
}

function terminate() {
	resetConnector()
}

// CallReply function
function queryReply() {
	var params = refreshParameters();
	var usePath = __schema.replaceEmbeddedUID(params.path, entry)

	var queryString = craftQueryString({
		path: usePath,
		parameters: __schema.getParameters(params.path, params.action),
		action: params.action,
		entry: entry
	});
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Make the REST call @@TODO Only does GET for now
	var reply = __http.makeRequest({
			verb: "GET", // @@TODO Must figure out how to set the HTTP verb based on the schema
			url: usePath + queryString,
			ctype: "application/json",
			where: "queryReply()"
	});

	toEntry(reply);
	return entry
}

function selectEntries() {
	var params = refreshParameters();
	var personId = params.searchCrit;
	
	if (!personId) throw java.lang.Exception("Search criteria (personId) must be configured for this Connector")
	
	var usePath = __schema.replaceEmbeddedUID(params.path, personId);

	var queryString = craftQueryString({
		path: usePath,
		parameters: __schema.getParameters(params.path, params.action),
		action: params.action,
		entry: entry
	});
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Make the REST call @@TODO Only does GET for now
	var reply = __http.makeRequest({
			verb: "GET", // @@TODO Must figure out how to set the HTTP verb based on the schema
			url: usePath + queryString,
			ctype: "application/json",
			where: "queryReply()"
	});

	// Update the global 'entry' variable with these values
	toEntry(reply);
	// A little fancy footwork here for this test AL. In the Connector script, entry is made available by the AL
	var resultEntry = system.newEntry();
	resultEntry.merge(entry);
	__resultSet.add(resultEntry);
	return entry	
}

function getNextEntry() {
	if (__resultSet.size() == 0) {
		result.setStatus(0);
		return null;
	}

	entry.removeAllAttributes();
	entry.merge(__resultSet.remove(0)); // Grab an entry from the global __resultSet array
	result.setStatus(1);
	return entry
}

function putEntry() {}

function modEntry() {}

function deleteEntry() {}

function findEntry() {}

function querySchema() {
	var params = refreshParameters();
	var path = params.path;
	var action = params.action;
	
	if (params.queryMode == "Data schema") {
		var e = system.newEntry();
		e.name = "!TODO! Read from REST service";
		list.add(e);
		return list
	}

	var parameters = __schema.getParameters(path, action);

	var embeddedParameter = __schema.getEmbeddedUID(path);
	if (embeddedParameter) {
		var e = system.newEntry();
		e.name = embeddedParameter;
		e.syntax = "MUST/uid";
		e.required = true;
		e.mandatory = true;
		list.add(e)
	}

	for (var i in parameters) {
		var param = parameters[i];
   
		if (param.name == "CSRFToken") continue;
		
		var e = system.newEntry();
		e.name = param.name;
		e.syntax = "MUST/" + param.schema.type;
		e.required = true;
		e.mandatory = true;
		list.add(e)
	}
	result.setStatus(1);

	return list
}]]></parameter>
                </Script>
                <Script name="Test Connector Script">
                    <ModTime>1738074062792</ModTime>
                    <parameter name="enabled">true</parameter>
                    <parameter name="script"><![CDATA[initialize();

selectEntries();

getNextEntry()
main.logmsg(entry);
getNextEntry()
main.logmsg(entry);

querySchema();

entry.personId = "NO12345";
main.logmsg(__http.httpEntry(queryReply()));

main.logmsg(__http.httpEntry(getNextEntry()));


i = 42]]></parameter>
                </Script>
                <Script name="Connector Form Event Script_1">
                    <ModTime>1737914686188</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[// 20250104 1959 Initial
// 20250121 1154 Created RESTCLIENT class and used that instead of lots of functions
// 20250121 2047 Copied back test Event Script after _testScriptConnectorCode succeeded in testing Form code
// 20250121 2103 Form Working! Now to look at Mode ops (putEntry, findEntry, ...)
// 20250126 1901 Adding queryMode for querySchema to return either params, or schema of data
//
//						GLOBAL VARIABLES
//
var __schema = null;
var __initialized = false;
//var __lib = null;

//
//							FUNCTIONS
//

function debug() {
	return false;
	return form.getControl("debug").getText()
}

function alert(msg) {
	if (debug()) alert(msg);
	main.logmsg(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (__initialized) return;
	__initialized = true;
	
	//alert("Initializing...");
	//eval(system.getScriptText("RESTIFY library class")); // Load script library class
	//__lib = new RESTIFY();

	eval(system.getScriptText("RESTCLIENT class")); // Load HTTP Client class
	
	// Recreate in case parameters are changed
	__http = new RESTCLIENT({
						baseUrl:  form.getControl("url").getText(),
						authUrl:  form.getControl("authUrl").getText(),
						apikey:   form.getControl("apikey").getText(),
						username: form.getControl("username").getText(),
						password: form.getControl("password").getText(),
						schemaUrl: form.getControl("schema").getText(),
						debug: debug() // true => debug output
				})		
}

// Return the openAPI schema - @TEST hardcoded for now
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	initialize();

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: "/schema",
			authUrl: form.getControl("authUrl").getText(),
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Update the dropdown with paths
function fetchItems() {
	//alert("---> fetchItems");
    //var path = form.getControl("PathToObjects").getText();

	initialize();

	path = "paths";

    updateDropdown("path",
        [path],
        "Cannot fetch actions for Path");
        
	fetchActions()
}

// Update the dropdown with opera tions for the selected path
function fetchActions() {
	initialize();
	
    var selectedItem = form.getControl("path").getText() || "";
	// alert("fetchActions() for " + selectedItem);

    updateDropdown("action",
        ["paths", selectedItem],
        "Cannot fetch actions for Path: " + selectedItem)
}

// Update dropdown based api
function updateDropdown(controlName, path, errorMsg) {
    try {
    	alert("updateDropdown("
    			+ controlName
    			+ ", " + path + ", errmsg)");

	    initialize();
		
        if (!path) {
        	alert("updateDropdown() - Path parameter must be set");
        	return	
        };

        var subtree = __schema.getChildren(path);
        
        if (subtree == null) {
        	path.shift();
        	alert("Invalid item path: " + path.toString());
        	return
        }
        
		combo = form.getControl(controlName);
		combo.removeAll(); // Empty drop-down

		var arrList = java.util.ArrayList();
        for (var propName in subtree) {
        	arrList.add(propName);
        }
        var arr = arrList.toArray();
        java.util.Arrays.sort(arr);
    			
        for (var propName in arr) {
            //alert("   ..adding " + res);
            combo.add(propName)
        }

        alert("drop-down updated!");

        combo.select(0)

    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        alert(msg);
        throw msg
    }
}

// Empty out both Item and Object dropdowns
function clearDropdowns() {
	form.getControl("path").removeAll();
	form.getControl("action").removeAll()	
}

// For debugging from inside 
function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("_Restify/Log_" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]></parameter>
                </Script>
                <Connector name="RestClientConnector">
                    <InheritFrom>/Connectors/ITIMRestClientConnector</InheritFrom>
                    <ModTime>1737997172378</ModTime>
                    <ConnectorMode>CallReply</ConnectorMode>
                    <ConnectorState>Disabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1737982106197</ModTime>
                        <AttributeMapItem>
                            <Name>personId</Name>
                            <Type>advanced</Type>
                            <Script>"NO12345"</Script>
                            <Simple>personId</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <DeltaSettings>
                        <ModTime>1737982073881</ModTime>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1737997172378</ModTime>
                        <SchemaItem>
                            <Name>CSRFToken</Name>
                            <NativeSyntax>MUST/string</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>assignmentId</Name>
                            <NativeSyntax>MUST/string</NativeSyntax>
                        </SchemaItem>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    
        
        
        
    <AssemblyLine name="_testScriptConnectorCode 20250211 1758 Handling Parameter parameter">
            <ModTime>1739292133836</ModTime>
            <Settings>
                <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
                <parameter name="automapattributes">false</parameter>
                <parameter name="createTombstones">false</parameter>
                <parameter name="includeGlobalPrologs">true</parameter>
                <parameter name="includePrologs"><![CDATA[RESTIFY library class
SCHEMA class
RESTCLIENT class
]]></parameter>
                <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
            </Settings>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="SpoofLib" state="Enabled"/>
                    <Component name="Connector Form Event Script" state="Enabled"/>
                    <Component name="Test Form Event Script" state="Enabled"/>
                    <Component name="Connector Script" state="Enabled"/>
                    <Component name="Test Connector Script" state="Enabled"/>
                    <Component name="Connector Form Event Script_1" state="Enabled"/>
                    <Component name="RestClientConnector" state="Enabled"/>
                    <Component name="DumpWorkEntry" state="Enabled"/>
                    <Component name="Set up parameter value" state="Enabled"/>
                    <Component name="Code parameters Param handling" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1739292133836</ModTime>
                <Script name="SpoofLib">
                    <ModTime>1739287846076</ModTime>
                    <parameter name="script"><![CDATA[function spoofing(args) {
	this.querymode = args.querymode || 0;
}

__forceQueryMode = "";

function control(val) {
	this.val = val;
	
	this.getText = function() {
		return this.val
	}
	
	this.removeAll = function() {
		
	}
	
	this.add = function(arg) {
		
	}
	
	this.select = function(arg) {
		
	}
	
	return this
}

form = {
	getControl: function(pname) {
		switch (pname.toLowerCase()) {
			case "action": 	 	return control("get");
			case "apikey": 	 	return control("xyzzy");
			case "schema":	 	return control("/schema");
			case "authurl":  	return control("/v1.0/endpoint/default/token");
			case "debug": 	 	return control(true);
			case "path": 	 	return control("/people/{personId}");
			case "password": 	return control("R0kz");
			case "url": 	 	return control("http://localhost:8080");
			case "username": 	return control("edbird");
			case "item": 		return new control("/people");
			case "action": 		return new control("post");	
			case "searchcrit": 	return new control("NO12345");
			case "querymode" : 	if (!__forceQueryMode) {
									return new control("Data");
								} 
								else return new control(__forceQueryMode); // Available parameters or Data from REST call
			case "parameters":  return new control("attributes=name,rank,serialnumber\rembedded=manager\rforms=false\rboogy=woogy\rignoreme=\randme")
			default: 		 	return control("*Invalid param: " + pname + "*")
		}
	},
	alert: function(msg) {
		main.logmsg(msg)
	}
}


connector = {
	getParam: function(pname) {
		var ctrl = form.getControl(pname);
		return ctrl.getText();
	}	
}


/*
combo = {
	text: "",
	getText: function() { return txt },
	removeAll: function() {},
	add: function() {},
	select: function() {}
}	
*/
COMBO = function(value) {
	this.value = string = value;
	this.getText = function() {return this.value};
	this.add = function() {};
	this.select = function() {};
	this.removeAll = function() {}
}

list = new java.util.ArrayList();

entry = system.newEntry();
entry[""]]]></parameter>
                </Script>
                <Script name="Connector Form Event Script">
                    <ModTime>1738095914651</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[// 20250104 1959 Initial
// 20250121 1154 Created RESTCLIENT class and used that instead of lots of functions
// 20250121 2047 Copied back test Event Script after _testScriptConnectorCode succeeded in testing Form code
// 20250121 2103 Form Working! Now to look at Mode ops (putEntry, findEntry, ...)
// 20250128 1608 Hardened the fetchActions and fetchItems so it checks for schema first
//
//						GLOBAL VARIABLES
//
var __schema = null;
var __initialized = false;
//var __lib = null;

//
//							FUNCTIONS
//

function debug() {
	return false;
	return form.getControl("debug").getText()
}

function alert(msg) {
	if (debug()) alert(msg);
	main.logmsg(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (__initialized) return;
	__initialized = true;
	
	//alert("Initializing...");
	//eval(system.getScriptText("RESTIFY library class")); // Load script library class
	//__lib = new RESTIFY();

	eval(system.getScriptText("RESTCLIENT class")); // Load HTTP Client class
	
	// Recreate in case parameters are changed
	__http = new RESTCLIENT({
						baseUrl:  form.getControl("url").getText(),
						authUrl:  form.getControl("authUrl").getText(),
						apikey:   form.getControl("apikey").getText(),
						username: form.getControl("username").getText(),
						password: form.getControl("password").getText(),
						schemaUrl: form.getControl("schema").getText(),
						debug: debug() // true => debug output
				})		
}

// Return the openAPI schema - @TEST hardcoded for now
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	initialize();

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: "/schema",
			authUrl: form.getControl("authUrl").getText(),
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Update the dropdown with paths
function fetchItems() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")
	//alert("---> fetchItems");

	initialize();

	path = "paths";

    updateDropdown("path",
        [path],
        "Cannot fetch actions for Path");
        
	fetchActions()
}

// Update the dropdown with opera tions for the selected path
function fetchActions() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")
	
	initialize();
	
    var selectedItem = form.getControl("path").getText() || "";
	// alert("fetchActions() for " + selectedItem);

    updateDropdown("action",
        ["paths", selectedItem],
        "Cannot fetch actions for Path: " + selectedItem)
}

// Update dropdown based api
function updateDropdown(controlName, path, errorMsg) {
    try {
    	alert("updateDropdown("
    			+ controlName
    			+ ", " + path + ", errmsg)");

	    initialize();
		
        if (!path) {
        	alert("updateDropdown() - Path parameter must be set");
        	return	
        };

        var subtree = __schema.getChildren(path);
        
        if (subtree == null) {
        	path.shift();
        	alert("Invalid item path: " + path.toString());
        	return
        }
        
		combo = form.getControl(controlName);
		combo.removeAll(); // Empty drop-down

		var arrList = java.util.ArrayList();
        for (var propName in subtree) {
        	arrList.add(propName);
        }
        var arr = arrList.toArray();
        java.util.Arrays.sort(arr);
    			
        for (var propName in arr) {
            //alert("   ..adding " + res);
            combo.add(propName)
        }

        alert("drop-down updated!");

        combo.select(0)

    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        alert(msg);
        throw msg
    }
}

// Empty out both Item and Object dropdowns
function clearDropdowns() {
	form.getControl("path").removeAll();
	form.getControl("action").removeAll()	
}

// For debugging from inside 
function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("_Restify/Log_" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]></parameter>
                </Script>
                <Script name="Test Form Event Script">
                    <ModTime>1738095916831</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[//initialize();
fetchSchema();
fetchItems();
fetchActions();

i = 42;]]></parameter>
                </Script>
                <Script name="Connector Script">
                    <ModTime>1739290623827</ModTime>
                    <parameter name="enabled">true</parameter>
                    <parameter name="script"><![CDATA[// 20250104 2008 Initial
// 20250111 1915 Handling queryParameters in url
// 20250126 1901 Adding queryMode for querySchema to return either params, or schema of data
// 20250127 1346 initialize(), terminate(), selectEntries() and a test queryReply() in place
// 20250127	1854 maded querySchema drop the token in the parameters returned
// 20250128 1503 selectEntries and getNextEntry implemented - ready for more testing I'm sure :)
// 20250128 1705 Added the check for spoofing
// 20250128 2136 querySchema() can now return either parameters or data when you press Connect and Next in the Schema pane
// 20250130 1207 Hopefully now
// 20250130 1221 Fixing it in place in the Connector
// 20250131 1928 Gonna get querySchema to work right
// 20250131 2009 Now looking at getNextEntry() so I can return parameter descriptions with Connect + Next if querySchemaMode == Parameters
// 20250131 2033 Something still not right - alas, tomorrow
// 20250202 1313 Looking for my "entry not found" error when Connect while queryMode == Data
// 20250202 1407 Connect working for both settings!!!! 
// 20250202 1453 getNextEntry for Connect + Next now it's working!
// 20250207 1819 looking at selectEntries and getNextEntry, as well as findEntry, putEntry and modEntry. Tonight!!!
//          1917 Nope - manana
// 20250210 2024 Fixed mock server for people put, delete and servers - I hope
//
//
// --- TODO Freetext parameter where all the standard set of parameter values can be set
//                                        
//
//						GLOBAL VARIABLES
//
var __parameters = {};						// params for the chosen path and action
var __debug = connector.getParam("debug");	// debug output?
var __schema = null;						// shared openAPI schema object (SCHEMA class)
var __initialized = false;					// Do I need this?
var __emptyEntry = system.newEntry();		// for craftQueryString
var __http = null; 							// for the RESTCLIENT we will use for the calls
var __resultSet = null;						// A container for returned entries (selectEntries/findEntry)
var __resultSetIndex = 0;					// Index into the result set
var __forceQueryMode = "";
var __formEventCalling = false;

var spoofing = false;

var __paramNames = {
	action: true,
	apikey: true,
	schema: true,
	authUrl: true,
	debug: true,
	path: true,
	password: true,
	url: true,
	username: true,
	item: true,
	action: true,
	queryMode: true,
	searchCrit: true,
	includeUIDs: true,
	parameters: true
}

//
//							FUNCTIONS
//



function connParamField2Entry(connParams) {
	var paramsEntry = system.newEntry();
	var paramSetting = connParams.parameters;
	var lines = paramSetting.split(/\r?\n|\r/);
	for (var lineIndex = 0; lineIndex < lines.length; lineIndex++){
		var thisLine = lines[lineIndex];
		var parts = thisLine.split("=");
		var paramName = parts[0].trim();
		var paramValue = (parts.length > 1) ? parts[1].trim() : "";
		
		if (paramValue) {
			paramsEntry[paramName] = paramValue
		}
	}
	
	return paramsEntry
}

function craftQueryString(args) {
	var path = args.path;
	var action = args.action;
	var connParams = args.connParams;
	var useParams = args.queryParams || {};
	var entry = args.entry || __emptyEntry;
	
	var embeddedUID = __schema.getEmbeddedUID(path);

	var paramsEntry = connParamField2Entry(connParams);
	
	var queryParams = [];
	for (var i in useParams) {
		var param = useParams[i];
		var paramName = param.name;
		if (param["in"] == "query" || true) {
			if (entry[paramName] != null || paramsEntry[paramName] != null) {
				paramValue = paramsEntry[paramName] ? paramsEntry[paramName].getValue() : entry[paramName].getValue(0);
				if (paramValue != null) {
					queryParams.push(paramName + "=" + paramValue)
				}
			}
		}	
	}
	
	return queryParams.join("&")
}

function fixUrl(url) {
	if (!url.endsWith("/")) {
		return url + "/";
	} else {
		return url;
	}
}

function debug() {
	return __debug;
}

// Rest the connector and re-initialize it in case parameters have changed
function resetConnector() {
	__initialized = false;
	__resultSetIndex = 0;
	
	
	// Now zero out the __resultSet global ArrayList
	__resultSet = new java.util.ArrayList();

	if (typeof list != "undefined") list.clear(); // so it works while spoofing
	if (__http != null) __http.terminate();
	
	// Renew the RESTCLIENT with the currently set parameters
	if (!RESTCLIENT) eval(system.getScriptText("RESTCLIENT class"));
	__http = new RESTCLIENT({
						baseUrl:   __parameters.url,
						authUrl:   __parameters.authUrl,
						apikey:    __parameters.apikey,
						username:  __parameters.username,
						password:  __parameters.password,
						schemaUrl: __parameters.schema,
						debug: 	   debug() // true => debug output		
					})
}

// Change the URL path so the UID placeholder is replace with the Attribute value
function replaceUID(path, entry) {
	
}

// Turn the JS object returned from a call into the global entry object
function toEntry(obj, entry) {
	var connParams = refreshParameters();
	entry = entry || system.newEntry();

	//main.logmsg("toEntry() - includeUIDs: " + connector.getParam("includeUIDs"))
	
	for (var propName in obj) {
		// skip _links
		if (propName.equalsIgnoreCase("_links") && !connParams.includeUIDs) continue;
		for (var subPropName in obj[propName]) {
			if (typeof(subPropName) != "string") {
				//main.logmsg("toEntry() - !!!!!!!! subPropName not string: " + subPropName);
			} else {
				var newVal = beautifyValue(obj[propName][subPropName]);
				/*
				var prepend = (propName.equalsIgnoreCase("_links") ? propName + "_" : "");
				
				// For _links we must prepend the propName to the Attribute name
				subPropName = prepend + subPropName;
				*/
				if (newVal.toLowerCase().startsWith("erglobalid=")) {
					//main.logmsg("FOUND erglobalid value for " + subPropName)
					if (!connParams.includeUIDs) continue;	
				}
				
				//main.logmsg("toEntry() - adding " + subPropName + " - " + obj[propName][subPropName]);
				entry[subPropName] = newVal
			}
		}
	}
	
	//main.logmsg("toEntry - Complete: \n" + entry)
	
	return entry // Not necessary, since entry is global in the Connector context - I just like doing it :)
}

function debugMsg(msg) {
	if (__debug) {
//		task.logmsg(msg);
		main.logmsg(msg);
		java.lang.System.out.println(msg)
	}
}

function alertObject(objName, obj) {
	debugMsg("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	debugMsg(arr.toString())
}

// Return the openAPI schema
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: __parameters.schema,
			authUrl: __parameters.authUrl,
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Parse the openAPI schema
function parseSchema() {
	if (__schema) return __schema;

	// @@TODO Make actual call
	debugMsg("Fetching schema...")
	//var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	//var schemaJSON = fetchSchema();

	//debugMsg("Creating SCHEMA object");
	__schema = fetchSchema();

	//var toplvl = "";
	//for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
	//debugMsg("SCHEMA -> " + toplvl)

	//debugMsg("Got it!");
	return __schema
}

function refreshParameters() {
	var path = connector.getParam("path");
	//if (!path) throw new java.lang.RuntimeException("Path parameter has not been set")
	var action = connector.getParam("action");
	// if (!action) throw new java.lang.RuntimeException("Action parameter has not been set")

	__parameters = {};
	
	for (var paramName in __paramNames) {
		//java.lang.System.out.println("> " + paramName);
		__parameters[paramName] = connector.getParam(paramName);
	}
	
	return __parameters
}

function beautifyValue(val) {
	//main.logmsg("beautifyValue() - " + val);
	if (typeof(val) != "object") return val;
	
	try {
		var newVal = toJson(val);
		
		//main.logmsg("!!! It IS JSON !!!");
		if (val.description) newVal = val.description;
		//main.logmsg("--- Returning: '" + newVal + "'");
		return newVal;
	} catch (ex) {
		return val
	}
}



//
// -------  Standard Connector functions 
//
function initialize() {
	refreshParameters();
	resetConnector();
	parseSchema()
}

function terminate() {
	resetConnector()
}

// CallReply function
function queryReply() {
	// Get latest settings in case changed
	var connParams = refreshParameters();
	
	// Embed mapped parameters into the path
	java.lang.System.out.println("queryReply() - entry: " + entry);
	main.logmsg("queryReply() - entry: " + entry);
	
	var usePath = __schema.replaceEmbeddedUID(connParams.path, entry);

	// Now for queryParameters
	var queryParams = __schema.getParameters(connParams.path, connParams.action);
	
	var queryString = craftQueryString({
		path: usePath,
		connParams: connParams,
		queryParams: queryParams,
		action: connParams.action,
		entry: entry
	});
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Make the REST call @@TODO Only does GET for now
	var reply = __http.makeRequest({
			verb: "GET", // @@TODO Must figure out how to set the HTTP verb based on the schema
			url: usePath + queryString,
			ctype: "application/json",
			where: "queryReply()"
	});

	java.lang.System.out.println("Reply: " + entry.fromJSON(toJson(reply)));

	toEntry(reply, entry);
	return entry
}

// Since this function is being double-purposed, to also retrieve parameters for the Schema pane
// I have to add more logic that is not necessary for normal connector operations.
function selectEntries() {
	// Clear out the selected array of entries and set the index to 0
	__resultSetIndex = 0;
	if (typeof(form) == "undefined") __resultSet.clear();
	
	// Always refresh connParams to catch any user changes
	var connParams = refreshParameters();
	
	// So this code works in my testScriptConnectorCode AL
	if (typeof(entry) == "undefined") var entry = system.newEntry();
	
	// Return either the parameters from the path + action from the openAPI schema, which means 
	// you can use Connect + Next to list all available parameters w/ descriptions...
	if (connParams.queryMode == "Parameters" || typeof(task) == "undefined") {
		var restParams = __schema.getParameters(connParams.path, connParams.action);
		
		for (var i in restParams) {
			var paramName = restParams[i].name;
			//main.logmsg("getNextEntry() - " + paramName + " - " + beautifyValue(restParams[i]))
			entry[paramName] = beautifyValue(restParams[i]);
		}
		
		__resultSet.add(entry)
	} else {
		// ...else work like getNextEntry() usually does and return data
		
		// This the search filter parameter in the Connections tab
		var personId = connParams.searchCrit;
		if (!personId) throw java.lang.Exception("Search criteria (personId) must be configured")
		
		// Get the path and replace id's as required
		var usePath = __schema.replaceEmbeddedUID(connParams.path, personId);
	
		// Now for queryParameters
		var queryParams = __schema.getParameters(connParams.path, connParams.action);
		
		var queryString = craftQueryString({
			connParams: connParams,
			path: usePath,
			queryParams: queryParams,
			action: connParams.action,
			entry: entry
		});
		
		// If there is a queryString, prepend it with ?
		queryString = queryString ? "?" + queryString : "";
		
		//main.logmsg("selectEntries for Data - making call");
		
		// Make the REST call @@TODO Only does GET for now
		var reply = __http.makeRequest({
				verb: "GET", // @@TODO Must figure out how to set the HTTP verb based on the schema
				url: usePath + queryString,
				ctype: "application/json",
				where: "queryReply()"
		});
	
		//main.logmsg("selectEntries for Data - Reply: " + com.ibm.di.entry.Entry.fromJSON(toJson(reply)));

		// Update the global 'entry' variable with these values
		var entry = toEntry(reply);
		
		//main.logmsg("selectEntries for Data - toEntry(): " + entry);

		var resultEntry = system.newEntry();
		resultEntry.merge(entry);
		__resultSet.add(resultEntry);
	}

	return __resultSet	
}

function getNextEntry() {
	//main.logmsg("@@getNextEntry - remaining in buffer: " + __resultSet.size());
	if (__resultSetIndex >= __resultSet.size()) {
		result.setStatus(0);
		return null;
	}

	if (typeof(entry) == "undefined") entry = system.newEntry(); // only for testing
	
	//main.logmsg("getNextEntry() - getting index " + __resultSetIndex);
	entry.merge(__resultSet.get(__resultSetIndex));
	__resultSetIndex++;

	result.setStatus(1);
	//main.logmsg("@@getNextEntry: " + entry);
	return entry
}

function putEntry() {}

function modEntry() {}

function deleteEntry() {}

function findEntry() {}

function querySchema() {
	//main.logmsg("@@querySchema...");
	var connParams = refreshParameters();
	var path = connParams.path;
	var action = connParams.action;
	
	list.clear(); // For use in the _testScriptConnectorCode
	
	if (connParams.queryMode == "Parameters" || typeof(task) == "undefined") {
/* don't think this is needed
		var embeddedParameter = __schema.getEmbeddedUID(path);
		if (embeddedParameter) {
			var e = system.newEntry();
			e.name = embeddedParameter;
			e.syntax = "MUST/uid";
			e.required = true;
			e.mandatory = true;
			list.add(e)
		}
*/
		var parameters = __schema.getParameters(path, action);
	
		for (var i in parameters) {
			var param = parameters[i];
	   
			if (param.name.equalsIgnoreCase("CSRFToken")) continue;
			
			var e = system.newEntry();
			e.name = param.name;
			e.syntax = "MUST/" + param.schema.type;
			e.required = true;
			e.mandatory = true;
			//main.logmsg("@@adding " + param.name);
			list.add(e)
		}
	} else { // queryMode is "Data"
		selectEntries();
		var dataEntry = getNextEntry();
		// Remember to reset the index to the result set for any getNextEntry() called after
		__resultSetIndex = Math.min(0, __resultSetIndex - 1);
		
		
		for (var att in dataEntry) {
			if (att instanceof com.ibm.di.entry.Entry) { // This is one of the links
				var name = "link_";
				throw "OOOOOOPS!! Connector Script line 373"
			} else {
				var name = att.getName();
				var val = att.getValue(0);
				
				//main.logmsg("querySchema() adding " + name + " - " + val);
				
				e = system.newEntry();
				e.name = name;
				e.syntax = typeof(val);
				list.add(e)
			}	
		}
	}

	result.setStatus(1);
	return list
}]]></parameter>
                </Script>
                <Script name="Test Connector Script">
                    <ModTime>1739216102354</ModTime>
                    <parameter name="enabled">true</parameter>
                    <parameter name="script"><![CDATA[initialize();

// First we test the alternative querySchema functionality (data or parameters)
cnt = 1;

__forceQueryMode = "Parameters"
querySchema();
params = refreshParameters();
task.logmsg("\n ---- SCHEMA (" + params.queryMode + ") ----\n" + list)

__forceQueryMode = "Data"
params = refreshParameters();
querySchema();
task.logmsg("\n ---- SCHEMA (" + params.queryMode + ") ----\n" + list)


// Now to test the alternative getNext() functionality (data or parameters)
cnt = 1;

selectEntries();

__forceQueryMode = "Parameters"
params = refreshParameters();
e = getNextEntry();
task.logmsg("\n ---- ENTRY (" + params.queryMode + ") ----\n" + e)

__forceQueryMode = "Data"
params = refreshParameters();
e = getNextEntry();
task.logmsg("\n ---- ENTRY (" + params.queryMode + ") ----\n" + e)]]></parameter>
                </Script>
                <Script name="Connector Form Event Script_1">
                    <ModTime>1737914686188</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[// 20250104 1959 Initial
// 20250121 1154 Created RESTCLIENT class and used that instead of lots of functions
// 20250121 2047 Copied back test Event Script after _testScriptConnectorCode succeeded in testing Form code
// 20250121 2103 Form Working! Now to look at Mode ops (putEntry, findEntry, ...)
// 20250126 1901 Adding queryMode for querySchema to return either params, or schema of data
//
//						GLOBAL VARIABLES
//
var __schema = null;
var __initialized = false;
//var __lib = null;

//
//							FUNCTIONS
//

function debug() {
	return false;
	return form.getControl("debug").getText()
}

function alert(msg) {
	if (debug()) alert(msg);
	main.logmsg(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (__initialized) return;
	__initialized = true;
	
	//alert("Initializing...");
	//eval(system.getScriptText("RESTIFY library class")); // Load script library class
	//__lib = new RESTIFY();

	eval(system.getScriptText("RESTCLIENT class")); // Load HTTP Client class
	
	// Recreate in case parameters are changed
	__http = new RESTCLIENT({
						baseUrl:  form.getControl("url").getText(),
						authUrl:  form.getControl("authUrl").getText(),
						apikey:   form.getControl("apikey").getText(),
						username: form.getControl("username").getText(),
						password: form.getControl("password").getText(),
						schemaUrl: form.getControl("schema").getText(),
						debug: debug() // true => debug output
				})		
}

// Return the openAPI schema - @TEST hardcoded for now
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	initialize();

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: "/schema",
			authUrl: form.getControl("authUrl").getText(),
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Update the dropdown with paths
function fetchItems() {
	//alert("---> fetchItems");
    //var path = form.getControl("PathToObjects").getText();

	initialize();

	path = "paths";

    updateDropdown("path",
        [path],
        "Cannot fetch actions for Path");
        
	fetchActions()
}

// Update the dropdown with opera tions for the selected path
function fetchActions() {
	initialize();
	
    var selectedItem = form.getControl("path").getText() || "";
	// alert("fetchActions() for " + selectedItem);

    updateDropdown("action",
        ["paths", selectedItem],
        "Cannot fetch actions for Path: " + selectedItem)
}

// Update dropdown based api
function updateDropdown(controlName, path, errorMsg) {
    try {
    	alert("updateDropdown("
    			+ controlName
    			+ ", " + path + ", errmsg)");

	    initialize();
		
        if (!path) {
        	alert("updateDropdown() - Path parameter must be set");
        	return	
        };

        var subtree = __schema.getChildren(path);
        
        if (subtree == null) {
        	path.shift();
        	alert("Invalid item path: " + path.toString());
        	return
        }
        
		combo = form.getControl(controlName);
		combo.removeAll(); // Empty drop-down

		var arrList = java.util.ArrayList();
        for (var propName in subtree) {
        	arrList.add(propName);
        }
        var arr = arrList.toArray();
        java.util.Arrays.sort(arr);
    			
        for (var propName in arr) {
            //alert("   ..adding " + res);
            combo.add(propName)
        }

        alert("drop-down updated!");

        combo.select(0)

    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        alert(msg);
        throw msg
    }
}

// Empty out both Item and Object dropdowns
function clearDropdowns() {
	form.getControl("path").removeAll();
	form.getControl("action").removeAll()	
}

// For debugging from inside 
function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("_Restify/Log_" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]></parameter>
                </Script>
                <Connector name="RestClientConnector">
                    <InheritFrom>/Connectors/ITIMRestClientConnector</InheritFrom>
                    <ModTime>1739292133836</ModTime>
                    <ConnectorMode>CallReply</ConnectorMode>
                    <ConnectorState>Disabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739292133836</ModTime>
                        <parameter name="queryMode">Data</parameter>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1738951570943</ModTime>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1738951543770</ModTime>
                        <AttributeMapItem>
                            <Name>personId</Name>
                            <Type>advanced</Type>
                            <Script>"NO12345"</Script>
                            <Simple>personId</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <DeltaSettings>
                        <ModTime>1738950998940</ModTime>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739292124443</ModTime>
                        <SchemaItem>
                            <Name>attributes</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>MUST/string</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>embedded</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>MUST/string</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>forms</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>MUST/string</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>personId</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>MUST/string</NativeSyntax>
                        </SchemaItem>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739292124443</ModTime>
                        <SchemaItem>
                            <Name>attributes</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>MUST/string</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>embedded</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>MUST/string</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>forms</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>MUST/string</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>personId</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>MUST/string</NativeSyntax>
                        </SchemaItem>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
                <Script name="DumpWorkEntry">
                    <ModTime>1739214546085</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[// Dump the work entry
task.dumpEntry(work);
]]></parameter>
                </Script>
                <ALMap name="Set up parameter value">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <ModTime>1739216094137</ModTime>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739215969894</ModTime>
                        <AttributeMapItem>
                            <Name>parameters</Name>
                            <Type>substitution</Type>
                            <Script>work.parameters</Script>
                            <SubstitutionTemplate><![CDATA[attributes=name,rank,serialnumber
embedded=manager
forms=false
boogy=woogy
ignoreme
novalue=
]]></SubstitutionTemplate>
                        </AttributeMapItem>
                    </AttributeMap>
                    <State>Disabled</State>
                </ALMap>
                <Script name="Code parameters Param handling">
                    <ModTime>1739216096240</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[function parseParamsValue(paramsValue) {
	var paramsObj = {};
	var lines = paramsValue.split(/\r?\n|\r/);
	for (var lineIndex = 0; lineIndex < lines.length; lineIndex++){
		var thisLine = lines[lineIndex];
		var parts = thisLine.split("=");
		var paramName = parts[0].trim();
		var paramValue = (parts.length > 1) ? parts[1].trim() : "";
		
		if (paramValue) {
			paramsObj[paramName] = paramValue
		}
	}
	
	return paramsObj
}

paramsValue = work.getString("parameters");

obj = parseParamsValue(paramsValue);
task.logmsg(work.fromJSON(toJson(obj)));]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    <AssemblyLine name="_testScriptConnectorCode 20250212 1224 putEntry() working">
            <ModTime>1739359371814</ModTime>
            <Settings>
                <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
                <parameter name="automapattributes">false</parameter>
                <parameter name="createTombstones">false</parameter>
                <parameter name="includeGlobalPrologs">true</parameter>
                <parameter name="includePrologs"><![CDATA[RESTIFY library class
SCHEMA class
RESTCLIENT class
]]></parameter>
                <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
            </Settings>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="SpoofLib" state="Enabled"/>
                    <Component name="Connector Form Event Script" state="Enabled"/>
                    <Component name="Test Form Event Script" state="Enabled"/>
                    <Component name="Connector Script" state="Enabled"/>
                    <Component name="Test Connector Script" state="Enabled"/>
                    <Component name="Test Connector Script INITIAL" state="Enabled"/>
                    <Component name="Connector Form Event Script_1" state="Enabled"/>
                    <Component name="RestClientConnector" state="Enabled"/>
                    <Component name="DumpWorkEntry" state="Enabled"/>
                    <Component name="Set up parameter value" state="Enabled"/>
                    <Component name="Code parameters Param handling" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1739359371814</ModTime>
                <Script name="SpoofLib">
                    <ModTime>1739287846076</ModTime>
                    <parameter name="script"><![CDATA[function spoofing(args) {
	this.querymode = args.querymode || 0;
}

__forceQueryMode = "";

function control(val) {
	this.val = val;
	
	this.getText = function() {
		return this.val
	}
	
	this.removeAll = function() {
		
	}
	
	this.add = function(arg) {
		
	}
	
	this.select = function(arg) {
		
	}
	
	return this
}

form = {
	getControl: function(pname) {
		switch (pname.toLowerCase()) {
			case "action": 	 	return control("get");
			case "apikey": 	 	return control("xyzzy");
			case "schema":	 	return control("/schema");
			case "authurl":  	return control("/v1.0/endpoint/default/token");
			case "debug": 	 	return control(true);
			case "path": 	 	return control("/people/{personId}");
			case "password": 	return control("R0kz");
			case "url": 	 	return control("http://localhost:8080");
			case "username": 	return control("edbird");
			case "item": 		return new control("/people");
			case "action": 		return new control("post");	
			case "searchcrit": 	return new control("NO12345");
			case "querymode" : 	if (!__forceQueryMode) {
									return new control("Data");
								} 
								else return new control(__forceQueryMode); // Available parameters or Data from REST call
			case "parameters":  return new control("attributes=name,rank,serialnumber\rembedded=manager\rforms=false\rboogy=woogy\rignoreme=\randme")
			default: 		 	return control("*Invalid param: " + pname + "*")
		}
	},
	alert: function(msg) {
		main.logmsg(msg)
	}
}


connector = {
	getParam: function(pname) {
		var ctrl = form.getControl(pname);
		return ctrl.getText();
	}	
}


/*
combo = {
	text: "",
	getText: function() { return txt },
	removeAll: function() {},
	add: function() {},
	select: function() {}
}	
*/
COMBO = function(value) {
	this.value = string = value;
	this.getText = function() {return this.value};
	this.add = function() {};
	this.select = function() {};
	this.removeAll = function() {}
}

list = new java.util.ArrayList();

entry = system.newEntry();
entry[""]]]></parameter>
                </Script>
                <Script name="Connector Form Event Script">
                    <ModTime>1738095914651</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[// 20250104 1959 Initial
// 20250121 1154 Created RESTCLIENT class and used that instead of lots of functions
// 20250121 2047 Copied back test Event Script after _testScriptConnectorCode succeeded in testing Form code
// 20250121 2103 Form Working! Now to look at Mode ops (putEntry, findEntry, ...)
// 20250128 1608 Hardened the fetchActions and fetchItems so it checks for schema first
//
//						GLOBAL VARIABLES
//
var __schema = null;
var __initialized = false;
//var __lib = null;

//
//							FUNCTIONS
//

function debug() {
	return false;
	return form.getControl("debug").getText()
}

function alert(msg) {
	if (debug()) alert(msg);
	main.logmsg(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (__initialized) return;
	__initialized = true;
	
	//alert("Initializing...");
	//eval(system.getScriptText("RESTIFY library class")); // Load script library class
	//__lib = new RESTIFY();

	eval(system.getScriptText("RESTCLIENT class")); // Load HTTP Client class
	
	// Recreate in case parameters are changed
	__http = new RESTCLIENT({
						baseUrl:  form.getControl("url").getText(),
						authUrl:  form.getControl("authUrl").getText(),
						apikey:   form.getControl("apikey").getText(),
						username: form.getControl("username").getText(),
						password: form.getControl("password").getText(),
						schemaUrl: form.getControl("schema").getText(),
						debug: debug() // true => debug output
				})		
}

// Return the openAPI schema - @TEST hardcoded for now
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	initialize();

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: "/schema",
			authUrl: form.getControl("authUrl").getText(),
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Update the dropdown with paths
function fetchItems() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")
	//alert("---> fetchItems");

	initialize();

	path = "paths";

    updateDropdown("path",
        [path],
        "Cannot fetch actions for Path");
        
	fetchActions()
}

// Update the dropdown with opera tions for the selected path
function fetchActions() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")
	
	initialize();
	
    var selectedItem = form.getControl("path").getText() || "";
	// alert("fetchActions() for " + selectedItem);

    updateDropdown("action",
        ["paths", selectedItem],
        "Cannot fetch actions for Path: " + selectedItem)
}

// Update dropdown based api
function updateDropdown(controlName, path, errorMsg) {
    try {
    	alert("updateDropdown("
    			+ controlName
    			+ ", " + path + ", errmsg)");

	    initialize();
		
        if (!path) {
        	alert("updateDropdown() - Path parameter must be set");
        	return	
        };

        var subtree = __schema.getChildren(path);
        
        if (subtree == null) {
        	path.shift();
        	alert("Invalid item path: " + path.toString());
        	return
        }
        
		combo = form.getControl(controlName);
		combo.removeAll(); // Empty drop-down

		var arrList = java.util.ArrayList();
        for (var propName in subtree) {
        	arrList.add(propName);
        }
        var arr = arrList.toArray();
        java.util.Arrays.sort(arr);
    			
        for (var propName in arr) {
            //alert("   ..adding " + res);
            combo.add(propName)
        }

        alert("drop-down updated!");

        combo.select(0)

    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        alert(msg);
        throw msg
    }
}

// Empty out both Item and Object dropdowns
function clearDropdowns() {
	form.getControl("path").removeAll();
	form.getControl("action").removeAll()	
}

// For debugging from inside 
function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("_Restify/Log_" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]></parameter>
                </Script>
                <Script name="Test Form Event Script">
                    <ModTime>1738095916831</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[//initialize();
fetchSchema();
fetchItems();
fetchActions();

i = 42;]]></parameter>
                </Script>
                <Script name="Connector Script">
                    <ModTime>1739359371814</ModTime>
                    <parameter name="enabled">true</parameter>
                    <parameter name="script"><![CDATA[// 20250104 2008 Initial
// 20250111 1915 Handling queryParameters in url
// 20250126 1901 Adding queryMode for querySchema to return either params, or schema of data
// 20250127 1346 initialize(), terminate(), selectEntries() and a test queryReply() in place
// 20250127	1854 maded querySchema drop the token in the parameters returned
// 20250128 1503 selectEntries and getNextEntry implemented - ready for more testing I'm sure :)
// 20250128 1705 Added the check for spoofing
// 20250128 2136 querySchema() can now return either parameters or data when you press Connect and Next in the Schema pane
// 20250130 1207 Hopefully now
// 20250130 1221 Fixing it in place in the Connector
// 20250131 1928 Gonna get querySchema to work right
// 20250131 2009 Now looking at getNextEntry() so I can return parameter descriptions with Connect + Next if querySchemaMode == Parameters
// 20250131 2033 Something still not right - alas, tomorrow
// 20250202 1313 Looking for my "entry not found" error when Connect while queryMode == Data
// 20250202 1407 Connect working for both settings!!!! 
// 20250202 1453 getNextEntry for Connect + Next now it's working!
// 20250207 1819 looking at selectEntries and getNextEntry, as well as findEntry, putEntry and modEntry. Tonight!!!
//          1917 Nope - manana
// 20250210 2024 Fixed mock server for people put, delete and servers - I hope
// 20250211 1142 Adding putEntry, deleteEntry and findEntry
//
// --- TODO Freetext parameter where all the standard set of parameter values can be set
//                                        
//
//						GLOBAL VARIABLES
//
var __parameters = {};						// params for the chosen path and action
var __debug = connector.getParam("debug");	// debug output?
var __schema = null;						// shared openAPI schema object (SCHEMA class)
var __initialized = false;					// Do I need this?
var __emptyEntry = system.newEntry();		// for craftQueryString
var __http = null; 							// for the RESTCLIENT we will use for the calls
var __resultSet = null;						// A container for returned entries (selectEntries/findEntry)
var __resultSetIndex = 0;					// Index into the result set
var __forceQueryMode = "";
var __formEventCalling = false;

var spoofing = false;

var __paramNames = {
	action: true,
	apikey: true,
	schema: true,
	authUrl: true,
	debug: true,
	path: true,
	password: true,
	url: true,
	username: true,
	item: true,
	action: true,
	queryMode: true,
	searchCrit: true,
	includeUIDs: true,
	parameters: true
}

//
//							FUNCTIONS
//



function connParamField2Entry(connParams) {
	var paramsEntry = system.newEntry();
	var paramSetting = connParams.parameters;
	var lines = paramSetting.split(/\r?\n|\r/);
	for (var lineIndex = 0; lineIndex < lines.length; lineIndex++){
		var thisLine = lines[lineIndex];
		var parts = thisLine.split("=");
		var paramName = parts[0].trim();
		var paramValue = (parts.length > 1) ? parts[1].trim() : "";
		
		if (paramValue) {
			paramsEntry[paramName] = paramValue
		}
	}
	
	return paramsEntry
}

function craftQueryString(args) {
	var path = args.path;
	var action = args.action;
	var connParams = args.connParams;
	var useParams = args.epParams || {};
	var entry = args.entry || __emptyEntry;
	
	var embeddedUID = __schema.getEmbeddedUID(path);

	var paramsEntry = connParamField2Entry(connParams);
	
	var epParams = [];
	for (var i in useParams) {
		var param = useParams[i];
		var paramName = param.name;
		if (param["in"] == "query" || true) {
			if (entry[paramName] != null || paramsEntry[paramName] != null) {
				paramValue = paramsEntry[paramName] ? paramsEntry[paramName].getValue() : entry[paramName].getValue(0);
				if (paramValue != null) {
					epParams.push(paramName + "=" + paramValue)
				}
			}
		}	
	}
	
	return epParams.join("&")
}

function fixUrl(url) {
	if (!url.endsWith("/")) {
		return url + "/";
	} else {
		return url;
	}
}

function debug() {
	return __debug;
}

// Rest the connector and re-initialize it in case parameters have changed
function resetConnector() {
	__initialized = false;
	__resultSetIndex = 0;
	
	
	// Now zero out the __resultSet global ArrayList
	__resultSet = new java.util.ArrayList();

	if (typeof list != "undefined") list.clear(); // so it works while spoofing
	if (__http != null) __http.terminate();
	
	// Renew the RESTCLIENT with the currently set parameters
	if (!RESTCLIENT) eval(system.getScriptText("RESTCLIENT class"));
	__http = new RESTCLIENT({
						baseUrl:   __parameters.url,
						authUrl:   __parameters.authUrl,
						apikey:    __parameters.apikey,
						username:  __parameters.username,
						password:  __parameters.password,
						schemaUrl: __parameters.schema,
						debug: 	   debug() // true => debug output		
					})
}

// Change the URL path so the UID placeholder is replace with the Attribute value
function replaceUID(path, entry) {
	
}

// Turn the JS object returned from a call into the global entry object
function toEntry(obj, entry) {
	var connParams = refreshParameters();
	entry = entry || system.newEntry();

	//main.logmsg("toEntry() - includeUIDs: " + connector.getParam("includeUIDs"))
	
	for (var propName in obj) {
		// skip _links
		if (propName.equalsIgnoreCase("_links") && !connParams.includeUIDs) continue;
		for (var subPropName in obj[propName]) {
			if (typeof(subPropName) != "string") {
				//main.logmsg("toEntry() - !!!!!!!! subPropName not string: " + subPropName);
			} else {
				var newVal = beautifyValue(obj[propName][subPropName]);
				/*
				var prepend = (propName.equalsIgnoreCase("_links") ? propName + "_" : "");
				
				// For _links we must prepend the propName to the Attribute name
				subPropName = prepend + subPropName;
				*/
				if (newVal.toLowerCase().startsWith("erglobalid=")) {
					//main.logmsg("FOUND erglobalid value for " + subPropName)
					if (!connParams.includeUIDs) continue;	
				}
				
				//main.logmsg("toEntry() - adding " + subPropName + " - " + obj[propName][subPropName]);
				entry[subPropName] = newVal
			}
		}
	}
	
	//main.logmsg("toEntry - Complete: \n" + entry)
	
	return entry // Not necessary, since entry is global in the Connector context - I just like doing it :)
}

function debugMsg(msg) {
	if (__debug) {
//		task.logmsg(msg);
		main.logmsg(msg);
		java.lang.System.out.println(msg)
	}
}

function alertObject(objName, obj) {
	debugMsg("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	debugMsg(arr.toString())
}

// Return the openAPI schema
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: __parameters.schema,
			authUrl: __parameters.authUrl,
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Parse the openAPI schema
function parseSchema() {
	if (__schema) return __schema;

	// @@TODO Make actual call
	debugMsg("Fetching schema...")
	//var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	//var schemaJSON = fetchSchema();

	//debugMsg("Creating SCHEMA object");
	__schema = fetchSchema();

	//var toplvl = "";
	//for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
	//debugMsg("SCHEMA -> " + toplvl)

	//debugMsg("Got it!");
	return __schema
}

function refreshParameters() {
	var path = connector.getParam("path");
	//if (!path) throw new java.lang.RuntimeException("Path parameter has not been set")
	var action = connector.getParam("action");
	// if (!action) throw new java.lang.RuntimeException("Action parameter has not been set")

	__parameters = {};
	
	for (var paramName in __paramNames) {
		//java.lang.System.out.println("> " + paramName);
		__parameters[paramName] = connector.getParam(paramName);
	}
	
	return __parameters
}

function beautifyValue(val) {
	//main.logmsg("beautifyValue() - " + val);
	if (typeof(val) != "object") return val;
	
	try {
		var newVal = toJson(val);
		
		//main.logmsg("!!! It IS JSON !!!");
		if (val.description) newVal = val.description;
		//main.logmsg("--- Returning: '" + newVal + "'");
		return newVal;
	} catch (ex) {
		return val
	}
}

// Figure out which endpoint param is for the base path and grab the value from the entry
function extractUID(entry, epParams) {
	// If epParams is not passed in, look it up yourself
	epParams = epParams || __schema.getParameters(connParams.path, connParams.action);
	var uid = null;
	
	var entryUIDAttName = null;
	for (var i in epParams) {
		var param = epParams[i];
		if (param["in"] == "path") {
			entryUIDAttName = param.name;
			break
		}
	}
	
	if (entryUIDAttName) {
		var uidAtt = entry[entryUIDAttName];
		if (uidAtt) uid = uidAtt.getValue(0)
	}
	
	if (!uid) throw new java.lang.Exception("The UID attribute must be mapped out: " + entryUIDAttName)
	
	return uid
}



//
// -------  Standard Connector functions 
//
function initialize() {
	refreshParameters();
	resetConnector();
	parseSchema()
}

function terminate() {
	resetConnector()
}

// CallReply function
function queryReply() {
	// Get latest settings in case changed
	var connParams = refreshParameters();
	
	// Embed mapped parameters into the path
	java.lang.System.out.println("queryReply() - entry: " + entry);
	main.logmsg("queryReply() - entry: " + entry);
	
	var usePath = __schema.replaceEmbeddedUID(connParams.path, entry);

	// Now for queryParameters
	var epParams = __schema.getParameters(connParams.path, connParams.action);
	
	var queryString = craftQueryString({
		path: usePath,
		connParams: connParams,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Make the REST call @@TODO Only does GET for now
	var reply = __http.makeRequest({
			verb: "GET", // @@TODO Must figure out how to set the HTTP verb based on the schema
			url: usePath + queryString,
			ctype: "application/json",
			where: "queryReply()"
	});

	java.lang.System.out.println("Reply: " + entry.fromJSON(toJson(reply)));

	toEntry(reply, entry);
	return entry
}

// Since this function is being double-purposed, to also retrieve parameters for the Schema pane
// I have to add more logic that is not necessary for normal connector operations.
function selectEntries() {
	// Clear out the selected array of entries and set the index to 0
	__resultSetIndex = 0;
	if (typeof(form) == "undefined") __resultSet.clear();
	
	// Always refresh connParams to catch any user changes
	var connParams = refreshParameters();
	
	// So this code works in my testScriptConnectorCode AL
	if (typeof(entry) == "undefined") var entry = system.newEntry();
	
	// Return either the parameters from the path + action from the openAPI schema, which means 
	// you can use Connect + Next to list all available parameters w/ descriptions...
	if (connParams.queryMode == "Parameters" || typeof(task) == "undefined") {
		var restParams = __schema.getParameters(connParams.path, connParams.action);
		
		for (var i in restParams) {
			var paramName = restParams[i].name;
			//main.logmsg("getNextEntry() - " + paramName + " - " + beautifyValue(restParams[i]))
			entry[paramName] = beautifyValue(restParams[i]);
		}
		
		__resultSet.add(entry)
	} else {
		// ...else work like getNextEntry() usually does and return data
		
		// This the search filter parameter in the Connections tab
		var personId = connParams.searchCrit;
		if (!personId) throw java.lang.Exception("Search criteria (personId) must be configured")
		
		// Get the path and replace id's as required
		var usePath = __schema.replaceEmbeddedUID(connParams.path, personId);
	
		// Now for queryParameters
		var epParams = __schema.getParameters(connParams.path, connParams.action);
		
		var queryString = craftQueryString({
			connParams: connParams,
			path: usePath,
			epParams: epParams,
			action: connParams.action,
			entry: entry
		});
		
		// If there is a queryString, prepend it with ?
		queryString = queryString ? "?" + queryString : "";
		
		//main.logmsg("selectEntries for Data - making call");
		
		// Make the REST call @@TODO Only does GET for now
		var reply = __http.makeRequest({
				verb: "GET", // @@TODO Must figure out how to set the HTTP verb based on the schema
				url: usePath + queryString,
				ctype: "application/json",
				where: "queryReply()"
		});
	
		//main.logmsg("selectEntries for Data - Reply: " + com.ibm.di.entry.Entry.fromJSON(toJson(reply)));

		// Update the global 'entry' variable with these values
		var entry = toEntry(reply);
		
		//main.logmsg("selectEntries for Data - toEntry(): " + entry);

		var resultEntry = system.newEntry();
		resultEntry.merge(entry);
		__resultSet.add(resultEntry);
	}

	return __resultSet	
}

function getNextEntry() {
	//main.logmsg("@@getNextEntry - remaining in buffer: " + __resultSet.size());
	if (__resultSetIndex >= __resultSet.size()) {
		result.setStatus(0);
		return null;
	}

	if (typeof(entry) == "undefined") entry = system.newEntry(); // only for testing
	
	//main.logmsg("getNextEntry() - getting index " + __resultSetIndex);
	entry.merge(__resultSet.get(__resultSetIndex));
	__resultSetIndex++;

	result.setStatus(1);
	//main.logmsg("@@getNextEntry: " + entry);
	return entry
}

function putEntry(entry) {
	// Always refresh connParams to catch any user changes
	var connParams = refreshParameters();
	
	// So this code works in my testScriptConnectorCode AL
	//if (typeof(entry) == "undefined") var entry = system.newEntry();
	
	// Now for queryParameters
	var epParams = __schema.getParameters(connParams.path, connParams.action);
	
	var queryString = craftQueryString({
		connParams: connParams,
		path: usePath,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// Check parameters for the one in the path(base) - the UID
	entryUID = extractUID(entry, epParams);
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Get the path and replace id's as required
	var usePath = __schema.replaceEmbeddedUID(connParams.path, entryUID);

	//main.logmsg("putEntry - making call");
	
	// Make the REST call 
	var reply = __http.makeRequest({
			verb: "POST",
			url: usePath + queryString,
			ctype: "application/json",
			where: "queryReply()",
			body: entry.toJSON()
	});

	//main.logmsg("selectEntries for Data - Reply: " + com.ibm.di.entry.Entry.fromJSON(toJson(reply)));

	//var resultEntry = toEntry(reply);
	task.logmsg("putEntry() - " + entry.fromJSON(toJson(reply)));
	
	return entry
}

function modEntry() {}

function deleteEntry() {}

function findEntry() {}

function querySchema() {
	//main.logmsg("@@querySchema...");
	var connParams = refreshParameters();
	var path = connParams.path;
	var action = connParams.action;
	
	list.clear(); // For use in the _testScriptConnectorCode
	
	if (connParams.queryMode == "Parameters" || typeof(task) == "undefined") {
/* don't think this is needed
		var embeddedParameter = __schema.getEmbeddedUID(path);
		if (embeddedParameter) {
			var e = system.newEntry();
			e.name = embeddedParameter;
			e.syntax = "MUST/uid";
			e.required = true;
			e.mandatory = true;
			list.add(e)
		}
*/
		var parameters = __schema.getParameters(path, action);
	
		for (var i in parameters) {
			var param = parameters[i];
	   
			if (param.name.equalsIgnoreCase("CSRFToken")) continue;
			
			var e = system.newEntry();
			e.name = param.name;
			e.syntax = "MUST/" + param.schema.type;
			e.required = true;
			e.mandatory = true;
			//main.logmsg("@@adding " + param.name);
			list.add(e)
		}
	} else { // queryMode is "Data"
		selectEntries();
		var dataEntry = getNextEntry();
		// Remember to reset the index to the result set for any getNextEntry() called after
		__resultSetIndex = Math.min(0, __resultSetIndex - 1);
		
		
		for (var att in dataEntry) {
			if (att instanceof com.ibm.di.entry.Entry) { // This is one of the links
				var name = "link_";
				throw "OOOOOOPS!! Connector Script line 373"
			} else {
				var name = att.getName();
				var val = att.getValue(0);
				
				//main.logmsg("querySchema() adding " + name + " - " + val);
				
				e = system.newEntry();
				e.name = name;
				e.syntax = typeof(val);
				list.add(e)
			}	
		}
	}

	result.setStatus(1);
	return list
}]]></parameter>
                </Script>
                <Script name="Test Connector Script">
                    <ModTime>1739358718402</ModTime>
                    <parameter name="enabled">true</parameter>
                    <parameter name="script"><![CDATA[initialize();

entry.personId = "NO12345";
entry.name = "Alan Smith";
entry.givenname = "Alan";
entry.sn = "Smith";
entry.personType = "Person";
entry.manager = "erglobalid=328759766326767909,ou=0,ou=people,erglobalid=00000000000000000000,ou=org,dc=com";
entry.ercustomdisplay = "Smith";
entry.mail = "asmith@ibm.com";
entry.erparent = "erglobalid=00000000000000000000,ou=org,dc=com";
entry.uid = "asmith";
entry.erpersonstatus = "ACTIVE";
entry.cn = "Alan Smith";
entry.ersupervisor = "erglobalid=328759766326767909,ou=0,ou=people,erglobalid=00000000000000000000,ou=org,dc=com";

putEntry(entry);]]></parameter>
                </Script>
                <Script name="Test Connector Script INITIAL">
                    <ModTime>1739358643124</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[initialize();

// First we test the alternative querySchema functionality (data or parameters)
cnt = 1;

__forceQueryMode = "Parameters"
querySchema();
params = refreshParameters();
task.logmsg("\n ---- SCHEMA (" + params.queryMode + ") ----\n" + list)

__forceQueryMode = "Data"
params = refreshParameters();
querySchema();
task.logmsg("\n ---- SCHEMA (" + params.queryMode + ") ----\n" + list)


// Now to test the alternative getNext() functionality (data or parameters)
cnt = 1;

selectEntries();

__forceQueryMode = "Parameters"
params = refreshParameters();
e = getNextEntry();
task.logmsg("\n ---- ENTRY (" + params.queryMode + ") ----\n" + e)

__forceQueryMode = "Data"
params = refreshParameters();
e = getNextEntry();
task.logmsg("\n ---- ENTRY (" + params.queryMode + ") ----\n" + e)]]></parameter>
                </Script>
                <Script name="Connector Form Event Script_1">
                    <ModTime>1737914686188</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[// 20250104 1959 Initial
// 20250121 1154 Created RESTCLIENT class and used that instead of lots of functions
// 20250121 2047 Copied back test Event Script after _testScriptConnectorCode succeeded in testing Form code
// 20250121 2103 Form Working! Now to look at Mode ops (putEntry, findEntry, ...)
// 20250126 1901 Adding queryMode for querySchema to return either params, or schema of data
//
//						GLOBAL VARIABLES
//
var __schema = null;
var __initialized = false;
//var __lib = null;

//
//							FUNCTIONS
//

function debug() {
	return false;
	return form.getControl("debug").getText()
}

function alert(msg) {
	if (debug()) alert(msg);
	main.logmsg(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (__initialized) return;
	__initialized = true;
	
	//alert("Initializing...");
	//eval(system.getScriptText("RESTIFY library class")); // Load script library class
	//__lib = new RESTIFY();

	eval(system.getScriptText("RESTCLIENT class")); // Load HTTP Client class
	
	// Recreate in case parameters are changed
	__http = new RESTCLIENT({
						baseUrl:  form.getControl("url").getText(),
						authUrl:  form.getControl("authUrl").getText(),
						apikey:   form.getControl("apikey").getText(),
						username: form.getControl("username").getText(),
						password: form.getControl("password").getText(),
						schemaUrl: form.getControl("schema").getText(),
						debug: debug() // true => debug output
				})		
}

// Return the openAPI schema - @TEST hardcoded for now
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	initialize();

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: "/schema",
			authUrl: form.getControl("authUrl").getText(),
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Update the dropdown with paths
function fetchItems() {
	//alert("---> fetchItems");
    //var path = form.getControl("PathToObjects").getText();

	initialize();

	path = "paths";

    updateDropdown("path",
        [path],
        "Cannot fetch actions for Path");
        
	fetchActions()
}

// Update the dropdown with opera tions for the selected path
function fetchActions() {
	initialize();
	
    var selectedItem = form.getControl("path").getText() || "";
	// alert("fetchActions() for " + selectedItem);

    updateDropdown("action",
        ["paths", selectedItem],
        "Cannot fetch actions for Path: " + selectedItem)
}

// Update dropdown based api
function updateDropdown(controlName, path, errorMsg) {
    try {
    	alert("updateDropdown("
    			+ controlName
    			+ ", " + path + ", errmsg)");

	    initialize();
		
        if (!path) {
        	alert("updateDropdown() - Path parameter must be set");
        	return	
        };

        var subtree = __schema.getChildren(path);
        
        if (subtree == null) {
        	path.shift();
        	alert("Invalid item path: " + path.toString());
        	return
        }
        
		combo = form.getControl(controlName);
		combo.removeAll(); // Empty drop-down

		var arrList = java.util.ArrayList();
        for (var propName in subtree) {
        	arrList.add(propName);
        }
        var arr = arrList.toArray();
        java.util.Arrays.sort(arr);
    			
        for (var propName in arr) {
            //alert("   ..adding " + res);
            combo.add(propName)
        }

        alert("drop-down updated!");

        combo.select(0)

    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        alert(msg);
        throw msg
    }
}

// Empty out both Item and Object dropdowns
function clearDropdowns() {
	form.getControl("path").removeAll();
	form.getControl("action").removeAll()	
}

// For debugging from inside 
function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("_Restify/Log_" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]></parameter>
                </Script>
                <Connector name="RestClientConnector">
                    <InheritFrom>/Connectors/ITIMRestClientConnector</InheritFrom>
                    <ModTime>1739292133836</ModTime>
                    <ConnectorMode>CallReply</ConnectorMode>
                    <ConnectorState>Disabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739292133836</ModTime>
                        <parameter name="queryMode">Data</parameter>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1738951570943</ModTime>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1738951543770</ModTime>
                        <AttributeMapItem>
                            <Name>personId</Name>
                            <Type>advanced</Type>
                            <Script>"NO12345"</Script>
                            <Simple>personId</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <DeltaSettings>
                        <ModTime>1738950998940</ModTime>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739292124443</ModTime>
                        <SchemaItem>
                            <Name>attributes</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>MUST/string</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>embedded</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>MUST/string</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>forms</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>MUST/string</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>personId</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>MUST/string</NativeSyntax>
                        </SchemaItem>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739292124443</ModTime>
                        <SchemaItem>
                            <Name>attributes</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>MUST/string</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>embedded</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>MUST/string</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>forms</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>MUST/string</NativeSyntax>
                        </SchemaItem>
                        <SchemaItem>
                            <Name>personId</Name>
                            <Syntax>java.lang.String</Syntax>
                            <NativeSyntax>MUST/string</NativeSyntax>
                        </SchemaItem>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
                <Script name="DumpWorkEntry">
                    <ModTime>1739214546085</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[// Dump the work entry
task.dumpEntry(work);
]]></parameter>
                </Script>
                <ALMap name="Set up parameter value">
                    <InheritFrom>[no inheritance]</InheritFrom>
                    <ModTime>1739216094137</ModTime>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739215969894</ModTime>
                        <AttributeMapItem>
                            <Name>parameters</Name>
                            <Type>substitution</Type>
                            <Script>work.parameters</Script>
                            <SubstitutionTemplate><![CDATA[attributes=name,rank,serialnumber
embedded=manager
forms=false
boogy=woogy
ignoreme
novalue=
]]></SubstitutionTemplate>
                        </AttributeMapItem>
                    </AttributeMap>
                    <State>Disabled</State>
                </ALMap>
                <Script name="Code parameters Param handling">
                    <ModTime>1739216096240</ModTime>
                    <parameter name="enabled">false</parameter>
                    <parameter name="script"><![CDATA[function parseParamsValue(paramsValue) {
	var paramsObj = {};
	var lines = paramsValue.split(/\r?\n|\r/);
	for (var lineIndex = 0; lineIndex < lines.length; lineIndex++){
		var thisLine = lines[lineIndex];
		var parts = thisLine.split("=");
		var paramName = parts[0].trim();
		var paramValue = (parts.length > 1) ? parts[1].trim() : "";
		
		if (paramValue) {
			paramsObj[paramName] = paramValue
		}
	}
	
	return paramsObj
}

paramsValue = work.getString("parameters");

obj = parseParamsValue(paramsValue);
task.logmsg(work.fromJSON(toJson(obj)));]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    <AssemblyLine name="calling_AL">
            <ModTime>1739368417483</ModTime>
            <Settings/>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="Call the AL" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1739368417483</ModTime>
                <Script name="Call the AL">
                    <ModTime>1739368417483</ModTime>
                    <parameter name="script"><![CDATA[al = main.startAL("called_AL")
al.join();]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
        <AssemblyLine name="called_AL">
            <ModTime>1739368457003</ModTime>
            <Settings/>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="Do something" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1739368457003</ModTime>
                <Script name="Do something">
                    <ModTime>1739368457003</ModTime>
                    <parameter name="script"><![CDATA[i = 1; 
i++
task.logmsg(i)]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    <AssemblyLine name="_testITIMRestConnector">
            <ModTime>1742650474003</ModTime>
            <Settings/>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="ITIMRestClientConnector_add" state="Simulated"/>
                    <Component name="ITIMRestClientConnector_delete" state="Simulated"/>
                    <Component name="ITIMRestClientConnector_lookup" state="Enabled"/>
                    <Component name="ITIMRestClientConnector_update_add" state="Simulated"/>
                    <Component name="ITIMRestClientConnector_update_modify_fails" state="Simulated"/>
                    <Component name="ITIMRestClientConnector_callReply" state="Enabled"/>
                    <Component name="ITIMRestClientConnector_iterate" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer">
                <ModTime>1742650474003</ModTime>
                <Connector name="ITIMRestClientConnector_iterate">
                    <InheritFrom>/Connectors/ITIMRestClientConnector_TEST</InheritFrom>
                    <ModTime>1742650474003</ModTime>
                    <ConnectorMode>Iterator</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1742650474003</ModTime>
                        <parameter name="action">get</parameter>
                        <parameter name="path">/people/{personId}</parameter>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739969103037</ModTime>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <DeltaSettings>
                        <ModTime>1739969096670</ModTime>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739972552928</ModTime>
                        <Hook name="after_getnext">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>after_getnext</Name>
                            <Script><![CDATA[saveWork = system.newEntry();
saveWork.merge(conn);

task.logmsg("---- After GetNext: " + conn);

// pass work on to add connector]]></Script>
                            <Enabled>true</Enabled>
                        </Hook>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
            </ContainerEF>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1739985589063</ModTime>
                <Connector name="ITIMRestClientConnector_add">
                    <InheritFrom>/Connectors/ITIMRestClientConnector_TEST</InheritFrom>
                    <ModTime>1739972574321</ModTime>
                    <ConnectorMode>AddOnly</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739972574321</ModTime>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>personId</Name>
                            <Type>advanced</Type>
                            <Script>"NO12345"</Script>
                            <Simple>personId</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <DeltaSettings>
                        <ModTime>1739969182653</ModTime>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739969326372</ModTime>
                        <Hook name="addonly_ok">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>addonly_ok</Name>
                            <Script>task.logmsg("---- Add Successful: " + conn)</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
                <Connector name="ITIMRestClientConnector_delete">
                    <InheritFrom>/Connectors/ITIMRestClientConnector_TEST</InheritFrom>
                    <ModTime>1739969394506</ModTime>
                    <ConnectorMode>Delete</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739969350633</ModTime>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <DeltaSettings>
                        <ModTime>1739969332275</ModTime>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739969367873</ModTime>
                        <LinkCriteriaItem>
                            <Key>1951e416282</Key>
                            <Attribute>personId</Attribute>
                            <Operator>equals</Operator>
                            <Value>NO12345</Value>
                        </LinkCriteriaItem>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739969394506</ModTime>
                        <Hook name="after_delete">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>after_delete</Name>
                            <Script>task.logmsg("---- After Delete: " + conn)</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
                <Connector name="ITIMRestClientConnector_lookup">
                    <InheritFrom>/Connectors/ITIMRestClientConnector_TEST</InheritFrom>
                    <ModTime>1739969457947</ModTime>
                    <ConnectorMode>Lookup</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739969420495</ModTime>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <DeltaSettings>
                        <ModTime>1739969402131</ModTime>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739969437607</ModTime>
                        <AdvancedLinkMode>true</AdvancedLinkMode>
                        <Script>"NO12345"</Script>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739969457947</ModTime>
                        <Hook name="after_lookup">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>after_lookup</Name>
                            <Script>task.logmsg("---- After Lookup: " + conn)</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
                <Connector name="ITIMRestClientConnector_update_add">
                    <InheritFrom>/Connectors/ITIMRestClientConnector_TEST</InheritFrom>
                    <ModTime>1739985464645</ModTime>
                    <ConnectorMode>Update</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739969505026</ModTime>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>personId</Name>
                            <Type>advanced</Type>
                            <Enabled>true</Enabled>
                            <Add>true</Add>
                            <Modify>true</Modify>
                            <Script>"NO12345"</Script>
                            <Simple>personId</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <DeltaSettings>
                        <ModTime>1739969463702</ModTime>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739969496594</ModTime>
                        <LinkCriteriaItem>
                            <Key>1951e434bee</Key>
                            <Attribute>personId</Attribute>
                            <Operator>equals</Operator>
                            <Value>DOESNOTEXIST_FORCE_AND_ADD</Value>
                        </LinkCriteriaItem>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739985464645</ModTime>
                        <Hook name="after_add">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>after_add</Name>
                            <Script>task.logmsg("---- update_add After Add: " + conn)</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                        <Hook name="after_lookup">
                            <Name>after_lookup</Name>
                            <Enabled>true</Enabled>
                        </Hook>
                        <Hook name="before_add">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>before_add</Name>
                            <Script>task.logmsg("---- update_add After Lookup: " + conn)</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                        <Hook name="before_modify">
                            <Name>before_modify</Name>
                            <Enabled>true</Enabled>
                        </Hook>
                        <Hook name="before_update">
                            <Name>before_update</Name>
                            <Enabled>true</Enabled>
                        </Hook>
                        <Hook name="default_fail">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>default_fail</Name>
                            <Script>task.logmsg("!!!! Error: " + ex)</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
                <Connector name="ITIMRestClientConnector_update_modify_fails">
                    <InheritFrom>/Connectors/ITIMRestClientConnector_TEST</InheritFrom>
                    <ModTime>1739985531993</ModTime>
                    <ConnectorMode>Update</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739969572590</ModTime>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739973776141</ModTime>
                        <AttributeMapItem>
                            <Name>personId</Name>
                            <Type>advanced</Type>
                            <Script>"NO12345"</Script>
                            <Simple>personId</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <DeltaSettings>
                        <ModTime>1739969557630</ModTime>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739973797581</ModTime>
                        <LinkCriteriaItem>
                            <Key>1951e850c0a</Key>
                            <Attribute>personId</Attribute>
                            <Operator>equals</Operator>
                            <Value>NO12345</Value>
                        </LinkCriteriaItem>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739985531993</ModTime>
                        <Hook name="after_modify">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>after_modify</Name>
                            <Script>task.logmsg("---- After Modify: " + conn)</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                        <Hook name="before_modify">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>before_modify</Name>
                            <Script>task.logmsg("---- update_modify Before Lookup: " + conn)</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                        <Hook name="default_fail">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>default_fail</Name>
                            <Script>task.logmsg("---- update_add Default On Error: " + error)</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
                <Connector name="ITIMRestClientConnector_callReply">
                    <InheritFrom>/Connectors/ITIMRestClientConnector_TEST</InheritFrom>
                    <ModTime>1739985589063</ModTime>
                    <ConnectorMode>CallReply</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739969793083</ModTime>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739985589063</ModTime>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                        <AttributeMapItem>
                            <Name>personId</Name>
                            <Type>advanced</Type>
                            <Script>"NO12345"</Script>
                            <Simple>personId</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <DeltaSettings>
                        <ModTime>1739969639969</ModTime>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1739969765106</ModTime>
                        <Hook name="after_reply">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>after_reply</Name>
                            <Script>task.logmsg("---- After CallReply: " + conn)</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                        <Hook name="before_call">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>before_call</Name>
                            <Script>conn.merge(saveWork)</Script>
                            <Enabled>true</Enabled>
                        </Hook>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    <AssemblyLine name="ISVG_LCR_TEST">
            <ModTime>1742478684589</ModTime>
            <Settings/>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="ITIMRestClientConnector" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer">
                <Connector name="ITIMRestClientConnector">
                    <InheritFrom>/Connectors/ITIMRestClientConnector</InheritFrom>
                    <ModTime>1742305281964</ModTime>
                    <ConnectorMode>Iterator</ConnectorMode>
                    <ConnectorState>Enabled</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                        <parameter name="action">GET</parameter>
                        <parameter encrypted="true" name="password">Tx/h4FS4oaIrHXGzum5i4caJ70RCwUIwWcyor/uFP9nU5bV3SsCJSVf8ybeWkPAHfih4zrhDKDwUk0pnWYU3mR++lxjgUVWlnKc2ggbxPazjGZcm9TXcpaJvHjiE+WVeI/j89mefFMWk8r8c+i60jT/ONZf/kdOvaCHGUTEBSP8=</parameter>
                        <parameter name="path">/lifecyclerule</parameter>
                        <parameter name="url">https://192.168.2.39:30943/openapi/ui/#</parameter>
                        <parameter name="username">itim manager</parameter>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <AttributeMapItem>
                            <Name>*</Name>
                            <Type>simple</Type>
                            <Simple>*</Simple>
                        </AttributeMapItem>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </AttributeMap>
                    <DeltaSettings>
                        <WhenToCommit>After every database operation</WhenToCommit>
                        <RowLocking>SERIALIZABLE</RowLocking>
                        <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                    </DeltaSettings>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <Hook name="before_initialize">
                            <InheritFrom>[no inheritance]</InheritFrom>
                            <Name>before_initialize</Name>
                            <Script><![CDATA[resthost = "https://192.168.2.39:30943";
	
	//Setup connector 
	myHttpConn = system.getConnector("ibmdi.HTTPClient");
	//Prepare call to get JSESSIONID
	myHttpConn.setParam("url",resthost + "/itim/restlogin/login.jsp");
	myHttpConn.setParam("method","GET");
	myHttpConn.initialize(null);
	//Perform call
	httpReply = myHttpConn.queryReply(null);
	//Retrieve JSESSIONID
	JSESSIONID = httpReply.getString("http.Set-Cookie");

	//Prepare call to get LTPAToken2
	myHttpConn.setParam("url",resthost + "/itim/j_security_check");
	myHttpConn.setParam("method","POST");
	myHttpConn.initialize(null);
	
	//Configure the call
	var httpcall = system.newEntry();
	httpcall.setAttribute("http.Content-Type","application/x-www-form-urlencoded");
	httpcall.setAttribute("http.Cookie",JSESSIONID);
	//Set body to userid/password
	httpcall.setAttribute("http.body","j_username=itim manager&j_password=Passw0rd");
	//Perform call
	httpReply = myHttpConn.queryReply(httpcall);
	//Retrieve LTPAToken2
	LTPAToken2 = httpReply.getString("http.Set-Cookie");
	
	//Prepare call to get CSRFToken
	myHttpConn.setParam("url",resthost + "/itim/rest/systemusers/me");
	myHttpConn.setParam("method","POST");
	myHttpConn.initialize(null);
	
	//Configure the call
	var httpcall = system.newEntry();
	httpcall.setAttribute("http.Cookie",[JSESSIONID,LTPAToken2]);
	//Perform call
	httpReply = myHttpConn.queryReply(httpcall);
	//Retrieve CSRFToken
	CSRFToken = httpReply.getString("http.CSRFToken");]]></Script>
                            <Enabled>true</Enabled>
                        </Hook>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
            </ContainerEF>
            <ContainerDF name="DataFlowContainer"/>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
        <AssemblyLine name="_makeRequestSimple">
            <ModTime>1742587695109</ModTime>
            <Settings/>
            <Hooks/>
            <CheckpointConfig/>
            <SandboxConfig/>
            <SimulationConfig>
                <SimulationStates>
                    <Component name="http" state="Simulated"/>
                    <Component name="test it" state="Enabled"/>
                </SimulationStates>
                <ProxySettings/>
            </SimulationConfig>
            <LogConfig/>
            <ContainerEF name="EntryFeedContainer"/>
            <ContainerDF name="DataFlowContainer">
                <ModTime>1742587695109</ModTime>
                <Connector name="http">
                    <InheritFrom>system:/Connectors/ibmdi.HTTPClient</InheritFrom>
                    <ModTime>1742587575228</ModTime>
                    <ConnectorMode>AddOnly</ConnectorMode>
                    <ConnectorState>Passive</ConnectorState>
                    <Configuration>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1742587539724</ModTime>
                        <parameter name="url">http://localhost:8080</parameter>
                    </Configuration>
                    <Parser>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1742587512799</ModTime>
                    </Parser>
                    <AttributeMap name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1742587512799</ModTime>
                    </AttributeMap>
                    <AttributeMap name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1742587512799</ModTime>
                    </AttributeMap>
                    <DeltaSettings/>
                    <Schema name="Input">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1742587512799</ModTime>
                    </Schema>
                    <Schema name="Output">
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1742587512799</ModTime>
                    </Schema>
                    <LinkCriteria>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1742587512799</ModTime>
                    </LinkCriteria>
                    <Hooks>
                        <InheritFrom>[parent]</InheritFrom>
                        <ModTime>1742587512799</ModTime>
                    </Hooks>
                    <CheckpointConfig/>
                    <SandboxConfig/>
                    <Reconnect>
                        <InheritFrom>[parent]</InheritFrom>
                        <ReconnectRules/>
                    </Reconnect>
                    <Operations/>
                    <PoolDefinition>
                        <InheritFrom>[parent]</InheritFrom>
                    </PoolDefinition>
                    <PoolInstance/>
                </Connector>
                <Script name="test it">
                    <ModTime>1742587695109</ModTime>
                    <parameter name="script"><![CDATA[http = http.getConnector();

reqEntry = system.newEntry();
reqEntry.method = "POST";
reqEntry["http.url"] = "http://localhost:8080/itim/j_security_check";

retEntry = http.queryReply(reqEntry);

task.logmsg(retEntry)]]></parameter>
                </Script>
            </ContainerDF>
            <ThreadOptions/>
            <Operations/>
            <InitParams>
                <Schema name="AssemblyLineInitParams"/>
            </InitParams>
        </AssemblyLine>
    </Folder>
    <Folder name="Connectors">
        
        
    
        
    
    
    
    
        
        
    
    
    
        
    
    
        
        
    
    
        
    
    
        
    
        
    
    
        
    
    
        
    
    
    
    
        
        
        
    
        
        
    
    
    
        
    
        
    
    <Connector name="ITIMRestClientConnector">
            <InheritFrom>system:/Connectors/ibmdi.ScriptConnector</InheritFrom>
            <ModTime>1742650975089</ModTime>
            <ConnectorMode>Lookup</ConnectorMode>
            <ConnectorState>Enabled</ConnectorState>
            <Configuration>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1742650975089</ModTime>
                <parameter name="$form$"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="808" UUID="addb9b0b-e0b0-408d-bc18-1e00ff1dbaa6" created="Sun Dec 01 21:11:43 CET 2024" createdBy="eddiehartman" main="Form" modified="Sat Mar 22 14:37:24 CET 2025" modifiedBy="eddiehartman" version="7.1.1">
    <Form name="Form">
        <ModTime>1742563224992</ModTime>
        <FormItemNames>
            <ListItem>$GLOBAL.script</ListItem>
            <ListItem>keepGlobalState</ListItem>
            <ListItem>$GLOBAL.includeFiles</ListItem>
            <ListItem>includePrologs</ListItem>
            <ListItem>$GLOBAL.debug</ListItem>
            <ListItem>$GLOBAL.help</ListItem>
            <ListItem>PathToObjects</ListItem>
            <ListItem>Clear</ListItem>
            <ListItem>apikey</ListItem>
            <ListItem>action</ListItem>
            <ListItem>username</ListItem>
            <ListItem>password</ListItem>
            <ListItem>authUrl</ListItem>
            <ListItem>path</ListItem>
            <ListItem>schema</ListItem>
            <ListItem>url</ListItem>
            <ListItem>debug</ListItem>
            <ListItem>searchCrit</ListItem>
            <ListItem>includeUIDs</ListItem>
            <ListItem>parameters</ListItem>
        </FormItemNames>
        <FormSectionNames>
            <ListItem>General</ListItem>
            <ListItem>Advanced</ListItem>
        </FormSectionNames>
        <FormItem name="APIKey"/>
        <FormItem name="Action">
            <ModTime>1735050078962</ModTime>
            <parameter name="description">Operation to apply to the selected Item</parameter>
            <parameter name="label">Action</parameter>
            <parameter name="script">fetchActions</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="Clear">
            <ModTime>1737024086705</ModTime>
            <parameter name="label"/>
            <parameter name="noLabel">true</parameter>
            <parameter name="script">clearDropdowns</parameter>
            <parameter name="scriptLabel">Clear Path and Action</parameter>
            <parameter name="syntax">static</parameter>
        </FormItem>
        <FormItem name="Item">
            <ModTime>1734098635211</ModTime>
            <parameter name="description">The resource item to operation on</parameter>
            <parameter name="label">Item</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="script2"/>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="scriptLabel2"/>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="Object">
            <ModTime>1733572441046</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Item to perform operations on</parameter>
            <parameter name="label">	formdata.items = formdata.items || {};</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="scriptLabel"/>
            <parameter name="syntax">droplist</parameter>
        </FormItem>
        <FormItem name="Operation">
            <ModTime>1733750352248</ModTime>
            <parameter name="description">Operation to apply to the selected Object</parameter>
            <parameter name="label">Action</parameter>
            <parameter name="script">fetchOperations</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="PathToObjects">
            <ModTime>1733398344461</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The openAPIschema is hierarchical, so at what level in the tree do resource items appear. Separate tree branches by pipe symbol (|)</parameter>
            <parameter name="label">Path to Items</parameter>
            <parameter name="script"/>
            <parameter name="scriptLabel"/>
        </FormItem>
        <FormItem name="Show">
            <ModTime>1733312883681</ModTime>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="action">
            <ModTime>1736017096799</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Operation to apply to the selected path (resource item)</parameter>
            <parameter name="label">Action</parameter>
            <parameter name="script">fetchActions</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="apikey">
            <ModTime>1737489711326</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">API Key provided for access to the service</parameter>
            <parameter name="label">API Key</parameter>
            <parameter name="syntax">password</parameter>
        </FormItem>
        <FormItem name="authUrl">
            <ModTime>1738951255789</ModTime>
            <parameter name="description">Path to the authentication service, often with 'token' in its name</parameter>
            <parameter name="label">Auth URL</parameter>
        </FormItem>
        <FormItem name="baseUrl">
            <ModTime>1737024040596</ModTime>
            <parameter name="description">The first part of the URL, http://&lt;domain&gt;:&lt;port&gt;, with colon and port number required only if not port 80</parameter>
            <parameter name="label">var __emptyEntry = system.newEntry();</parameter>
        </FormItem>
        <FormItem name="dashes">
            <ModTime>1734099205004</ModTime>
            <parameter name="label">_________________________________________________________________________________</parameter>
            <parameter name="script"/>
            <parameter name="scriptLabel"/>
            <parameter name="syntax">static</parameter>
        </FormItem>
        <FormItem name="debug">
            <ModTime>1737459130079</ModTime>
            <parameter name="description">Yes or no</parameter>
            <parameter name="label">Debug output</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="dropdown"/>
        <FormItem name="includePrologs">
            <parameter name="description">pro_desc</parameter>
            <parameter name="label">pro_label</parameter>
            <parameter name="script">selectGlobalProlog</parameter>
            <parameter name="scriptLabel">pro_script_label</parameter>
            <parameter name="scripthelp">pro_script_help</parameter>
            <parameter name="syntax">textarea</parameter>
        </FormItem>
        <FormItem name="includeUIDs">
            <ModTime>1738499699708</ModTime>
            <parameter name="description">Should UIDs for the entry and associated data be included in the returned data</parameter>
            <parameter name="label">Include UIDs</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="item">
            <ModTime>1735050022484</ModTime>
            <parameter name="description">The resource to act on</parameter>
            <parameter name="label">Item</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="keepGlobalState">
            <parameter name="description">SCRIPT_CONN_KEEP_GLOBAL_STATE_DESC</parameter>
            <parameter name="label">SCRIPT_CONN_KEEP_GLOBAL_STATE_LABEL</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="parameters">
            <ModTime>1739974569312</ModTime>
            <parameter name="description">Free-text list of &lt;parameter&gt;=&lt;value&gt;, one line for each parameter</parameter>
            <parameter name="label">Parameters</parameter>
            <parameter name="script">fetchParameters</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">textarea</parameter>
        </FormItem>
        <FormItem name="password">
            <ModTime>1736017137163</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Authorization password</parameter>
            <parameter name="label">Password</parameter>
            <parameter name="syntax">password</parameter>
        </FormItem>
        <FormItem name="path">
            <ModTime>1737024268372</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The URL path representing the resource item to work with</parameter>
            <parameter name="label">Path</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="queryMode">
            <ModTime>1739287744378</ModTime>
            <Values>
                <ListItem>Parameters</ListItem>
                <ListItem>Data</ListItem>
            </Values>
            <parameter name="description">Pressing Next in the Attribute Schema pane will either return available parameters for the selected Path, or the schema of the data</parameter>
            <parameter name="label">Query Schema mode</parameter>
            <parameter name="syntax">droplist</parameter>
        </FormItem>
        <FormItem name="schema">
            <ModTime>1737024188497</ModTime>
            <parameter name="description">The REST endpoint that returns the schema for this API</parameter>
            <parameter name="label">Schema</parameter>
            <parameter name="script">fetchSchema</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
        </FormItem>
        <FormItem name="searchCrit">
            <ModTime>1737544048218</ModTime>
            <parameter name="description">The Id of the Resource Item you want to retrieve</parameter>
            <parameter name="label">Search for ID</parameter>
        </FormItem>
        <FormItem name="url">
            <ModTime>1742563224992</ModTime>
            <parameter name="description">The first part of the URL, http://&lt;domain&gt;:&lt;port&gt;, with colon and port number, which is not required if the port is 80</parameter>
            <parameter name="label">REST Host</parameter>
        </FormItem>
        <FormItem name="username">
            <ModTime>1736017120599</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Authorization username</parameter>
            <parameter name="label">Username</parameter>
        </FormItem>
        <FormSection name="Advanced">
            <FormSectionNames>
                <ListItem>authUrl</ListItem>
                <ListItem>schema</ListItem>
                <ListItem>parameters</ListItem>
                <ListItem>$GLOBAL.userComment</ListItem>
                <ListItem>$GLOBAL.script</ListItem>
                <ListItem>Clear</ListItem>
            </FormSectionNames>
            <parameter name="initiallyExpanded">false</parameter>
            <parameter name="title">Advanced</parameter>
        </FormSection>
        <FormSection name="Debug">
            <FormSectionNames>
                <ListItem>Clear</ListItem>
            </FormSectionNames>
        </FormSection>
        <FormSection name="General">
            <FormSectionNames>
                <ListItem>apikey</ListItem>
                <ListItem>username</ListItem>
                <ListItem>password</ListItem>
                <ListItem>url</ListItem>
                <ListItem>path</ListItem>
                <ListItem>action</ListItem>
                <ListItem>searchCrit</ListItem>
            </FormSectionNames>
        </FormSection>
        <parameter name="formevents"><![CDATA[// 20250104 1959 Initial
// 20250121 1154 Created RESTCLIENT class and used that instead of lots of functions
// 20250121 2047 Copied back test Event Script after _testScriptConnectorCode succeeded in testing Form code
// 20250121 2103 Form Working! Now to look at Mode ops (putEntry, findEntry, ...)
// 20250128 1608 Hardened the fetchActions and fetchItems so it checks for schema first
// 20250219 1802 Finished Fetch for parameters in Connections tab
// 20250220 1321 Added some description to Parameters when fetched
//
//						GLOBAL VARIABLES
//
var __schema = null;
var __initialized = false;
//var __lib = null;

//
//							FUNCTIONS
//

function debug() {
	return false;
	return form.getControl("debug").getText()
}

function alert(msg) {
	main.logmsg(msg);
	java.lang.System.out.println(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (__initialized) return;
	__initialized = true;
	
	//alert("Initializing...");
	//eval(system.getScriptText("RESTIFY library class")); // Load script library class
	//__lib = new RESTIFY();

	eval(system.getScriptText("RESTCLIENT class")); // Load HTTP Client class
	
	// Recreate in case parameters are changed
	__http = new RESTCLIENT({
						baseUrl:  form.getControl("url").getText(),
						authUrl:  form.getControl("authUrl").getText(),
						apikey:   form.getControl("apikey").getText(),
						username: form.getControl("username").getText(),
						password: form.getControl("password").getText(),
						schemaUrl: form.getControl("schema").getText(),
						debug: debug() // true => debug output
				})		
}

// Return the openAPI schema - @TEST hardcoded for now
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	initialize();

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: "/schema",
			authUrl: form.getControl("authUrl").getText(),
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Update the dropdown with paths
function fetchItems() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")
	//alert("---> fetchItems");

	initialize();

	path = "paths";

    updateDropdown("path",
        [path],
        "Cannot fetch actions for Path");
        
	fetchActions()
}

// Update the dropdown with opera tions for the selected path
function fetchActions() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")
	
	initialize();
	
    var selectedItem = form.getControl("path").getText() || "";
	// alert("fetchActions() for " + selectedItem);

    updateDropdown("action",
        ["paths", selectedItem],
        "Cannot fetch actions for Path: " + selectedItem)
}

// Fetch the parameters (with descriptions) and populate the text box - appending to what is already there
function fetchParameters() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")

	var params = __schema.getParameters(form.getControl("path").getText(),
										form.getControl("action").getText());

	updateTextBox("parameters", params)
}

// Updating a textbox control
function updateTextBox(controlName, paramsArray) {
	// First get the existing value and parse it (if possible)
	var oldValue = form.getControl(controlName).getText().trim();
	var useParams = {};
	
	//alert("     paramsArray: " + paramsArray.length);
	
	// Go through the passed parameters and set those that are not already set
	for (var i = 0; i < paramsArray.length; i++) {
		var param = paramsArray[i];
		//alert("Found " + i + " " + param.name + ": " + param.description);
		if (param["in"] != "path") {
			// Add to the list if not something for the path itself
			useParams[param.name] = system.splitString(param.description, ".")[0]
									+ (system.splitString(param.description, ".")[1]);	
		}
	}
	
	// Parse the old text value into individual parameter settings and put in an Entry
	if (oldValue) {
		var lines = system.splitString(oldValue, "\n");
		for (var line in lines) {
			var parts = system.splitString(line, "=");
			if (parts.length > 1) {
				// Overwrite any discovered parameters with previously set values
				useParams[parts[0].trim()] = parts[1].trim();
			}
		}
	}
	
	alert("---- Final list of params: " + toJson(useParams))

	// Get the useParams property names (param names) and sort them
	var paramList = new java.util.ArrayList();
	for (var propName in useParams) {
		alert("    Adding " + propName)
		paramList.add(propName);
	}
	
	paramNames = paramList.toArray();
	java.util.Arrays.sort(paramNames);
	alert("    ParamNames: " + paramNames.length + " item(s)")

	var newParamText = "";
	for (var i = 0; i < paramNames.length; i++) {
		var paramName = paramNames[i];
		alert("    Getting " + paramName)
		newParamText += paramName + "=" + useParams[paramName] + "\n"
	}
	
	//alert(">>>> Setting Parameters value:\n" + newParamText);
	
	// Finally, update the control
	form.getControl(controlName).setText(newParamText)
}

// Update dropdown based api
function updateDropdown(controlName, path, errorMsg) {
    try {
    	alert("updateDropdown("
    			+ controlName
    			+ ", " + path + ", errmsg)");

	    initialize();
		
        if (!path) {
        	alert("updateDropdown() - Path parameter must be set");
        	return	
        };

        var subtree = __schema.getChildren(path);
        
        if (subtree == null) {
        	path.shift();
        	alert("Invalid item path: " + path.toString());
        	return
        }
        
		combo = form.getControl(controlName);
		combo.removeAll(); // Empty drop-down

		var arrList = java.util.ArrayList();
        for (var propName in subtree) {
        	arrList.add(propName);
        }
        var arr = arrList.toArray();
        java.util.Arrays.sort(arr);
    			
        for (var propName in arr) {
            //alert("   ..adding " + res);
            combo.add(propName)
        }

        alert("drop-down updated!");

        combo.select(0)

    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        alert(msg);
        throw msg
    }
}

// Empty out both Item and Object dropdowns
function clearDropdowns() {
	form.getControl("path").removeAll();
	form.getControl("action").removeAll()	
}

// For debugging from inside 
function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("_Restify/Log_" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]]]><![CDATA[></parameter>
        <parameter name="formscript"/>
        <parameter name="title">CONN_TITLE</parameter>
        <TranslationFile>NLS/idi_conn_scriptconn</TranslationFile>
    </Form>
</MetamergeConfig>]]></parameter>
                <parameter name="Action"/>
                <parameter name="Item"/>
                <parameter name="Object"/>
                <parameter name="Operation">servers</parameter>
                <parameter name="PathToObjects">paths</parameter>
                <parameter name="action">get</parameter>
                <parameter encrypted="true" name="apikey">Nqwv9+F/DEMjWubbNnWLG7v2vzR/ynEHS7OZg+kz5freaCh6lMBeEc04G1309DNQwOcjarMbC8nCz9V60/r2PitKIkPNRXd7wo5tqxcNsqzka4X7o0Bc+e7sDQRuF5Uvwib0iIhi+d+B7l8oY6NHrE7X49HfRzQqvSAXv6ttXCs=</parameter>
                <parameter name="authUrl">/itim/j_security_check</parameter>
                <parameter name="debug">false</parameter>
                <parameter name="includeFiles"/>
                <parameter name="includePrologs"><![CDATA[SCHEMA class
RESTCLIENT class]]></parameter>
                <parameter name="includeUIDs">true</parameter>
                <parameter name="item">/people</parameter>
                <parameter name="parameters"><![CDATA[
]]></parameter>
                <parameter encrypted="true" name="password">ftdhqPNy0WBcaz82QlDbzK+V03yF9oNnO2FbwLW8S4rDjzlfVWs3Ug8/992O3P2xu4XLZRdl7XxXwP6t/0bUapi1pXlUKBkPVmvEdcUs6S+DN+SbJrbiJkwrXor1JXXmIs0YZWelmL0bBluIw32pN+VLvu6otwrZW61zqBXeYAI=</parameter>
                <parameter name="path">/people/{personId}</parameter>
                <parameter name="queryMode">Data</parameter>
                <parameter name="schema">/schema</parameter>
                <parameter name="script"><![CDATA[// 20250104 2008 Initial
// 20250111 1915 Handling queryParameters in url
// 20250126 1901 Adding queryMode for querySchema to return either params, or schema of data
// 20250127 1346 initialize(), terminate(), selectEntries() and a test queryReply() in place
// 20250127	1854 maded querySchema drop the token in the parameters returned
// 20250128 1503 selectEntries and getNextEntry implemented - ready for more testing I'm sure :)
// 20250128 1705 Added the check for spoofing
// 20250128 2136 querySchema() can now return either parameters or data when you press Connect and Next in the Schema pane
// 20250130 1207 Hopefully now
// 20250130 1221 Fixing it in place in the Connector
// 20250131 1928 Gonna get querySchema to work right
// 20250131 2009 Now looking at getNextEntry() so I can return parameter descriptions with Connect + Next if querySchemaMode == Parameters
// 20250131 2033 Something still not right - alas, tomorrow
// 20250202 1313 Looking for my "entry not found" error when Connect while queryMode == Data
// 20250202 1407 Connect working for both settings!!!! 
// 20250202 1453 getNextEntry for Connect + Next now it's working!
// 20250207 1819 looking at selectEntries and getNextEntry, as well as findEntry, putEntry and modEntry. Tonight!!!
//          1917 Nope - manana
// 20250211 2024 Fixed mock server for people put, delete and servers - I hope
// 20250212 1142 Adding putEntry, deleteEntry and findEntry
// 20250214 1758 Finishing putEntry, deleteEntry and findEntry
// 20250214 1924 all Connector functions in place
// 20250219 1419 Removing Query Schema Mode 
// 20250219 2023 All connector modes supported except modify
//
// --- TODO Freetext parameter where all the standard set of parameter values can be set
//                                        
//
//						GLOBAL VARIABLES
//
var __parameters = {};						// params for the chosen path and action
var __debug = connector.getParam("debug");	// debug output?
var __schema = null;						// shared openAPI schema object (SCHEMA class)
var __initialized = false;					// Do I need this?
var __emptyEntry = system.newEntry();		// for craftQueryString
var __http = null; 							// for the RESTCLIENT we will use for the calls
var __resultSet = null;						// A container for returned entries (selectEntries/findEntry)
var __resultSetIndex = 0;					// Index into the result set
var __formEventCalling = false;

var __paramNames = {
	action: true,
	apikey: true,
	schema: true,
	authUrl: true,
	debug: true,
	path: true,
	password: true,
	url: true,
	username: true,
	item: true,
	action: true,
	searchCrit: true,
	includeUIDs: true,
	parameters: true
}

//
//							FUNCTIONS
//



function connParamField2Entry(connParams) {
	var paramsEntry = system.newEntry();
	var paramSetting = connParams.parameters;
	var lines = paramSetting.split(/\r?\n|\r/);
	for (var lineIndex = 0; lineIndex < lines.length; lineIndex++){
		var thisLine = lines[lineIndex];
		var parts = thisLine.split("=");
		var paramName = parts[0].trim();
		var paramValue = (parts.length > 1) ? parts[1].trim() : "";
		
		if (paramValue) {
			paramsEntry[paramName] = paramValue
		}
	}
	
	return paramsEntry
}

function craftQueryString(args) {
	var path = args.path;
	var action = args.action;
	var connParams = args.connParams;
	var useParams = args.epParams || {};
	var entry = args.entry || __emptyEntry;
	
	var embeddedUID = __schema.getEmbeddedUID(path);

	var paramsEntry = connParamField2Entry(connParams);
	
	var epParams = [];
	for (var i in useParams) {
		var param = useParams[i];
		var paramName = param.name;
		if (param["in"] == "query" || true) {
			if (entry[paramName] != null || paramsEntry[paramName] != null) {
				paramValue = paramsEntry[paramName] ? paramsEntry[paramName].getValue() : entry[paramName].getValue(0);
				if (paramValue != null) {
					epParams.push(paramName + "=" + paramValue)
				}
			}
		}	
	}
	
	return epParams.join("&")
}

function fixUrl(url) {
	if (!url.endsWith("/")) {
		return url + "/";
	} else {
		return url;
	}
}

function debug() {
	return __debug;
}

// Rest the connector and re-initialize it in case parameters have changed
function resetConnector() {
	__initialized = false;
	__resultSetIndex = 0;
	
	
	// Now zero out the __resultSet global ArrayList
	__resultSet = new java.util.ArrayList();

	if (typeof list != "undefined") list.clear(); // so it works while spoofing
	if (__http != null) __http.terminate();
	
	// Renew the RESTCLIENT with the currently set parameters
	if (!RESTCLIENT) eval(system.getScriptText("RESTCLIENT class"));
	__http = new RESTCLIENT({
						baseUrl:   __parameters.url,
						authUrl:   __parameters.authUrl,
						apikey:    __parameters.apikey,
						username:  __parameters.username,
						password:  __parameters.password,
						schemaUrl: __parameters.schema,
						debug: 	   debug() // true => debug output		
					})
}

// Change the URL path so the UID placeholder is replace with the Attribute value
function replaceUID(path, entry) {
	
}

// Turn the JS object returned from a call into the global entry object
function toEntry(obj, entry) {
	var connParams = refreshParameters();
	entry = entry || system.newEntry();

	//main.logmsg("toEntry() - includeUIDs: " + connector.getParam("includeUIDs"))
	
	for (var propName in obj) {
		// skip _links
		if (propName.equalsIgnoreCase("_links") && !connParams.includeUIDs) continue;
		for (var subPropName in obj[propName]) {
			if (typeof(subPropName) != "string") {
				//main.logmsg("toEntry() - !!!!!!!! subPropName not string: " + subPropName);
			} else {
				var newVal = beautifyValue(obj[propName][subPropName]);
				/*
				var prepend = (propName.equalsIgnoreCase("_links") ? propName + "_" : "");
				
				// For _links we must prepend the propName to the Attribute name
				subPropName = prepend + subPropName;
				*/
				if (newVal.toLowerCase().startsWith("erglobalid=")) {
					//main.logmsg("FOUND erglobalid value for " + subPropName)
					if (!connParams.includeUIDs) continue;	
				}
				
				//main.logmsg("toEntry() - adding " + subPropName + " - " + obj[propName][subPropName]);
				entry[subPropName] = newVal
			}
		}
	}
	
	//main.logmsg("toEntry - Complete: \n" + entry)
	
	return entry // Not necessary, since entry is global in the Connector context - I just like doing it :)
}

function debugMsg(msg) {
	if (__debug) {
//		task.logmsg(msg);
		main.logmsg(msg);
		java.lang.System.out.println(msg)
	}
}

function alertObject(objName, obj) {
	debugMsg("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	debugMsg(arr.toString())
}

// Return the openAPI schema
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: __parameters.schema,
			authUrl: __parameters.authUrl,
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Parse the openAPI schema
function parseSchema() {
	if (__schema) return __schema;

	// @@TODO Make actual call
	debugMsg("Fetching schema...")
	//var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	//var schemaJSON = fetchSchema();

	//debugMsg("Creating SCHEMA object");
	__schema = fetchSchema();

	//var toplvl = "";
	//for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
	//debugMsg("SCHEMA -> " + toplvl)

	//debugMsg("Got it!");
	return __schema
}

function refreshParameters() {
	var path = connector.getParam("path");
	//if (!path) throw new java.lang.RuntimeException("Path parameter has not been set")
	var action = connector.getParam("action");
	// if (!action) throw new java.lang.RuntimeException("Action parameter has not been set")

	__parameters = {};
	
	for (var paramName in __paramNames) {
		//java.lang.System.out.println("> " + paramName);
		__parameters[paramName] = connector.getParam(paramName);
	}
	
	return __parameters
}

function beautifyValue(val) {
	//main.logmsg("beautifyValue() - " + val);
	if (typeof(val) != "object") return val;
	
	try {
		var newVal = toJson(val);
		
		//main.logmsg("!!! It IS JSON !!!");
		if (val.description) newVal = val.description;
		//main.logmsg("--- Returning: '" + newVal + "'");
		return newVal;
	} catch (ex) {
		return val
	}
}

// Figure out which endpoint param is for the base path and grab the value from the entry
// If the entry passed is null, then don't go looking for the Attribute
function extractUID(entry, epParams, connParams) {
	var uid = null;
	var uidAttName = null;

	for (var i in epParams) {
		var param = epParams[i];
		if (param["in"] == "path") {
			uidAttName = param.name;
			break
		}
	}
	
	if (!entry) {
		uid = "*not gonna be used for anything*"
	} else
	if (uidAttName) {
		var uidAtt = entry[uidAttName];
		if (uidAtt) uid = uidAtt.getValue(0)
	}
	
	if (!uid) throw new java.lang.Exception("The UID attribute must be mapped out: " + uidAttName)
	
	return {
		value: uid,
		name: uidAttName
	}
}

// Local function (for some reason)
function getParameters(path, action) {
	return __schema.getParameters(path, action)
}

// Here too
function replaceEmbeddedUID(path, entryUID) {
	return __schema.replaceEmbeddedUID(path, entryUID)
}



//
// -------  Standard Connector functions 
//




function initialize() {
	refreshParameters();
	resetConnector();
	parseSchema()
}

function terminate() {
}

// CallReply function
function queryReply() {
	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// Embed mapped parameters into the path
	java.lang.System.out.println("queryReply() - entry: " + entry);
	// main.logmsg("queryReply() - entry: " + entry);
	
	var usePath = replaceEmbeddedUID(connParams.path, entry);

	// Now for queryParameters
	var queryString = craftQueryString({
		path: usePath,
		connParams: connParams,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	try {
		// Make the REST call @@TODO Only does GET for now
		var reply = __http.makeRequest({
				verb: "GET", // @@TODO Must figure out how to set the HTTP verb based on the schema
				url: usePath + queryString,
				ctype: "application/json",
				where: "queryReply()"
		});
	
		java.lang.System.out.println("Reply: " + entry.fromJSON(toJson(reply)));
	
		toEntry(reply, entry);
		return entry
	} catch (ex) {
		task.logmsg("ERROR", ex);
		return null
	}	
}

// Since this function is being double-purposed, to also retrieve parameters for the Schema pane
// I have to add more logic that is not necessary for normal connector operations.
function selectEntries(queryMode) {
	queryMode = queryMode || "Data"; // defaults to data
	// Clear out the selected array of entries and set the index to 0
	__resultSetIndex = 0;
	if (typeof(form) == "undefined") __resultSet.clear();
	
	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// So this code works in my testScriptConnectorCode AL
	if (typeof(entry) == "undefined") var entry = system.newEntry();
	
	// Return either the parameters from the path + action from the openAPI schema, which means 
	// you can use Connect + Next to list all available parameters w/ descriptions...
	if (connParams.queryMode == "Parameters" || typeof(task) == "undefined") {
		var restParams = getParameters(connParams.path, connParams.action);
		
		for (var i in restParams) {
			var paramName = restParams[i].name;
			//main.logmsg("getNextEntry() - " + paramName + " - " + beautifyValue(restParams[i]))
			entry[paramName] = beautifyValue(restParams[i]);
		}
		
		__resultSet.add(entry)
	} else {
		// ...else work like getNextEntry() usually does and return data
		
		// This the search filter parameter in the Connections tab
		var personId = connParams.searchCrit;
		if (!personId) throw java.lang.Exception("Search criteria (personId) must be configured")
		
		// Get the path and replace id's as required
		var usePath = replaceEmbeddedUID(connParams.path, personId);
	
		// Now for queryParameters
		var queryString = craftQueryString({
			connParams: connParams,
			path: usePath,
			epParams: epParams,
			action: connParams.action,
			entry: entry
		});
		
		// If there is a queryString, prepend it with ?
		queryString = queryString ? "?" + queryString : "";
		
		//main.logmsg("selectEntries for Data - making call");
		
		try {
			// Make the REST call @@TODO Only does GET for now
			var reply = __http.makeRequest({
					verb: "GET", // @@TODO Must figure out how to set the HTTP verb based on the schema
					url: usePath + queryString,
					ctype: "application/json",
					where: "queryReply()"
			});
		
			//main.logmsg("selectEntries for Data - Reply: " + com.ibm.di.entry.Entry.fromJSON(toJson(reply)));
	
			// Update the global 'entry' variable with these values
			var entry = toEntry(reply);
			
			//main.logmsg("selectEntries for Data - toEntry(): " + entry);
	
			var resultEntry = system.newEntry();
			resultEntry.merge(entry);
			__resultSet.add(resultEntry)
		} catch (ex) {
			task.logmsg("ERROR", ex)
		}	
	}
	return __resultSet	
}

function getNextEntry() {
	//main.logmsg("@@getNextEntry - remaining in buffer: " + __resultSet.size());
	if (__resultSetIndex >= __resultSet.size()) {
		result.setStatus(0);
		return null;
	}

	if (typeof(entry) == "undefined") entry = system.newEntry(); // only for testing
	
	//main.logmsg("getNextEntry() - getting index " + __resultSetIndex);
	entry.merge(__resultSet.get(__resultSetIndex));
	__resultSetIndex++;

	result.setStatus(1);
	//main.logmsg("@@getNextEntry: " + entry);
	return entry
}

function putEntry(entryArg) {
	// entryArg is optional and is for easier testing
	entry = entry || entryArg;
	
	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// Now for queryParameters
	var queryString = craftQueryString({
		connParams: connParams,
		path: usePath,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// Check parameters for the one in the path(base) - the UID
	var uidObj = extractUID(entry, epParams, connParams);
	
	var entryUID = uidObj.value;
	var entryUIDattName = uidObj.name;
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Get the path and replace id's as required
	var usePath = replaceEmbeddedUID(connParams.path, entryUID);

	//main.logmsg("putEntry - making call");

	try {	
		// Make the REST call 
		var reply = __http.makeRequest({
				verb: "POST",
				url: usePath + queryString,
				ctype: "application/json",
				where: "putEntry()",
				body: entry.toJSON()
		});
	
		//main.logmsg("selectEntries for Data - Reply: " + com.ibm.di.entry.Entry.fromJSON(toJson(reply)));
	
		//var resultEntry = toEntry(reply);
		//task.logmsg("putEntry() - " + entry.fromJSON(toJson(reply)));
		
		return entry
	} catch (ex) {
		task.logmsg("ERROR", ex);
		return null
	}	
}

function modEntry() {
	throw new java.lang.Exception("The modify operation is not supported in the current API version")
}

function deleteEntry(entryArg) {
	// entryArg is optional and is for easier testing
	entry = entry || entryArg;
	
	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// Now for queryParameters
	var queryString = craftQueryString({
		connParams: connParams,
		path: usePath,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// Check parameters for the one in the path(base) - the UID
	var uidObj = extractUID(null, epParams, connParams);
	
	var entryUID = uidObj.value;
	var entryUIDattName = uidObj.name;
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Get the path and replace id's as required
	var usePath = replaceEmbeddedUID(connParams.path, entryUID);

	try {	
		// Make the REST call 
		var reply = __http.makeRequest({
				verb: "DELETE",
				url: usePath + queryString,
				ctype: "application/json",
				where: "putEntry()",
				body: entry.toJSON()
		});
	
		return entry
	} catch (ex) {
		task.logmsg("ERROR", ex);
		return null
	}	
}

// Finding an entry only works as direct read using the UID
function findEntry(searchCriteria) {
	// Allows you to pass in the search criteria for easier testing	
	searchCriteria = searchCriteria || search;

	var critValue,
		critName;
	var critMatch = com.ibm.di.server.SearchCriteria.EXACT;
	var crit = searchCriteria.getScriptFilter();

	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// Check parameters for the one in the path(base) - the UID
	uidObj = extractUID(null, epParams, connParams); // Passing null for the first argument stifles any "UID must be mapped" problems
	
	// If there is a scripted filter then use this
	if (crit) {
		var parts = system.splitString(crit, "="); // @@TODO No need to handle other operators - for now :)
		if (parts.length >= 2) {
			critName = parts[0].trim();
			critValue = parts[1].trim();
			critValue = system.remove("\"\'", (critValue || "")) // Remove quotes from the value
		} else {
			critName = uidObj.name;
			critValue = crit
		}

		// Set up the criteria
		crit = {
			name: critName,
			match: critMatch,
			value: critValue
		}
	} 
	else { // If no scripted filter, then grab the first Link Criteria //@@TODO Again, only handling one Link Crit for now
		try {
			crit = searchCriteria.getCriteria(0);
		} catch (ex) {
			throw new java.lang.Exception("You must configure at least one Link Criteria, or provide a script filter")
		}
	}

	// Now check that the attribute name in the filter is the UID parameter name from the OpenAPI schema
	if (!crit.name.equalsIgnoreCase(uidObj.name)) {
		throw new java.lang.Exception("Search criteria must be for the UID attribute: " + uidObj.name)
	}
	
	// Now for queryParameters
	var queryString = craftQueryString({
		connParams: connParams,
		path: usePath,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Get the path and replace id's as required
	var entryUID = crit.value;
	var usePath = replaceEmbeddedUID(connParams.path, entryUID);

	//main.logmsg("putEntry - making call");

	try {	
		// Make the REST call 
		var reply = __http.makeRequest({
				verb: "GET",
				url: usePath + queryString,
				ctype: "application/json",
				where: "findEntry()"
		});
	
		//main.logmsg("selectEntries for Data - Reply: " + com.ibm.di.entry.Entry.fromJSON(toJson(reply)));
	
		resultEntry = toEntry(reply);
		entry.merge(resultEntry);
		
		result.setStatus(1);
		return entry
	} catch (ex) {
		task.logmsg("ERROR", ex);
		result.setStatus(0);
		return null
	}	
}

function querySchema(queryMode) {
	queryMode = queryMode || "Data"; // Defaults to "Data"
	
	//main.logmsg("@@querySchema...");
	var connParams = refreshParameters();
	var path = connParams.path;
	var action = connParams.action;
	
	list.clear(); // For use in the _testScriptConnectorCode
	
	if (connParams.queryMode == "Parameters" /* || typeof(task) == "undefined" */ ) {
/* don't think this is needed
		var embeddedParameter = getEmbeddedUID(path);
		if (embeddedParameter) {
			var e = system.newEntry();
			e.name = embeddedParameter;
			e.syntax = "MUST/uid";
			e.required = true;
			e.mandatory = true;
			list.add(e)
		}
*/
		var parameters = getParameters(path, action);
	
		for (var i in parameters) {
			var param = parameters[i];
	   
			if (param.name.equalsIgnoreCase("CSRFToken")) continue;
			
			var e = system.newEntry();
			e.name = param.name;
			e.syntax = "MUST/" + param.schema.type;
			e.required = true;
			e.mandatory = true;
			//main.logmsg("@@adding " + param.name);
			list.add(e)
		}
	} else { // queryMode is "Data"
		selectEntries();
		var dataEntry = getNextEntry();
		// Remember to reset the index to the result set for any getNextEntry() called after
		__resultSetIndex = Math.min(0, __resultSetIndex - 1);
		
		
		for (var att in dataEntry) {
			if (att instanceof com.ibm.di.entry.Entry) { // This is one of the links
				var name = "link_";
				throw "OOOOOOPS!! Connector Script line 373"
			} else {
				var name = att.getName();
				var val = att.getValue(0);
				
				//main.logmsg("querySchema() adding " + name + " - " + val);
				
				e = system.newEntry();
				e.name = name;
				e.syntax = typeof(val);
				list.add(e)
			}	
		}
	}

	result.setStatus(1);
	return list
}]]></parameter>
                <parameter name="searchCrit">NO12345</parameter>
                <parameter name="url">http://localhost:8080</parameter>
                <parameter name="username">edbird</parameter>
            </Configuration>
            <Parser>
                <InheritFrom>[parent]</InheritFrom>
            </Parser>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <AttributeMap name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <DeltaSettings>
                <UniqueAttribute/>
                <WhenToCommit>After every database operation</WhenToCommit>
                <RowLocking>SERIALIZABLE</RowLocking>
                <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
            </DeltaSettings>
            <Schema name="Input">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1739555301141</ModTime>
            </Schema>
            <Schema name="Output">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1739287790828</ModTime>
                <SchemaItem>
                    <Name>CSRFToken</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>_links_erparent</Name>
                    <Syntax>com.ibm.jscript.std.ObjectObject</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>_links_formTemplate</Name>
                    <Syntax>com.ibm.jscript.std.ObjectObject</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>_links_manager</Name>
                    <Syntax>com.ibm.jscript.std.ObjectObject</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>_links_self</Name>
                    <Syntax>com.ibm.jscript.std.ObjectObject</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>attributes</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>cn</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>counter</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>embedded</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>ercustomdisplay</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>erparent</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>erpersonstatus</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>ersupervisor</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>forms</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>givenname</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>mail</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>manager</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>name</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>personId</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>personType</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>self</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>sn</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>uid</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
            </Schema>
            <LinkCriteria>
                <InheritFrom>[parent]</InheritFrom>
            </LinkCriteria>
            <Hooks>
                <InheritFrom>[parent]</InheritFrom>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <Reconnect>
                <InheritFrom>[parent]</InheritFrom>
                <ReconnectRules/>
            </Reconnect>
            <Operations/>
            <PoolDefinition>
                <InheritFrom>[parent]</InheritFrom>
                <Enabled>false</Enabled>
                <MinPoolSize>0</MinPoolSize>
                <MaxPoolSize>0</MaxPoolSize>
                <PurgeInterval>0</PurgeInterval>
                <InitializeAttempts>1</InitializeAttempts>
                <InitializeSleepInterval>0</InitializeSleepInterval>
            </PoolDefinition>
            <PoolInstance/>
        </Connector>
        <Connector name="ITIMRestClientConnector_TEST">
            <InheritFrom>/Connectors/ITIMRestClientConnector</InheritFrom>
            <ModTime>1739976996145</ModTime>
            <ConnectorMode>Lookup</ConnectorMode>
            <ConnectorState>Enabled</ConnectorState>
            <Configuration>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1739976996145</ModTime>
                <parameter name="action">get</parameter>
                <parameter encrypted="true" name="apikey">g2/MGYdF2P2WhgI0/mfA/EHXRvMxiJzrFqXd/OkOVLpGTJok1vt3kWWQihRKbH1IcSk7IjyeSFGzKLLJpJcg8G4vch7jRswDkStL7nwBPPqSiHSzeXqbMrth2Zyog3liPjjl1nbpk9xbE6JKm+cTHRmfOhVJ1cJh9IKdpxUGo5Q=</parameter>
                <parameter name="authUrl">/v1.0/endpoint/default/token</parameter>
                <parameter name="parameters"/>
                <parameter encrypted="true" name="password">BTepGrA3pZjYRvLUDhnV5M6Bg1rRy8/JfAsu74aMUPOrjLHYTkm5cj/lqBwvv51iOCyz+rXJipJVhYI26pYz1g90diZt+6tPqRDPN5UG523gJJ/eoz1w5TTo//81Gh2dUhXCXC1b2tPHTs9Rf44NutQv2J+jVj5m9aNphC4eL1A=</parameter>
                <parameter name="path">/people/{personId}</parameter>
                <parameter name="schema">/schema</parameter>
                <parameter name="searchCrit">NO12345</parameter>
                <parameter name="url">http://localhost:8080</parameter>
                <parameter name="username">edbird</parameter>
            </Configuration>
            <Parser>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1739974184611</ModTime>
            </Parser>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1739974184611</ModTime>
            </AttributeMap>
            <AttributeMap name="Output">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1739974184611</ModTime>
            </AttributeMap>
            <DeltaSettings/>
            <Schema name="Input">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1739974184611</ModTime>
            </Schema>
            <Schema name="Output">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1739974184611</ModTime>
            </Schema>
            <LinkCriteria>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1739974184611</ModTime>
            </LinkCriteria>
            <Hooks>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1739974184611</ModTime>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <Reconnect>
                <InheritFrom>[parent]</InheritFrom>
                <ReconnectRules/>
            </Reconnect>
            <Operations/>
            <PoolDefinition>
                <InheritFrom>[parent]</InheritFrom>
            </PoolDefinition>
            <PoolInstance/>
        </Connector>
        
        
    <Connector name="ITIMRestClientConnector 20250220 1315 Before trying to add description to Parameters">
            <InheritFrom>system:/Connectors/ibmdi.ScriptConnector</InheritFrom>
            <ModTime>1739985853206</ModTime>
            <ConnectorMode>Lookup</ConnectorMode>
            <ConnectorState>Enabled</ConnectorState>
            <Configuration>
                <UserComment><![CDATA[attributes=name,rank,serialnumber
security=max]]></UserComment>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1739985853206</ModTime>
                <parameter name="$form$"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="798" UUID="addb9b0b-e0b0-408d-bc18-1e00ff1dbaa6" created="Sun Dec 01 21:11:43 CET 2024" createdBy="eddiehartman" main="Form" modified="Wed Feb 19 18:03:41 CET 2025" modifiedBy="eddiehartman" version="7.1.1">
    <Form name="Form">
        <ModTime>1739984619621</ModTime>
        <FormItemNames>
            <ListItem>$GLOBAL.script</ListItem>
            <ListItem>keepGlobalState</ListItem>
            <ListItem>$GLOBAL.includeFiles</ListItem>
            <ListItem>includePrologs</ListItem>
            <ListItem>$GLOBAL.debug</ListItem>
            <ListItem>$GLOBAL.help</ListItem>
            <ListItem>PathToObjects</ListItem>
            <ListItem>Clear</ListItem>
            <ListItem>apikey</ListItem>
            <ListItem>action</ListItem>
            <ListItem>username</ListItem>
            <ListItem>password</ListItem>
            <ListItem>authUrl</ListItem>
            <ListItem>path</ListItem>
            <ListItem>schema</ListItem>
            <ListItem>url</ListItem>
            <ListItem>debug</ListItem>
            <ListItem>searchCrit</ListItem>
            <ListItem>includeUIDs</ListItem>
            <ListItem>parameters</ListItem>
        </FormItemNames>
        <FormSectionNames>
            <ListItem>General</ListItem>
            <ListItem>Advanced</ListItem>
        </FormSectionNames>
        <FormItem name="APIKey"/>
        <FormItem name="Action">
            <ModTime>1735050078962</ModTime>
            <parameter name="description">Operation to apply to the selected Item</parameter>
            <parameter name="label">Action</parameter>
            <parameter name="script">fetchActions</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="Clear">
            <ModTime>1737024086705</ModTime>
            <parameter name="label"/>
            <parameter name="noLabel">true</parameter>
            <parameter name="script">clearDropdowns</parameter>
            <parameter name="scriptLabel">Clear Path and Action</parameter>
            <parameter name="syntax">static</parameter>
        </FormItem>
        <FormItem name="Item">
            <ModTime>1734098635211</ModTime>
            <parameter name="description">The resource item to operation on</parameter>
            <parameter name="label">Item</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="script2"/>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="scriptLabel2"/>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="Object">
            <ModTime>1733572441046</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Item to perform operations on</parameter>
            <parameter name="label">	formdata.items = formdata.items || {};</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="scriptLabel"/>
            <parameter name="syntax">droplist</parameter>
        </FormItem>
        <FormItem name="Operation">
            <ModTime>1733750352248</ModTime>
            <parameter name="description">Operation to apply to the selected Object</parameter>
            <parameter name="label">Action</parameter>
            <parameter name="script">fetchOperations</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="PathToObjects">
            <ModTime>1733398344461</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The openAPIschema is hierarchical, so at what level in the tree do resource items appear. Separate tree branches by pipe symbol (|)</parameter>
            <parameter name="label">Path to Items</parameter>
            <parameter name="script"/>
            <parameter name="scriptLabel"/>
        </FormItem>
        <FormItem name="Show">
            <ModTime>1733312883681</ModTime>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="action">
            <ModTime>1736017096799</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Operation to apply to the selected path (resource item)</parameter>
            <parameter name="label">Action</parameter>
            <parameter name="script">fetchActions</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="apikey">
            <ModTime>1737489711326</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">API Key provided for access to the service</parameter>
            <parameter name="label">API Key</parameter>
            <parameter name="syntax">password</parameter>
        </FormItem>
        <FormItem name="authUrl">
            <ModTime>1738951255789</ModTime>
            <parameter name="description">Path to the authentication service, often with 'token' in its name</parameter>
            <parameter name="label">Auth URL</parameter>
        </FormItem>
        <FormItem name="baseUrl">
            <ModTime>1737024040596</ModTime>
            <parameter name="description">The first part of the URL, http://&lt;domain&gt;:&lt;port&gt;, with colon and port number required only if not port 80</parameter>
            <parameter name="label">var __emptyEntry = system.newEntry();</parameter>
        </FormItem>
        <FormItem name="dashes">
            <ModTime>1734099205004</ModTime>
            <parameter name="label">_________________________________________________________________________________</parameter>
            <parameter name="script"/>
            <parameter name="scriptLabel"/>
            <parameter name="syntax">static</parameter>
        </FormItem>
        <FormItem name="debug">
            <ModTime>1737459130079</ModTime>
            <parameter name="description">Yes or no</parameter>
            <parameter name="label">Debug output</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="dropdown"/>
        <FormItem name="includePrologs">
            <parameter name="description">pro_desc</parameter>
            <parameter name="label">pro_label</parameter>
            <parameter name="script">selectGlobalProlog</parameter>
            <parameter name="scriptLabel">pro_script_label</parameter>
            <parameter name="scripthelp">pro_script_help</parameter>
            <parameter name="syntax">textarea</parameter>
        </FormItem>
        <FormItem name="includeUIDs">
            <ModTime>1738499699708</ModTime>
            <parameter name="description">Should UIDs for the entry and associated data be included in the returned data</parameter>
            <parameter name="label">Include UIDs</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="item">
            <ModTime>1735050022484</ModTime>
            <parameter name="description">The resource to act on</parameter>
            <parameter name="label">Item</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="keepGlobalState">
            <parameter name="description">SCRIPT_CONN_KEEP_GLOBAL_STATE_DESC</parameter>
            <parameter name="label">SCRIPT_CONN_KEEP_GLOBAL_STATE_LABEL</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="parameters">
            <ModTime>1739974569312</ModTime>
            <parameter name="description">Free-text list of &lt;parameter&gt;=&lt;value&gt;, one line for each parameter</parameter>
            <parameter name="label">Parameters</parameter>
            <parameter name="script">fetchParameters</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">textarea</parameter>
        </FormItem>
        <FormItem name="password">
            <ModTime>1736017137163</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Authorization password</parameter>
            <parameter name="label">Password</parameter>
            <parameter name="syntax">password</parameter>
        </FormItem>
        <FormItem name="path">
            <ModTime>1737024268372</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The URL path representing the resource item to work with</parameter>
            <parameter name="label">Path</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="queryMode">
            <ModTime>1739287744378</ModTime>
            <Values>
                <ListItem>Parameters</ListItem>
                <ListItem>Data</ListItem>
            </Values>
            <parameter name="description">Pressing Next in the Attribute Schema pane will either return available parameters for the selected Path, or the schema of the data</parameter>
            <parameter name="label">Query Schema mode</parameter>
            <parameter name="syntax">droplist</parameter>
        </FormItem>
        <FormItem name="schema">
            <ModTime>1737024188497</ModTime>
            <parameter name="description">The REST endpoint that returns the schema for this API</parameter>
            <parameter name="label">Schema</parameter>
            <parameter name="script">fetchSchema</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
        </FormItem>
        <FormItem name="searchCrit">
            <ModTime>1737544048218</ModTime>
            <parameter name="description">The Id of the Resource Item you want to retrieve</parameter>
            <parameter name="label">Search for ID</parameter>
        </FormItem>
        <FormItem name="url">
            <ModTime>1737024046822</ModTime>
            <parameter name="description">The first part of the URL, http://&lt;domain&gt;:&lt;port&gt;, with colon and port number required only if not port 80</parameter>
            <parameter name="label">Base URL</parameter>
        </FormItem>
        <FormItem name="username">
            <ModTime>1736017120599</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Authorization username</parameter>
            <parameter name="label">Username</parameter>
        </FormItem>
        <FormSection name="Advanced">
            <FormSectionNames>
                <ListItem>authUrl</ListItem>
                <ListItem>schema</ListItem>
                <ListItem>parameters</ListItem>
                <ListItem>$GLOBAL.userComment</ListItem>
                <ListItem>$GLOBAL.script</ListItem>
                <ListItem>Clear</ListItem>
            </FormSectionNames>
            <parameter name="initiallyExpanded">false</parameter>
            <parameter name="title">Advanced</parameter>
        </FormSection>
        <FormSection name="Debug">
            <FormSectionNames>
                <ListItem>Clear</ListItem>
            </FormSectionNames>
        </FormSection>
        <FormSection name="General">
            <FormSectionNames>
                <ListItem>apikey</ListItem>
                <ListItem>username</ListItem>
                <ListItem>password</ListItem>
                <ListItem>url</ListItem>
                <ListItem>path</ListItem>
                <ListItem>action</ListItem>
                <ListItem>searchCrit</ListItem>
            </FormSectionNames>
        </FormSection>
        <parameter name="formevents"><![CDATA[// 20250104 1959 Initial
// 20250121 1154 Created RESTCLIENT class and used that instead of lots of functions
// 20250121 2047 Copied back test Event Script after _testScriptConnectorCode succeeded in testing Form code
// 20250121 2103 Form Working! Now to look at Mode ops (putEntry, findEntry, ...)
// 20250128 1608 Hardened the fetchActions and fetchItems so it checks for schema first
// 20250219 1802 Finished Fetch for parameters in Connections tab
//
//						GLOBAL VARIABLES
//
var __schema = null;
var __initialized = false;
//var __lib = null;

//
//							FUNCTIONS
//

function debug() {
	return false;
	return form.getControl("debug").getText()
}

function alert(msg) {
	main.logmsg(msg);
	java.lang.System.out.println(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (__initialized) return;
	__initialized = true;
	
	//alert("Initializing...");
	//eval(system.getScriptText("RESTIFY library class")); // Load script library class
	//__lib = new RESTIFY();

	eval(system.getScriptText("RESTCLIENT class")); // Load HTTP Client class
	
	// Recreate in case parameters are changed
	__http = new RESTCLIENT({
						baseUrl:  form.getControl("url").getText(),
						authUrl:  form.getControl("authUrl").getText(),
						apikey:   form.getControl("apikey").getText(),
						username: form.getControl("username").getText(),
						password: form.getControl("password").getText(),
						schemaUrl: form.getControl("schema").getText(),
						debug: debug() // true => debug output
				})		
}

// Return the openAPI schema - @TEST hardcoded for now
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	initialize();

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: "/schema",
			authUrl: form.getControl("authUrl").getText(),
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Update the dropdown with paths
function fetchItems() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")
	//alert("---> fetchItems");

	initialize();

	path = "paths";

    updateDropdown("path",
        [path],
        "Cannot fetch actions for Path");
        
	fetchActions()
}

// Update the dropdown with opera tions for the selected path
function fetchActions() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")
	
	initialize();
	
    var selectedItem = form.getControl("path").getText() || "";
	// alert("fetchActions() for " + selectedItem);

    updateDropdown("action",
        ["paths", selectedItem],
        "Cannot fetch actions for Path: " + selectedItem)
}

// Fetch the parameters (with descriptions) and populate the text box - appending to what is already there
function fetchParameters() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")

	var params = __schema.getParameters(form.getControl("path").getText(),
										form.getControl("action").getText());

	updateTextBox("parameters", params)
}

// Updating a textbox control
function updateTextBox(controlName, paramsArray) {
	// First get the existing value and parse it (if possible)
	var oldValue = form.getControl(controlName).getText().trim();
	var useParams = {};
	
	//alert("     paramsArray: " + paramsArray.length);
	
	// Go through the passed parameters and set those that are not already set
	for (var i = 0; i < paramsArray.length; i++) {
		var param = paramsArray[i];
		//alert("Found " + i + " " + param.name + ": " + param.description);
		if (param["in"] != "path") {
			// Add to the list if not something for the path itself
			useParams[param.name] = "";	
		}
	}
	
	// Parse the old text value into individual parameter settings and put in an Entry
	if (oldValue) {
		var lines = system.splitString(oldValue, "\n");
		for (var line in lines) {
			var parts = system.splitString(line, "=");
			if (parts.length > 1) {
				// Overwrite any discovered parameters with previously set values
				useParams[parts[0].trim()] = parts[1].trim();
			}
		}
	}
	
	alert("---- Final list of params: " + toJson(useParams))

	// Get the useParams property names (param names) and sort them
	var paramList = new java.util.ArrayList();
	for (var propName in useParams) {
		alert("    Adding " + propName)
		paramList.add(propName);
	}
	
	paramNames = paramList.toArray();
	java.util.Arrays.sort(paramNames);
	alert("    ParamNames: " + paramNames.length + " item(s)")

	var newParamText = "";
	for (var i = 0; i < paramNames.length; i++) {
		var paramName = paramNames[i];
		alert("    Getting " + paramName)
		newParamText += paramName + "=" + useParams[paramName] + "\n"
	}
	
	//alert(">>>> Setting Parameters value:\n" + newParamText);
	
	// Finally, update the control
	form.getControl(controlName).setText(newParamText)
}

// Update dropdown based api
function updateDropdown(controlName, path, errorMsg) {
    try {
    	alert("updateDropdown("
    			+ controlName
    			+ ", " + path + ", errmsg)");

	    initialize();
		
        if (!path) {
        	alert("updateDropdown() - Path parameter must be set");
        	return	
        };

        var subtree = __schema.getChildren(path);
        
        if (subtree == null) {
        	path.shift();
        	alert("Invalid item path: " + path.toString());
        	return
        }
        
		combo = form.getControl(controlName);
		combo.removeAll(); // Empty drop-down

		var arrList = java.util.ArrayList();
        for (var propName in subtree) {
        	arrList.add(propName);
        }
        var arr = arrList.toArray();
        java.util.Arrays.sort(arr);
    			
        for (var propName in arr) {
            //alert("   ..adding " + res);
            combo.add(propName)
        }

        alert("drop-down updated!");

        combo.select(0)

    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        alert(msg);
        throw msg
    }
}

// Empty out both Item and Object dropdowns
function clearDropdowns() {
	form.getControl("path").removeAll();
	form.getControl("action").removeAll()	
}

// For debugging from inside 
function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("_Restify/Log_" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]]]><![CDATA[></parameter>
        <parameter name="formscript"/>
        <parameter name="title">CONN_TITLE</parameter>
        <TranslationFile>NLS/idi_conn_scriptconn</TranslationFile>
    </Form>
</MetamergeConfig>]]></parameter>
                <parameter name="Action"/>
                <parameter name="Item"/>
                <parameter name="Object"/>
                <parameter name="Operation">servers</parameter>
                <parameter name="PathToObjects">paths</parameter>
                <parameter name="action">get</parameter>
                <parameter encrypted="true" name="apikey">HP9u/+ykmY6dnadoF4xvGfdwY4ixkCCyu4p9u8mACJr2IFaYs5iwkey4hvVCjWH/5btO6F4ulrFlDx3Hz8Op7xrfPFwosSzQdC6bpyhxDs08lm7jEpKG4guhOtyocWue7dUq2Ppm8SWi5FBZym5wLP53MqrZggLlJVYCEH4G5NY=</parameter>
                <parameter name="authUrl">/v1.0/endpoint/default/token</parameter>
                <parameter name="debug">false</parameter>
                <parameter name="includeFiles"/>
                <parameter name="includePrologs"><![CDATA[SCHEMA class
RESTCLIENT class]]></parameter>
                <parameter name="includeUIDs">true</parameter>
                <parameter name="item">/people</parameter>
                <parameter name="parameters"><![CDATA[attributes=name,rank,serialnumber
embedded=
forms=
security=max
]]></parameter>
                <parameter encrypted="true" name="password">fpyf0RvHsvAunG48QEyng1mmJN3Tm2Ra6jnGnU+B4nF90eNXVXIyzM3xZ3QsXPdr6HE2cy7UovvpOY9GyhHUzKbe0wrQE3UTV3xJgzAz2dmHr9ho+JojAMBzgjeNT2KiSovCnfNwNodiHVFLEewCIOYxUZRbLL4qgMzz9yeezlk=</parameter>
                <parameter name="path">/people/{personId}</parameter>
                <parameter name="queryMode">Data</parameter>
                <parameter name="schema">/schema</parameter>
                <parameter name="script"><![CDATA[// 20250104 2008 Initial
// 20250111 1915 Handling queryParameters in url
// 20250126 1901 Adding queryMode for querySchema to return either params, or schema of data
// 20250127 1346 initialize(), terminate(), selectEntries() and a test queryReply() in place
// 20250127	1854 maded querySchema drop the token in the parameters returned
// 20250128 1503 selectEntries and getNextEntry implemented - ready for more testing I'm sure :)
// 20250128 1705 Added the check for spoofing
// 20250128 2136 querySchema() can now return either parameters or data when you press Connect and Next in the Schema pane
// 20250130 1207 Hopefully now
// 20250130 1221 Fixing it in place in the Connector
// 20250131 1928 Gonna get querySchema to work right
// 20250131 2009 Now looking at getNextEntry() so I can return parameter descriptions with Connect + Next if querySchemaMode == Parameters
// 20250131 2033 Something still not right - alas, tomorrow
// 20250202 1313 Looking for my "entry not found" error when Connect while queryMode == Data
// 20250202 1407 Connect working for both settings!!!! 
// 20250202 1453 getNextEntry for Connect + Next now it's working!
// 20250207 1819 looking at selectEntries and getNextEntry, as well as findEntry, putEntry and modEntry. Tonight!!!
//          1917 Nope - manana
// 20250211 2024 Fixed mock server for people put, delete and servers - I hope
// 20250212 1142 Adding putEntry, deleteEntry and findEntry
// 20250214 1758 Finishing putEntry, deleteEntry and findEntry
// 20250214 1924 all Connector functions in place
// 20250219 1419 Removing Query Schema Mode 
// 20250219 2023 All connector modes supported except modify
//
// --- TODO Freetext parameter where all the standard set of parameter values can be set
//                                        
//
//						GLOBAL VARIABLES
//
var __parameters = {};						// params for the chosen path and action
var __debug = connector.getParam("debug");	// debug output?
var __schema = null;						// shared openAPI schema object (SCHEMA class)
var __initialized = false;					// Do I need this?
var __emptyEntry = system.newEntry();		// for craftQueryString
var __http = null; 							// for the RESTCLIENT we will use for the calls
var __resultSet = null;						// A container for returned entries (selectEntries/findEntry)
var __resultSetIndex = 0;					// Index into the result set
var __formEventCalling = false;

var __paramNames = {
	action: true,
	apikey: true,
	schema: true,
	authUrl: true,
	debug: true,
	path: true,
	password: true,
	url: true,
	username: true,
	item: true,
	action: true,
	searchCrit: true,
	includeUIDs: true,
	parameters: true
}

//
//							FUNCTIONS
//



function connParamField2Entry(connParams) {
	var paramsEntry = system.newEntry();
	var paramSetting = connParams.parameters;
	var lines = paramSetting.split(/\r?\n|\r/);
	for (var lineIndex = 0; lineIndex < lines.length; lineIndex++){
		var thisLine = lines[lineIndex];
		var parts = thisLine.split("=");
		var paramName = parts[0].trim();
		var paramValue = (parts.length > 1) ? parts[1].trim() : "";
		
		if (paramValue) {
			paramsEntry[paramName] = paramValue
		}
	}
	
	return paramsEntry
}

function craftQueryString(args) {
	var path = args.path;
	var action = args.action;
	var connParams = args.connParams;
	var useParams = args.epParams || {};
	var entry = args.entry || __emptyEntry;
	
	var embeddedUID = __schema.getEmbeddedUID(path);

	var paramsEntry = connParamField2Entry(connParams);
	
	var epParams = [];
	for (var i in useParams) {
		var param = useParams[i];
		var paramName = param.name;
		if (param["in"] == "query" || true) {
			if (entry[paramName] != null || paramsEntry[paramName] != null) {
				paramValue = paramsEntry[paramName] ? paramsEntry[paramName].getValue() : entry[paramName].getValue(0);
				if (paramValue != null) {
					epParams.push(paramName + "=" + paramValue)
				}
			}
		}	
	}
	
	return epParams.join("&")
}

function fixUrl(url) {
	if (!url.endsWith("/")) {
		return url + "/";
	} else {
		return url;
	}
}

function debug() {
	return __debug;
}

// Rest the connector and re-initialize it in case parameters have changed
function resetConnector() {
	__initialized = false;
	__resultSetIndex = 0;
	
	
	// Now zero out the __resultSet global ArrayList
	__resultSet = new java.util.ArrayList();

	if (typeof list != "undefined") list.clear(); // so it works while spoofing
	if (__http != null) __http.terminate();
	
	// Renew the RESTCLIENT with the currently set parameters
	if (!RESTCLIENT) eval(system.getScriptText("RESTCLIENT class"));
	__http = new RESTCLIENT({
						baseUrl:   __parameters.url,
						authUrl:   __parameters.authUrl,
						apikey:    __parameters.apikey,
						username:  __parameters.username,
						password:  __parameters.password,
						schemaUrl: __parameters.schema,
						debug: 	   debug() // true => debug output		
					})
}

// Change the URL path so the UID placeholder is replace with the Attribute value
function replaceUID(path, entry) {
	
}

// Turn the JS object returned from a call into the global entry object
function toEntry(obj, entry) {
	var connParams = refreshParameters();
	entry = entry || system.newEntry();

	//main.logmsg("toEntry() - includeUIDs: " + connector.getParam("includeUIDs"))
	
	for (var propName in obj) {
		// skip _links
		if (propName.equalsIgnoreCase("_links") && !connParams.includeUIDs) continue;
		for (var subPropName in obj[propName]) {
			if (typeof(subPropName) != "string") {
				//main.logmsg("toEntry() - !!!!!!!! subPropName not string: " + subPropName);
			} else {
				var newVal = beautifyValue(obj[propName][subPropName]);
				/*
				var prepend = (propName.equalsIgnoreCase("_links") ? propName + "_" : "");
				
				// For _links we must prepend the propName to the Attribute name
				subPropName = prepend + subPropName;
				*/
				if (newVal.toLowerCase().startsWith("erglobalid=")) {
					//main.logmsg("FOUND erglobalid value for " + subPropName)
					if (!connParams.includeUIDs) continue;	
				}
				
				//main.logmsg("toEntry() - adding " + subPropName + " - " + obj[propName][subPropName]);
				entry[subPropName] = newVal
			}
		}
	}
	
	//main.logmsg("toEntry - Complete: \n" + entry)
	
	return entry // Not necessary, since entry is global in the Connector context - I just like doing it :)
}

function debugMsg(msg) {
	if (__debug) {
//		task.logmsg(msg);
		main.logmsg(msg);
		java.lang.System.out.println(msg)
	}
}

function alertObject(objName, obj) {
	debugMsg("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	debugMsg(arr.toString())
}

// Return the openAPI schema
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: __parameters.schema,
			authUrl: __parameters.authUrl,
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Parse the openAPI schema
function parseSchema() {
	if (__schema) return __schema;

	// @@TODO Make actual call
	debugMsg("Fetching schema...")
	//var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	//var schemaJSON = fetchSchema();

	//debugMsg("Creating SCHEMA object");
	__schema = fetchSchema();

	//var toplvl = "";
	//for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
	//debugMsg("SCHEMA -> " + toplvl)

	//debugMsg("Got it!");
	return __schema
}

function refreshParameters() {
	var path = connector.getParam("path");
	//if (!path) throw new java.lang.RuntimeException("Path parameter has not been set")
	var action = connector.getParam("action");
	// if (!action) throw new java.lang.RuntimeException("Action parameter has not been set")

	__parameters = {};
	
	for (var paramName in __paramNames) {
		//java.lang.System.out.println("> " + paramName);
		__parameters[paramName] = connector.getParam(paramName);
	}
	
	return __parameters
}

function beautifyValue(val) {
	//main.logmsg("beautifyValue() - " + val);
	if (typeof(val) != "object") return val;
	
	try {
		var newVal = toJson(val);
		
		//main.logmsg("!!! It IS JSON !!!");
		if (val.description) newVal = val.description;
		//main.logmsg("--- Returning: '" + newVal + "'");
		return newVal;
	} catch (ex) {
		return val
	}
}

// Figure out which endpoint param is for the base path and grab the value from the entry
// If the entry passed is null, then don't go looking for the Attribute
function extractUID(entry, epParams, connParams) {
	var uid = null;
	var uidAttName = null;

	for (var i in epParams) {
		var param = epParams[i];
		if (param["in"] == "path") {
			uidAttName = param.name;
			break
		}
	}
	
	if (!entry) {
		uid = "*not gonna be used for anything*"
	} else
	if (uidAttName) {
		var uidAtt = entry[uidAttName];
		if (uidAtt) uid = uidAtt.getValue(0)
	}
	
	if (!uid) throw new java.lang.Exception("The UID attribute must be mapped out: " + uidAttName)
	
	return {
		value: uid,
		name: uidAttName
	}
}

// Local function (for some reason)
function getParameters(path, action) {
	return __schema.getParameters(path, action)
}

// Here too
function replaceEmbeddedUID(path, entryUID) {
	return __schema.replaceEmbeddedUID(path, entryUID)
}



//
// -------  Standard Connector functions 
//




function initialize() {
	refreshParameters();
	resetConnector();
	parseSchema()
}

function terminate() {
}

// CallReply function
function queryReply() {
	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// Embed mapped parameters into the path
	java.lang.System.out.println("queryReply() - entry: " + entry);
	// main.logmsg("queryReply() - entry: " + entry);
	
	var usePath = replaceEmbeddedUID(connParams.path, entry);

	// Now for queryParameters
	var queryString = craftQueryString({
		path: usePath,
		connParams: connParams,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	try {
		// Make the REST call @@TODO Only does GET for now
		var reply = __http.makeRequest({
				verb: "GET", // @@TODO Must figure out how to set the HTTP verb based on the schema
				url: usePath + queryString,
				ctype: "application/json",
				where: "queryReply()"
		});
	
		java.lang.System.out.println("Reply: " + entry.fromJSON(toJson(reply)));
	
		toEntry(reply, entry);
		return entry
	} catch (ex) {
		task.logmsg("ERROR", ex);
		return null
	}	
}

// Since this function is being double-purposed, to also retrieve parameters for the Schema pane
// I have to add more logic that is not necessary for normal connector operations.
function selectEntries(queryMode) {
	queryMode = queryMode || "Data"; // defaults to data
	// Clear out the selected array of entries and set the index to 0
	__resultSetIndex = 0;
	if (typeof(form) == "undefined") __resultSet.clear();
	
	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// So this code works in my testScriptConnectorCode AL
	if (typeof(entry) == "undefined") var entry = system.newEntry();
	
	// Return either the parameters from the path + action from the openAPI schema, which means 
	// you can use Connect + Next to list all available parameters w/ descriptions...
	if (connParams.queryMode == "Parameters" || typeof(task) == "undefined") {
		var restParams = getParameters(connParams.path, connParams.action);
		
		for (var i in restParams) {
			var paramName = restParams[i].name;
			//main.logmsg("getNextEntry() - " + paramName + " - " + beautifyValue(restParams[i]))
			entry[paramName] = beautifyValue(restParams[i]);
		}
		
		__resultSet.add(entry)
	} else {
		// ...else work like getNextEntry() usually does and return data
		
		// This the search filter parameter in the Connections tab
		var personId = connParams.searchCrit;
		if (!personId) throw java.lang.Exception("Search criteria (personId) must be configured")
		
		// Get the path and replace id's as required
		var usePath = replaceEmbeddedUID(connParams.path, personId);
	
		// Now for queryParameters
		var queryString = craftQueryString({
			connParams: connParams,
			path: usePath,
			epParams: epParams,
			action: connParams.action,
			entry: entry
		});
		
		// If there is a queryString, prepend it with ?
		queryString = queryString ? "?" + queryString : "";
		
		//main.logmsg("selectEntries for Data - making call");
		
		try {
			// Make the REST call @@TODO Only does GET for now
			var reply = __http.makeRequest({
					verb: "GET", // @@TODO Must figure out how to set the HTTP verb based on the schema
					url: usePath + queryString,
					ctype: "application/json",
					where: "queryReply()"
			});
		
			//main.logmsg("selectEntries for Data - Reply: " + com.ibm.di.entry.Entry.fromJSON(toJson(reply)));
	
			// Update the global 'entry' variable with these values
			var entry = toEntry(reply);
			
			//main.logmsg("selectEntries for Data - toEntry(): " + entry);
	
			var resultEntry = system.newEntry();
			resultEntry.merge(entry);
			__resultSet.add(resultEntry)
		} catch (ex) {
			task.logmsg("ERROR", ex)
		}	
	}
	return __resultSet	
}

function getNextEntry() {
	//main.logmsg("@@getNextEntry - remaining in buffer: " + __resultSet.size());
	if (__resultSetIndex >= __resultSet.size()) {
		result.setStatus(0);
		return null;
	}

	if (typeof(entry) == "undefined") entry = system.newEntry(); // only for testing
	
	//main.logmsg("getNextEntry() - getting index " + __resultSetIndex);
	entry.merge(__resultSet.get(__resultSetIndex));
	__resultSetIndex++;

	result.setStatus(1);
	//main.logmsg("@@getNextEntry: " + entry);
	return entry
}

function putEntry(entryArg) {
	// entryArg is optional and is for easier testing
	entry = entry || entryArg;
	
	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// Now for queryParameters
	var queryString = craftQueryString({
		connParams: connParams,
		path: usePath,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// Check parameters for the one in the path(base) - the UID
	var uidObj = extractUID(entry, epParams, connParams);
	
	var entryUID = uidObj.value;
	var entryUIDattName = uidObj.name;
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Get the path and replace id's as required
	var usePath = replaceEmbeddedUID(connParams.path, entryUID);

	//main.logmsg("putEntry - making call");

	try {	
		// Make the REST call 
		var reply = __http.makeRequest({
				verb: "POST",
				url: usePath + queryString,
				ctype: "application/json",
				where: "putEntry()",
				body: entry.toJSON()
		});
	
		//main.logmsg("selectEntries for Data - Reply: " + com.ibm.di.entry.Entry.fromJSON(toJson(reply)));
	
		//var resultEntry = toEntry(reply);
		//task.logmsg("putEntry() - " + entry.fromJSON(toJson(reply)));
		
		return entry
	} catch (ex) {
		task.logmsg("ERROR", ex);
		return null
	}	
}

function modEntry() {
	throw new java.lang.Exception("The modify operation is not supported in the current API version")
}

function deleteEntry(entryArg) {
	// entryArg is optional and is for easier testing
	entry = entry || entryArg;
	
	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// Now for queryParameters
	var queryString = craftQueryString({
		connParams: connParams,
		path: usePath,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// Check parameters for the one in the path(base) - the UID
	var uidObj = extractUID(null, epParams, connParams);
	
	var entryUID = uidObj.value;
	var entryUIDattName = uidObj.name;
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Get the path and replace id's as required
	var usePath = replaceEmbeddedUID(connParams.path, entryUID);

	try {	
		// Make the REST call 
		var reply = __http.makeRequest({
				verb: "DELETE",
				url: usePath + queryString,
				ctype: "application/json",
				where: "putEntry()",
				body: entry.toJSON()
		});
	
		return entry
	} catch (ex) {
		task.logmsg("ERROR", ex);
		return null
	}	
}

// Finding an entry only works as direct read using the UID
function findEntry(searchCriteria) {
	// Allows you to pass in the search criteria for easier testing	
	searchCriteria = searchCriteria || search;

	var critValue,
		critName;
	var critMatch = com.ibm.di.server.SearchCriteria.EXACT;
	var crit = searchCriteria.getScriptFilter();

	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// Check parameters for the one in the path(base) - the UID
	uidObj = extractUID(null, epParams, connParams); // Passing null for the first argument stifles any "UID must be mapped" problems
	
	// If there is a scripted filter then use this
	if (crit) {
		var parts = system.splitString(crit, "="); // @@TODO No need to handle other operators - for now :)
		if (parts.length >= 2) {
			critName = parts[0].trim();
			critValue = parts[1].trim();
			critValue = system.remove("\"\'", (critValue || "")) // Remove quotes from the value
		} else {
			critName = uidObj.name;
			critValue = crit
		}

		// Set up the criteria
		crit = {
			name: critName,
			match: critMatch,
			value: critValue
		}
	} 
	else { // If no scripted filter, then grab the first Link Criteria //@@TODO Again, only handling one Link Crit for now
		try {
			crit = searchCriteria.getCriteria(0);
		} catch (ex) {
			throw new java.lang.Exception("You must configure at least one Link Criteria, or provide a script filter")
		}
	}

	// Now check that the attribute name in the filter is the UID parameter name from the OpenAPI schema
	if (!crit.name.equalsIgnoreCase(uidObj.name)) {
		throw new java.lang.Exception("Search criteria must be for the UID attribute: " + uidObj.name)
	}
	
	// Now for queryParameters
	var queryString = craftQueryString({
		connParams: connParams,
		path: usePath,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Get the path and replace id's as required
	var entryUID = crit.value;
	var usePath = replaceEmbeddedUID(connParams.path, entryUID);

	//main.logmsg("putEntry - making call");

	try {	
		// Make the REST call 
		var reply = __http.makeRequest({
				verb: "GET",
				url: usePath + queryString,
				ctype: "application/json",
				where: "findEntry()"
		});
	
		//main.logmsg("selectEntries for Data - Reply: " + com.ibm.di.entry.Entry.fromJSON(toJson(reply)));
	
		resultEntry = toEntry(reply);
		entry.merge(resultEntry);
		
		result.setStatus(1);
		return entry
	} catch (ex) {
		task.logmsg("ERROR", ex);
		result.setStatus(0);
		return null
	}	
}

function querySchema(queryMode) {
	queryMode = queryMode || "Data"; // Defaults to "Data"
	
	//main.logmsg("@@querySchema...");
	var connParams = refreshParameters();
	var path = connParams.path;
	var action = connParams.action;
	
	list.clear(); // For use in the _testScriptConnectorCode
	
	if (connParams.queryMode == "Parameters" /* || typeof(task) == "undefined" */ ) {
/* don't think this is needed
		var embeddedParameter = getEmbeddedUID(path);
		if (embeddedParameter) {
			var e = system.newEntry();
			e.name = embeddedParameter;
			e.syntax = "MUST/uid";
			e.required = true;
			e.mandatory = true;
			list.add(e)
		}
*/
		var parameters = getParameters(path, action);
	
		for (var i in parameters) {
			var param = parameters[i];
	   
			if (param.name.equalsIgnoreCase("CSRFToken")) continue;
			
			var e = system.newEntry();
			e.name = param.name;
			e.syntax = "MUST/" + param.schema.type;
			e.required = true;
			e.mandatory = true;
			//main.logmsg("@@adding " + param.name);
			list.add(e)
		}
	} else { // queryMode is "Data"
		selectEntries();
		var dataEntry = getNextEntry();
		// Remember to reset the index to the result set for any getNextEntry() called after
		__resultSetIndex = Math.min(0, __resultSetIndex - 1);
		
		
		for (var att in dataEntry) {
			if (att instanceof com.ibm.di.entry.Entry) { // This is one of the links
				var name = "link_";
				throw "OOOOOOPS!! Connector Script line 373"
			} else {
				var name = att.getName();
				var val = att.getValue(0);
				
				//main.logmsg("querySchema() adding " + name + " - " + val);
				
				e = system.newEntry();
				e.name = name;
				e.syntax = typeof(val);
				list.add(e)
			}	
		}
	}

	result.setStatus(1);
	return list
}]]></parameter>
                <parameter name="searchCrit">NO12345</parameter>
                <parameter name="url">http://localhost:8080</parameter>
                <parameter name="username">edbird</parameter>
            </Configuration>
            <Parser>
                <InheritFrom>[parent]</InheritFrom>
            </Parser>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <AttributeMap name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <DeltaSettings>
                <UniqueAttribute/>
                <WhenToCommit>After every database operation</WhenToCommit>
                <RowLocking>SERIALIZABLE</RowLocking>
                <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
            </DeltaSettings>
            <Schema name="Input">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1739555301141</ModTime>
            </Schema>
            <Schema name="Output">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1739287790828</ModTime>
                <SchemaItem>
                    <Name>CSRFToken</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>_links_erparent</Name>
                    <Syntax>com.ibm.jscript.std.ObjectObject</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>_links_formTemplate</Name>
                    <Syntax>com.ibm.jscript.std.ObjectObject</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>_links_manager</Name>
                    <Syntax>com.ibm.jscript.std.ObjectObject</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>_links_self</Name>
                    <Syntax>com.ibm.jscript.std.ObjectObject</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>attributes</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>cn</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>counter</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>embedded</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>ercustomdisplay</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>erparent</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>erpersonstatus</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>ersupervisor</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>forms</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>givenname</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>mail</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>manager</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>name</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>personId</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>personType</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>self</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>sn</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>uid</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
            </Schema>
            <LinkCriteria>
                <InheritFrom>[parent]</InheritFrom>
            </LinkCriteria>
            <Hooks>
                <InheritFrom>[parent]</InheritFrom>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <Reconnect>
                <InheritFrom>[parent]</InheritFrom>
                <ReconnectRules/>
            </Reconnect>
            <Operations/>
            <PoolDefinition>
                <InheritFrom>[parent]</InheritFrom>
                <Enabled>false</Enabled>
                <MinPoolSize>0</MinPoolSize>
                <MaxPoolSize>0</MaxPoolSize>
                <PurgeInterval>0</PurgeInterval>
                <InitializeAttempts>1</InitializeAttempts>
                <InitializeSleepInterval>0</InitializeSleepInterval>
            </PoolDefinition>
            <PoolInstance/>
        </Connector>
    <Connector name="ITIMRestClientConnector 20250321 1417">
            <InheritFrom>system:/Connectors/ibmdi.ScriptConnector</InheritFrom>
            <ModTime>1740054147622</ModTime>
            <ConnectorMode>Lookup</ConnectorMode>
            <ConnectorState>Enabled</ConnectorState>
            <Configuration>
                <UserComment><![CDATA[attributes=name,rank,serialnumber
security=max]]></UserComment>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1740054147622</ModTime>
                <parameter name="$form$"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="803" UUID="addb9b0b-e0b0-408d-bc18-1e00ff1dbaa6" created="Sun Dec 01 21:11:43 CET 2024" createdBy="eddiehartman" main="Form" modified="Thu Feb 20 13:22:27 CET 2025" modifiedBy="eddiehartman" version="7.1.1">
    <Form name="Form">
        <ModTime>1740054138764</ModTime>
        <FormItemNames>
            <ListItem>$GLOBAL.script</ListItem>
            <ListItem>keepGlobalState</ListItem>
            <ListItem>$GLOBAL.includeFiles</ListItem>
            <ListItem>includePrologs</ListItem>
            <ListItem>$GLOBAL.debug</ListItem>
            <ListItem>$GLOBAL.help</ListItem>
            <ListItem>PathToObjects</ListItem>
            <ListItem>Clear</ListItem>
            <ListItem>apikey</ListItem>
            <ListItem>action</ListItem>
            <ListItem>username</ListItem>
            <ListItem>password</ListItem>
            <ListItem>authUrl</ListItem>
            <ListItem>path</ListItem>
            <ListItem>schema</ListItem>
            <ListItem>url</ListItem>
            <ListItem>debug</ListItem>
            <ListItem>searchCrit</ListItem>
            <ListItem>includeUIDs</ListItem>
            <ListItem>parameters</ListItem>
        </FormItemNames>
        <FormSectionNames>
            <ListItem>General</ListItem>
            <ListItem>Advanced</ListItem>
        </FormSectionNames>
        <FormItem name="APIKey"/>
        <FormItem name="Action">
            <ModTime>1735050078962</ModTime>
            <parameter name="description">Operation to apply to the selected Item</parameter>
            <parameter name="label">Action</parameter>
            <parameter name="script">fetchActions</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="Clear">
            <ModTime>1737024086705</ModTime>
            <parameter name="label"/>
            <parameter name="noLabel">true</parameter>
            <parameter name="script">clearDropdowns</parameter>
            <parameter name="scriptLabel">Clear Path and Action</parameter>
            <parameter name="syntax">static</parameter>
        </FormItem>
        <FormItem name="Item">
            <ModTime>1734098635211</ModTime>
            <parameter name="description">The resource item to operation on</parameter>
            <parameter name="label">Item</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="script2"/>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="scriptLabel2"/>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="Object">
            <ModTime>1733572441046</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Item to perform operations on</parameter>
            <parameter name="label">	formdata.items = formdata.items || {};</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="scriptLabel"/>
            <parameter name="syntax">droplist</parameter>
        </FormItem>
        <FormItem name="Operation">
            <ModTime>1733750352248</ModTime>
            <parameter name="description">Operation to apply to the selected Object</parameter>
            <parameter name="label">Action</parameter>
            <parameter name="script">fetchOperations</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="PathToObjects">
            <ModTime>1733398344461</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The openAPIschema is hierarchical, so at what level in the tree do resource items appear. Separate tree branches by pipe symbol (|)</parameter>
            <parameter name="label">Path to Items</parameter>
            <parameter name="script"/>
            <parameter name="scriptLabel"/>
        </FormItem>
        <FormItem name="Show">
            <ModTime>1733312883681</ModTime>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="action">
            <ModTime>1736017096799</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Operation to apply to the selected path (resource item)</parameter>
            <parameter name="label">Action</parameter>
            <parameter name="script">fetchActions</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="apikey">
            <ModTime>1737489711326</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">API Key provided for access to the service</parameter>
            <parameter name="label">API Key</parameter>
            <parameter name="syntax">password</parameter>
        </FormItem>
        <FormItem name="authUrl">
            <ModTime>1738951255789</ModTime>
            <parameter name="description">Path to the authentication service, often with 'token' in its name</parameter>
            <parameter name="label">Auth URL</parameter>
        </FormItem>
        <FormItem name="baseUrl">
            <ModTime>1737024040596</ModTime>
            <parameter name="description">The first part of the URL, http://&lt;domain&gt;:&lt;port&gt;, with colon and port number required only if not port 80</parameter>
            <parameter name="label">var __emptyEntry = system.newEntry();</parameter>
        </FormItem>
        <FormItem name="dashes">
            <ModTime>1734099205004</ModTime>
            <parameter name="label">_________________________________________________________________________________</parameter>
            <parameter name="script"/>
            <parameter name="scriptLabel"/>
            <parameter name="syntax">static</parameter>
        </FormItem>
        <FormItem name="debug">
            <ModTime>1737459130079</ModTime>
            <parameter name="description">Yes or no</parameter>
            <parameter name="label">Debug output</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="dropdown"/>
        <FormItem name="includePrologs">
            <parameter name="description">pro_desc</parameter>
            <parameter name="label">pro_label</parameter>
            <parameter name="script">selectGlobalProlog</parameter>
            <parameter name="scriptLabel">pro_script_label</parameter>
            <parameter name="scripthelp">pro_script_help</parameter>
            <parameter name="syntax">textarea</parameter>
        </FormItem>
        <FormItem name="includeUIDs">
            <ModTime>1738499699708</ModTime>
            <parameter name="description">Should UIDs for the entry and associated data be included in the returned data</parameter>
            <parameter name="label">Include UIDs</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="item">
            <ModTime>1735050022484</ModTime>
            <parameter name="description">The resource to act on</parameter>
            <parameter name="label">Item</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="keepGlobalState">
            <parameter name="description">SCRIPT_CONN_KEEP_GLOBAL_STATE_DESC</parameter>
            <parameter name="label">SCRIPT_CONN_KEEP_GLOBAL_STATE_LABEL</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="parameters">
            <ModTime>1739974569312</ModTime>
            <parameter name="description">Free-text list of &lt;parameter&gt;=&lt;value&gt;, one line for each parameter</parameter>
            <parameter name="label">Parameters</parameter>
            <parameter name="script">fetchParameters</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">textarea</parameter>
        </FormItem>
        <FormItem name="password">
            <ModTime>1736017137163</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Authorization password</parameter>
            <parameter name="label">Password</parameter>
            <parameter name="syntax">password</parameter>
        </FormItem>
        <FormItem name="path">
            <ModTime>1737024268372</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The URL path representing the resource item to work with</parameter>
            <parameter name="label">Path</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="queryMode">
            <ModTime>1739287744378</ModTime>
            <Values>
                <ListItem>Parameters</ListItem>
                <ListItem>Data</ListItem>
            </Values>
            <parameter name="description">Pressing Next in the Attribute Schema pane will either return available parameters for the selected Path, or the schema of the data</parameter>
            <parameter name="label">Query Schema mode</parameter>
            <parameter name="syntax">droplist</parameter>
        </FormItem>
        <FormItem name="schema">
            <ModTime>1737024188497</ModTime>
            <parameter name="description">The REST endpoint that returns the schema for this API</parameter>
            <parameter name="label">Schema</parameter>
            <parameter name="script">fetchSchema</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
        </FormItem>
        <FormItem name="searchCrit">
            <ModTime>1737544048218</ModTime>
            <parameter name="description">The Id of the Resource Item you want to retrieve</parameter>
            <parameter name="label">Search for ID</parameter>
        </FormItem>
        <FormItem name="url">
            <ModTime>1737024046822</ModTime>
            <parameter name="description">The first part of the URL, http://&lt;domain&gt;:&lt;port&gt;, with colon and port number required only if not port 80</parameter>
            <parameter name="label">Base URL</parameter>
        </FormItem>
        <FormItem name="username">
            <ModTime>1736017120599</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Authorization username</parameter>
            <parameter name="label">Username</parameter>
        </FormItem>
        <FormSection name="Advanced">
            <FormSectionNames>
                <ListItem>authUrl</ListItem>
                <ListItem>schema</ListItem>
                <ListItem>parameters</ListItem>
                <ListItem>$GLOBAL.userComment</ListItem>
                <ListItem>$GLOBAL.script</ListItem>
                <ListItem>Clear</ListItem>
            </FormSectionNames>
            <parameter name="initiallyExpanded">false</parameter>
            <parameter name="title">Advanced</parameter>
        </FormSection>
        <FormSection name="Debug">
            <FormSectionNames>
                <ListItem>Clear</ListItem>
            </FormSectionNames>
        </FormSection>
        <FormSection name="General">
            <FormSectionNames>
                <ListItem>apikey</ListItem>
                <ListItem>username</ListItem>
                <ListItem>password</ListItem>
                <ListItem>url</ListItem>
                <ListItem>path</ListItem>
                <ListItem>action</ListItem>
                <ListItem>searchCrit</ListItem>
            </FormSectionNames>
        </FormSection>
        <parameter name="formevents"><![CDATA[// 20250104 1959 Initial
// 20250121 1154 Created RESTCLIENT class and used that instead of lots of functions
// 20250121 2047 Copied back test Event Script after _testScriptConnectorCode succeeded in testing Form code
// 20250121 2103 Form Working! Now to look at Mode ops (putEntry, findEntry, ...)
// 20250128 1608 Hardened the fetchActions and fetchItems so it checks for schema first
// 20250219 1802 Finished Fetch for parameters in Connections tab
// 20250220 1321 Added some description to Parameters when fetched
//
//						GLOBAL VARIABLES
//
var __schema = null;
var __initialized = false;
//var __lib = null;

//
//							FUNCTIONS
//

function debug() {
	return false;
	return form.getControl("debug").getText()
}

function alert(msg) {
	main.logmsg(msg);
	java.lang.System.out.println(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (__initialized) return;
	__initialized = true;
	
	//alert("Initializing...");
	//eval(system.getScriptText("RESTIFY library class")); // Load script library class
	//__lib = new RESTIFY();

	eval(system.getScriptText("RESTCLIENT class")); // Load HTTP Client class
	
	// Recreate in case parameters are changed
	__http = new RESTCLIENT({
						baseUrl:  form.getControl("url").getText(),
						authUrl:  form.getControl("authUrl").getText(),
						apikey:   form.getControl("apikey").getText(),
						username: form.getControl("username").getText(),
						password: form.getControl("password").getText(),
						schemaUrl: form.getControl("schema").getText(),
						debug: debug() // true => debug output
				})		
}

// Return the openAPI schema - @TEST hardcoded for now
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	initialize();

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: "/schema",
			authUrl: form.getControl("authUrl").getText(),
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Update the dropdown with paths
function fetchItems() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")
	//alert("---> fetchItems");

	initialize();

	path = "paths";

    updateDropdown("path",
        [path],
        "Cannot fetch actions for Path");
        
	fetchActions()
}

// Update the dropdown with opera tions for the selected path
function fetchActions() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")
	
	initialize();
	
    var selectedItem = form.getControl("path").getText() || "";
	// alert("fetchActions() for " + selectedItem);

    updateDropdown("action",
        ["paths", selectedItem],
        "Cannot fetch actions for Path: " + selectedItem)
}

// Fetch the parameters (with descriptions) and populate the text box - appending to what is already there
function fetchParameters() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")

	var params = __schema.getParameters(form.getControl("path").getText(),
										form.getControl("action").getText());

	updateTextBox("parameters", params)
}

// Updating a textbox control
function updateTextBox(controlName, paramsArray) {
	// First get the existing value and parse it (if possible)
	var oldValue = form.getControl(controlName).getText().trim();
	var useParams = {};
	
	//alert("     paramsArray: " + paramsArray.length);
	
	// Go through the passed parameters and set those that are not already set
	for (var i = 0; i < paramsArray.length; i++) {
		var param = paramsArray[i];
		//alert("Found " + i + " " + param.name + ": " + param.description);
		if (param["in"] != "path") {
			// Add to the list if not something for the path itself
			useParams[param.name] = system.splitString(param.description, ".")[0]
									+ (system.splitString(param.description, ".")[1]);	
		}
	}
	
	// Parse the old text value into individual parameter settings and put in an Entry
	if (oldValue) {
		var lines = system.splitString(oldValue, "\n");
		for (var line in lines) {
			var parts = system.splitString(line, "=");
			if (parts.length > 1) {
				// Overwrite any discovered parameters with previously set values
				useParams[parts[0].trim()] = parts[1].trim();
			}
		}
	}
	
	alert("---- Final list of params: " + toJson(useParams))

	// Get the useParams property names (param names) and sort them
	var paramList = new java.util.ArrayList();
	for (var propName in useParams) {
		alert("    Adding " + propName)
		paramList.add(propName);
	}
	
	paramNames = paramList.toArray();
	java.util.Arrays.sort(paramNames);
	alert("    ParamNames: " + paramNames.length + " item(s)")

	var newParamText = "";
	for (var i = 0; i < paramNames.length; i++) {
		var paramName = paramNames[i];
		alert("    Getting " + paramName)
		newParamText += paramName + "=" + useParams[paramName] + "\n"
	}
	
	//alert(">>>> Setting Parameters value:\n" + newParamText);
	
	// Finally, update the control
	form.getControl(controlName).setText(newParamText)
}

// Update dropdown based api
function updateDropdown(controlName, path, errorMsg) {
    try {
    	alert("updateDropdown("
    			+ controlName
    			+ ", " + path + ", errmsg)");

	    initialize();
		
        if (!path) {
        	alert("updateDropdown() - Path parameter must be set");
        	return	
        };

        var subtree = __schema.getChildren(path);
        
        if (subtree == null) {
        	path.shift();
        	alert("Invalid item path: " + path.toString());
        	return
        }
        
		combo = form.getControl(controlName);
		combo.removeAll(); // Empty drop-down

		var arrList = java.util.ArrayList();
        for (var propName in subtree) {
        	arrList.add(propName);
        }
        var arr = arrList.toArray();
        java.util.Arrays.sort(arr);
    			
        for (var propName in arr) {
            //alert("   ..adding " + res);
            combo.add(propName)
        }

        alert("drop-down updated!");

        combo.select(0)

    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        alert(msg);
        throw msg
    }
}

// Empty out both Item and Object dropdowns
function clearDropdowns() {
	form.getControl("path").removeAll();
	form.getControl("action").removeAll()	
}

// For debugging from inside 
function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("_Restify/Log_" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]]]><![CDATA[></parameter>
        <parameter name="formscript"/>
        <parameter name="title">CONN_TITLE</parameter>
        <TranslationFile>NLS/idi_conn_scriptconn</TranslationFile>
    </Form>
</MetamergeConfig>]]></parameter>
                <parameter name="Action"/>
                <parameter name="Item"/>
                <parameter name="Object"/>
                <parameter name="Operation">servers</parameter>
                <parameter name="PathToObjects">paths</parameter>
                <parameter name="action">get</parameter>
                <parameter encrypted="true" name="apikey">hG34r4UwR+6XIJ7eIqDGE7Jewa7le9h+YSdHRpnuRgG2NoN6w+fUb1RRZOyVnZbwgOz5rl7dSzH58XBNvxwji5Xd7adW0vLHdtJqprXlsVr3/UTakYtNIX8GoIDITbs1sJ6L1TGYVb1IFV6OdWQmTie8117egKBCuEF7/t/h3jA=</parameter>
                <parameter name="authUrl">/v1.0/endpoint/default/token</parameter>
                <parameter name="debug">false</parameter>
                <parameter name="includeFiles"/>
                <parameter name="includePrologs"><![CDATA[SCHEMA class
RESTCLIENT class]]></parameter>
                <parameter name="includeUIDs">true</parameter>
                <parameter name="item">/people</parameter>
                <parameter name="parameters"><![CDATA[attributes=name,rank,serialnumber
embedded=Specifies the comma-separated attributes to return for reference attributes of a user (eg manager)
forms=Specifies the boolean If true, then the form is returned for the user
security=max
]]></parameter>
                <parameter encrypted="true" name="password">QPJrzwQLcE4vzGr26vZn/dpVhHgRZPep6qMKcUc+D9B0plxv3uVAYK+d5WspyCZbpsZWeZ7+j5Nezag0VPhlINniViximXN0BZzHm6WzOULNfNMqerJB++t+Ore5E0UIc0C+zpzyQhhZg04H7oKYNm+8v8snQUoV4K46iYFr9lI=</parameter>
                <parameter name="path">/people/{personId}</parameter>
                <parameter name="queryMode">Data</parameter>
                <parameter name="schema">/schema</parameter>
                <parameter name="script"><![CDATA[// 20250104 2008 Initial
// 20250111 1915 Handling queryParameters in url
// 20250126 1901 Adding queryMode for querySchema to return either params, or schema of data
// 20250127 1346 initialize(), terminate(), selectEntries() and a test queryReply() in place
// 20250127	1854 maded querySchema drop the token in the parameters returned
// 20250128 1503 selectEntries and getNextEntry implemented - ready for more testing I'm sure :)
// 20250128 1705 Added the check for spoofing
// 20250128 2136 querySchema() can now return either parameters or data when you press Connect and Next in the Schema pane
// 20250130 1207 Hopefully now
// 20250130 1221 Fixing it in place in the Connector
// 20250131 1928 Gonna get querySchema to work right
// 20250131 2009 Now looking at getNextEntry() so I can return parameter descriptions with Connect + Next if querySchemaMode == Parameters
// 20250131 2033 Something still not right - alas, tomorrow
// 20250202 1313 Looking for my "entry not found" error when Connect while queryMode == Data
// 20250202 1407 Connect working for both settings!!!! 
// 20250202 1453 getNextEntry for Connect + Next now it's working!
// 20250207 1819 looking at selectEntries and getNextEntry, as well as findEntry, putEntry and modEntry. Tonight!!!
//          1917 Nope - manana
// 20250211 2024 Fixed mock server for people put, delete and servers - I hope
// 20250212 1142 Adding putEntry, deleteEntry and findEntry
// 20250214 1758 Finishing putEntry, deleteEntry and findEntry
// 20250214 1924 all Connector functions in place
// 20250219 1419 Removing Query Schema Mode 
// 20250219 2023 All connector modes supported except modify
//
// --- TODO Freetext parameter where all the standard set of parameter values can be set
//                                        
//
//						GLOBAL VARIABLES
//
var __parameters = {};						// params for the chosen path and action
var __debug = connector.getParam("debug");	// debug output?
var __schema = null;						// shared openAPI schema object (SCHEMA class)
var __initialized = false;					// Do I need this?
var __emptyEntry = system.newEntry();		// for craftQueryString
var __http = null; 							// for the RESTCLIENT we will use for the calls
var __resultSet = null;						// A container for returned entries (selectEntries/findEntry)
var __resultSetIndex = 0;					// Index into the result set
var __formEventCalling = false;

var __paramNames = {
	action: true,
	apikey: true,
	schema: true,
	authUrl: true,
	debug: true,
	path: true,
	password: true,
	url: true,
	username: true,
	item: true,
	action: true,
	searchCrit: true,
	includeUIDs: true,
	parameters: true
}

//
//							FUNCTIONS
//



function connParamField2Entry(connParams) {
	var paramsEntry = system.newEntry();
	var paramSetting = connParams.parameters;
	var lines = paramSetting.split(/\r?\n|\r/);
	for (var lineIndex = 0; lineIndex < lines.length; lineIndex++){
		var thisLine = lines[lineIndex];
		var parts = thisLine.split("=");
		var paramName = parts[0].trim();
		var paramValue = (parts.length > 1) ? parts[1].trim() : "";
		
		if (paramValue) {
			paramsEntry[paramName] = paramValue
		}
	}
	
	return paramsEntry
}

function craftQueryString(args) {
	var path = args.path;
	var action = args.action;
	var connParams = args.connParams;
	var useParams = args.epParams || {};
	var entry = args.entry || __emptyEntry;
	
	var embeddedUID = __schema.getEmbeddedUID(path);

	var paramsEntry = connParamField2Entry(connParams);
	
	var epParams = [];
	for (var i in useParams) {
		var param = useParams[i];
		var paramName = param.name;
		if (param["in"] == "query" || true) {
			if (entry[paramName] != null || paramsEntry[paramName] != null) {
				paramValue = paramsEntry[paramName] ? paramsEntry[paramName].getValue() : entry[paramName].getValue(0);
				if (paramValue != null) {
					epParams.push(paramName + "=" + paramValue)
				}
			}
		}	
	}
	
	return epParams.join("&")
}

function fixUrl(url) {
	if (!url.endsWith("/")) {
		return url + "/";
	} else {
		return url;
	}
}

function debug() {
	return __debug;
}

// Rest the connector and re-initialize it in case parameters have changed
function resetConnector() {
	__initialized = false;
	__resultSetIndex = 0;
	
	
	// Now zero out the __resultSet global ArrayList
	__resultSet = new java.util.ArrayList();

	if (typeof list != "undefined") list.clear(); // so it works while spoofing
	if (__http != null) __http.terminate();
	
	// Renew the RESTCLIENT with the currently set parameters
	if (!RESTCLIENT) eval(system.getScriptText("RESTCLIENT class"));
	__http = new RESTCLIENT({
						baseUrl:   __parameters.url,
						authUrl:   __parameters.authUrl,
						apikey:    __parameters.apikey,
						username:  __parameters.username,
						password:  __parameters.password,
						schemaUrl: __parameters.schema,
						debug: 	   debug() // true => debug output		
					})
}

// Change the URL path so the UID placeholder is replace with the Attribute value
function replaceUID(path, entry) {
	
}

// Turn the JS object returned from a call into the global entry object
function toEntry(obj, entry) {
	var connParams = refreshParameters();
	entry = entry || system.newEntry();

	//main.logmsg("toEntry() - includeUIDs: " + connector.getParam("includeUIDs"))
	
	for (var propName in obj) {
		// skip _links
		if (propName.equalsIgnoreCase("_links") && !connParams.includeUIDs) continue;
		for (var subPropName in obj[propName]) {
			if (typeof(subPropName) != "string") {
				//main.logmsg("toEntry() - !!!!!!!! subPropName not string: " + subPropName);
			} else {
				var newVal = beautifyValue(obj[propName][subPropName]);
				/*
				var prepend = (propName.equalsIgnoreCase("_links") ? propName + "_" : "");
				
				// For _links we must prepend the propName to the Attribute name
				subPropName = prepend + subPropName;
				*/
				if (newVal.toLowerCase().startsWith("erglobalid=")) {
					//main.logmsg("FOUND erglobalid value for " + subPropName)
					if (!connParams.includeUIDs) continue;	
				}
				
				//main.logmsg("toEntry() - adding " + subPropName + " - " + obj[propName][subPropName]);
				entry[subPropName] = newVal
			}
		}
	}
	
	//main.logmsg("toEntry - Complete: \n" + entry)
	
	return entry // Not necessary, since entry is global in the Connector context - I just like doing it :)
}

function debugMsg(msg) {
	if (__debug) {
//		task.logmsg(msg);
		main.logmsg(msg);
		java.lang.System.out.println(msg)
	}
}

function alertObject(objName, obj) {
	debugMsg("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	debugMsg(arr.toString())
}

// Return the openAPI schema
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: __parameters.schema,
			authUrl: __parameters.authUrl,
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Parse the openAPI schema
function parseSchema() {
	if (__schema) return __schema;

	// @@TODO Make actual call
	debugMsg("Fetching schema...")
	//var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	//var schemaJSON = fetchSchema();

	//debugMsg("Creating SCHEMA object");
	__schema = fetchSchema();

	//var toplvl = "";
	//for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
	//debugMsg("SCHEMA -> " + toplvl)

	//debugMsg("Got it!");
	return __schema
}

function refreshParameters() {
	var path = connector.getParam("path");
	//if (!path) throw new java.lang.RuntimeException("Path parameter has not been set")
	var action = connector.getParam("action");
	// if (!action) throw new java.lang.RuntimeException("Action parameter has not been set")

	__parameters = {};
	
	for (var paramName in __paramNames) {
		//java.lang.System.out.println("> " + paramName);
		__parameters[paramName] = connector.getParam(paramName);
	}
	
	return __parameters
}

function beautifyValue(val) {
	//main.logmsg("beautifyValue() - " + val);
	if (typeof(val) != "object") return val;
	
	try {
		var newVal = toJson(val);
		
		//main.logmsg("!!! It IS JSON !!!");
		if (val.description) newVal = val.description;
		//main.logmsg("--- Returning: '" + newVal + "'");
		return newVal;
	} catch (ex) {
		return val
	}
}

// Figure out which endpoint param is for the base path and grab the value from the entry
// If the entry passed is null, then don't go looking for the Attribute
function extractUID(entry, epParams, connParams) {
	var uid = null;
	var uidAttName = null;

	for (var i in epParams) {
		var param = epParams[i];
		if (param["in"] == "path") {
			uidAttName = param.name;
			break
		}
	}
	
	if (!entry) {
		uid = "*not gonna be used for anything*"
	} else
	if (uidAttName) {
		var uidAtt = entry[uidAttName];
		if (uidAtt) uid = uidAtt.getValue(0)
	}
	
	if (!uid) throw new java.lang.Exception("The UID attribute must be mapped out: " + uidAttName)
	
	return {
		value: uid,
		name: uidAttName
	}
}

// Local function (for some reason)
function getParameters(path, action) {
	return __schema.getParameters(path, action)
}

// Here too
function replaceEmbeddedUID(path, entryUID) {
	return __schema.replaceEmbeddedUID(path, entryUID)
}



//
// -------  Standard Connector functions 
//




function initialize() {
	refreshParameters();
	resetConnector();
	parseSchema()
}

function terminate() {
}

// CallReply function
function queryReply() {
	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// Embed mapped parameters into the path
	java.lang.System.out.println("queryReply() - entry: " + entry);
	// main.logmsg("queryReply() - entry: " + entry);
	
	var usePath = replaceEmbeddedUID(connParams.path, entry);

	// Now for queryParameters
	var queryString = craftQueryString({
		path: usePath,
		connParams: connParams,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	try {
		// Make the REST call @@TODO Only does GET for now
		var reply = __http.makeRequest({
				verb: "GET", // @@TODO Must figure out how to set the HTTP verb based on the schema
				url: usePath + queryString,
				ctype: "application/json",
				where: "queryReply()"
		});
	
		java.lang.System.out.println("Reply: " + entry.fromJSON(toJson(reply)));
	
		toEntry(reply, entry);
		return entry
	} catch (ex) {
		task.logmsg("ERROR", ex);
		return null
	}	
}

// Since this function is being double-purposed, to also retrieve parameters for the Schema pane
// I have to add more logic that is not necessary for normal connector operations.
function selectEntries(queryMode) {
	queryMode = queryMode || "Data"; // defaults to data
	// Clear out the selected array of entries and set the index to 0
	__resultSetIndex = 0;
	if (typeof(form) == "undefined") __resultSet.clear();
	
	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// So this code works in my testScriptConnectorCode AL
	if (typeof(entry) == "undefined") var entry = system.newEntry();
	
	// Return either the parameters from the path + action from the openAPI schema, which means 
	// you can use Connect + Next to list all available parameters w/ descriptions...
	if (connParams.queryMode == "Parameters" || typeof(task) == "undefined") {
		var restParams = getParameters(connParams.path, connParams.action);
		
		for (var i in restParams) {
			var paramName = restParams[i].name;
			//main.logmsg("getNextEntry() - " + paramName + " - " + beautifyValue(restParams[i]))
			entry[paramName] = beautifyValue(restParams[i]);
		}
		
		__resultSet.add(entry)
	} else {
		// ...else work like getNextEntry() usually does and return data
		
		// This the search filter parameter in the Connections tab
		var personId = connParams.searchCrit;
		if (!personId) throw java.lang.Exception("Search criteria (personId) must be configured")
		
		// Get the path and replace id's as required
		var usePath = replaceEmbeddedUID(connParams.path, personId);
	
		// Now for queryParameters
		var queryString = craftQueryString({
			connParams: connParams,
			path: usePath,
			epParams: epParams,
			action: connParams.action,
			entry: entry
		});
		
		// If there is a queryString, prepend it with ?
		queryString = queryString ? "?" + queryString : "";
		
		//main.logmsg("selectEntries for Data - making call");
		
		try {
			// Make the REST call @@TODO Only does GET for now
			var reply = __http.makeRequest({
					verb: "GET", // @@TODO Must figure out how to set the HTTP verb based on the schema
					url: usePath + queryString,
					ctype: "application/json",
					where: "queryReply()"
			});
		
			//main.logmsg("selectEntries for Data - Reply: " + com.ibm.di.entry.Entry.fromJSON(toJson(reply)));
	
			// Update the global 'entry' variable with these values
			var entry = toEntry(reply);
			
			//main.logmsg("selectEntries for Data - toEntry(): " + entry);
	
			var resultEntry = system.newEntry();
			resultEntry.merge(entry);
			__resultSet.add(resultEntry)
		} catch (ex) {
			task.logmsg("ERROR", ex)
		}	
	}
	return __resultSet	
}

function getNextEntry() {
	//main.logmsg("@@getNextEntry - remaining in buffer: " + __resultSet.size());
	if (__resultSetIndex >= __resultSet.size()) {
		result.setStatus(0);
		return null;
	}

	if (typeof(entry) == "undefined") entry = system.newEntry(); // only for testing
	
	//main.logmsg("getNextEntry() - getting index " + __resultSetIndex);
	entry.merge(__resultSet.get(__resultSetIndex));
	__resultSetIndex++;

	result.setStatus(1);
	//main.logmsg("@@getNextEntry: " + entry);
	return entry
}

function putEntry(entryArg) {
	// entryArg is optional and is for easier testing
	entry = entry || entryArg;
	
	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// Now for queryParameters
	var queryString = craftQueryString({
		connParams: connParams,
		path: usePath,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// Check parameters for the one in the path(base) - the UID
	var uidObj = extractUID(entry, epParams, connParams);
	
	var entryUID = uidObj.value;
	var entryUIDattName = uidObj.name;
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Get the path and replace id's as required
	var usePath = replaceEmbeddedUID(connParams.path, entryUID);

	//main.logmsg("putEntry - making call");

	try {	
		// Make the REST call 
		var reply = __http.makeRequest({
				verb: "POST",
				url: usePath + queryString,
				ctype: "application/json",
				where: "putEntry()",
				body: entry.toJSON()
		});
	
		//main.logmsg("selectEntries for Data - Reply: " + com.ibm.di.entry.Entry.fromJSON(toJson(reply)));
	
		//var resultEntry = toEntry(reply);
		//task.logmsg("putEntry() - " + entry.fromJSON(toJson(reply)));
		
		return entry
	} catch (ex) {
		task.logmsg("ERROR", ex);
		return null
	}	
}

function modEntry() {
	throw new java.lang.Exception("The modify operation is not supported in the current API version")
}

function deleteEntry(entryArg) {
	// entryArg is optional and is for easier testing
	entry = entry || entryArg;
	
	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// Now for queryParameters
	var queryString = craftQueryString({
		connParams: connParams,
		path: usePath,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// Check parameters for the one in the path(base) - the UID
	var uidObj = extractUID(null, epParams, connParams);
	
	var entryUID = uidObj.value;
	var entryUIDattName = uidObj.name;
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Get the path and replace id's as required
	var usePath = replaceEmbeddedUID(connParams.path, entryUID);

	try {	
		// Make the REST call 
		var reply = __http.makeRequest({
				verb: "DELETE",
				url: usePath + queryString,
				ctype: "application/json",
				where: "putEntry()",
				body: entry.toJSON()
		});
	
		return entry
	} catch (ex) {
		task.logmsg("ERROR", ex);
		return null
	}	
}

// Finding an entry only works as direct read using the UID
function findEntry(searchCriteria) {
	// Allows you to pass in the search criteria for easier testing	
	searchCriteria = searchCriteria || search;

	var critValue,
		critName;
	var critMatch = com.ibm.di.server.SearchCriteria.EXACT;
	var crit = searchCriteria.getScriptFilter();

	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// Check parameters for the one in the path(base) - the UID
	uidObj = extractUID(null, epParams, connParams); // Passing null for the first argument stifles any "UID must be mapped" problems
	
	// If there is a scripted filter then use this
	if (crit) {
		var parts = system.splitString(crit, "="); // @@TODO No need to handle other operators - for now :)
		if (parts.length >= 2) {
			critName = parts[0].trim();
			critValue = parts[1].trim();
			critValue = system.remove("\"\'", (critValue || "")) // Remove quotes from the value
		} else {
			critName = uidObj.name;
			critValue = crit
		}

		// Set up the criteria
		crit = {
			name: critName,
			match: critMatch,
			value: critValue
		}
	} 
	else { // If no scripted filter, then grab the first Link Criteria //@@TODO Again, only handling one Link Crit for now
		try {
			crit = searchCriteria.getCriteria(0);
		} catch (ex) {
			throw new java.lang.Exception("You must configure at least one Link Criteria, or provide a script filter")
		}
	}

	// Now check that the attribute name in the filter is the UID parameter name from the OpenAPI schema
	if (!crit.name.equalsIgnoreCase(uidObj.name)) {
		throw new java.lang.Exception("Search criteria must be for the UID attribute: " + uidObj.name)
	}
	
	// Now for queryParameters
	var queryString = craftQueryString({
		connParams: connParams,
		path: usePath,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Get the path and replace id's as required
	var entryUID = crit.value;
	var usePath = replaceEmbeddedUID(connParams.path, entryUID);

	//main.logmsg("putEntry - making call");

	try {	
		// Make the REST call 
		var reply = __http.makeRequest({
				verb: "GET",
				url: usePath + queryString,
				ctype: "application/json",
				where: "findEntry()"
		});
	
		//main.logmsg("selectEntries for Data - Reply: " + com.ibm.di.entry.Entry.fromJSON(toJson(reply)));
	
		resultEntry = toEntry(reply);
		entry.merge(resultEntry);
		
		result.setStatus(1);
		return entry
	} catch (ex) {
		task.logmsg("ERROR", ex);
		result.setStatus(0);
		return null
	}	
}

function querySchema(queryMode) {
	queryMode = queryMode || "Data"; // Defaults to "Data"
	
	//main.logmsg("@@querySchema...");
	var connParams = refreshParameters();
	var path = connParams.path;
	var action = connParams.action;
	
	list.clear(); // For use in the _testScriptConnectorCode
	
	if (connParams.queryMode == "Parameters" /* || typeof(task) == "undefined" */ ) {
/* don't think this is needed
		var embeddedParameter = getEmbeddedUID(path);
		if (embeddedParameter) {
			var e = system.newEntry();
			e.name = embeddedParameter;
			e.syntax = "MUST/uid";
			e.required = true;
			e.mandatory = true;
			list.add(e)
		}
*/
		var parameters = getParameters(path, action);
	
		for (var i in parameters) {
			var param = parameters[i];
	   
			if (param.name.equalsIgnoreCase("CSRFToken")) continue;
			
			var e = system.newEntry();
			e.name = param.name;
			e.syntax = "MUST/" + param.schema.type;
			e.required = true;
			e.mandatory = true;
			//main.logmsg("@@adding " + param.name);
			list.add(e)
		}
	} else { // queryMode is "Data"
		selectEntries();
		var dataEntry = getNextEntry();
		// Remember to reset the index to the result set for any getNextEntry() called after
		__resultSetIndex = Math.min(0, __resultSetIndex - 1);
		
		
		for (var att in dataEntry) {
			if (att instanceof com.ibm.di.entry.Entry) { // This is one of the links
				var name = "link_";
				throw "OOOOOOPS!! Connector Script line 373"
			} else {
				var name = att.getName();
				var val = att.getValue(0);
				
				//main.logmsg("querySchema() adding " + name + " - " + val);
				
				e = system.newEntry();
				e.name = name;
				e.syntax = typeof(val);
				list.add(e)
			}	
		}
	}

	result.setStatus(1);
	return list
}]]></parameter>
                <parameter name="searchCrit">NO12345</parameter>
                <parameter name="url">http://localhost:8080</parameter>
                <parameter name="username">edbird</parameter>
            </Configuration>
            <Parser>
                <InheritFrom>[parent]</InheritFrom>
            </Parser>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <AttributeMap name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <DeltaSettings>
                <UniqueAttribute/>
                <WhenToCommit>After every database operation</WhenToCommit>
                <RowLocking>SERIALIZABLE</RowLocking>
                <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
            </DeltaSettings>
            <Schema name="Input">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1739555301141</ModTime>
            </Schema>
            <Schema name="Output">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1739287790828</ModTime>
                <SchemaItem>
                    <Name>CSRFToken</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>_links_erparent</Name>
                    <Syntax>com.ibm.jscript.std.ObjectObject</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>_links_formTemplate</Name>
                    <Syntax>com.ibm.jscript.std.ObjectObject</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>_links_manager</Name>
                    <Syntax>com.ibm.jscript.std.ObjectObject</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>_links_self</Name>
                    <Syntax>com.ibm.jscript.std.ObjectObject</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>attributes</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>cn</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>counter</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>embedded</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>ercustomdisplay</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>erparent</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>erpersonstatus</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>ersupervisor</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>forms</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>givenname</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>mail</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>manager</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>name</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>personId</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>personType</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>self</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>sn</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>uid</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
            </Schema>
            <LinkCriteria>
                <InheritFrom>[parent]</InheritFrom>
            </LinkCriteria>
            <Hooks>
                <InheritFrom>[parent]</InheritFrom>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <Reconnect>
                <InheritFrom>[parent]</InheritFrom>
                <ReconnectRules/>
            </Reconnect>
            <Operations/>
            <PoolDefinition>
                <InheritFrom>[parent]</InheritFrom>
                <Enabled>false</Enabled>
                <MinPoolSize>0</MinPoolSize>
                <MaxPoolSize>0</MaxPoolSize>
                <PurgeInterval>0</PurgeInterval>
                <InitializeAttempts>1</InitializeAttempts>
                <InitializeSleepInterval>0</InitializeSleepInterval>
            </PoolDefinition>
            <PoolInstance/>
        </Connector>
    <Connector name="ITIMRestClientConnector 20250322 1433 Connector code working now">
            <InheritFrom>system:/Connectors/ibmdi.ScriptConnector</InheritFrom>
            <ModTime>1742588076383</ModTime>
            <ConnectorMode>Lookup</ConnectorMode>
            <ConnectorState>Enabled</ConnectorState>
            <Configuration>
                <UserComment><![CDATA[attributes=name,rank,serialnumber
security=max]]></UserComment>
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1742588076383</ModTime>
                <parameter name="$form$"><![CDATA[<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="807" UUID="addb9b0b-e0b0-408d-bc18-1e00ff1dbaa6" created="Sun Dec 01 21:11:43 CET 2024" createdBy="eddiehartman" main="Form" modified="Fri Mar 21 21:14:36 CET 2025" modifiedBy="eddiehartman" version="7.1.1">
    <Form name="Form">
        <ModTime>1742563224992</ModTime>
        <FormItemNames>
            <ListItem>$GLOBAL.script</ListItem>
            <ListItem>keepGlobalState</ListItem>
            <ListItem>$GLOBAL.includeFiles</ListItem>
            <ListItem>includePrologs</ListItem>
            <ListItem>$GLOBAL.debug</ListItem>
            <ListItem>$GLOBAL.help</ListItem>
            <ListItem>PathToObjects</ListItem>
            <ListItem>Clear</ListItem>
            <ListItem>apikey</ListItem>
            <ListItem>action</ListItem>
            <ListItem>username</ListItem>
            <ListItem>password</ListItem>
            <ListItem>authUrl</ListItem>
            <ListItem>path</ListItem>
            <ListItem>schema</ListItem>
            <ListItem>url</ListItem>
            <ListItem>debug</ListItem>
            <ListItem>searchCrit</ListItem>
            <ListItem>includeUIDs</ListItem>
            <ListItem>parameters</ListItem>
        </FormItemNames>
        <FormSectionNames>
            <ListItem>General</ListItem>
            <ListItem>Advanced</ListItem>
        </FormSectionNames>
        <FormItem name="APIKey"/>
        <FormItem name="Action">
            <ModTime>1735050078962</ModTime>
            <parameter name="description">Operation to apply to the selected Item</parameter>
            <parameter name="label">Action</parameter>
            <parameter name="script">fetchActions</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="Clear">
            <ModTime>1737024086705</ModTime>
            <parameter name="label"/>
            <parameter name="noLabel">true</parameter>
            <parameter name="script">clearDropdowns</parameter>
            <parameter name="scriptLabel">Clear Path and Action</parameter>
            <parameter name="syntax">static</parameter>
        </FormItem>
        <FormItem name="Item">
            <ModTime>1734098635211</ModTime>
            <parameter name="description">The resource item to operation on</parameter>
            <parameter name="label">Item</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="script2"/>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="scriptLabel2"/>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="Object">
            <ModTime>1733572441046</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Item to perform operations on</parameter>
            <parameter name="label">	formdata.items = formdata.items || {};</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="scriptLabel"/>
            <parameter name="syntax">droplist</parameter>
        </FormItem>
        <FormItem name="Operation">
            <ModTime>1733750352248</ModTime>
            <parameter name="description">Operation to apply to the selected Object</parameter>
            <parameter name="label">Action</parameter>
            <parameter name="script">fetchOperations</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="PathToObjects">
            <ModTime>1733398344461</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The openAPIschema is hierarchical, so at what level in the tree do resource items appear. Separate tree branches by pipe symbol (|)</parameter>
            <parameter name="label">Path to Items</parameter>
            <parameter name="script"/>
            <parameter name="scriptLabel"/>
        </FormItem>
        <FormItem name="Show">
            <ModTime>1733312883681</ModTime>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="action">
            <ModTime>1736017096799</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Operation to apply to the selected path (resource item)</parameter>
            <parameter name="label">Action</parameter>
            <parameter name="script">fetchActions</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="apikey">
            <ModTime>1737489711326</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">API Key provided for access to the service</parameter>
            <parameter name="label">API Key</parameter>
            <parameter name="syntax">password</parameter>
        </FormItem>
        <FormItem name="authUrl">
            <ModTime>1738951255789</ModTime>
            <parameter name="description">Path to the authentication service, often with 'token' in its name</parameter>
            <parameter name="label">Auth URL</parameter>
        </FormItem>
        <FormItem name="baseUrl">
            <ModTime>1737024040596</ModTime>
            <parameter name="description">The first part of the URL, http://&lt;domain&gt;:&lt;port&gt;, with colon and port number required only if not port 80</parameter>
            <parameter name="label">var __emptyEntry = system.newEntry();</parameter>
        </FormItem>
        <FormItem name="dashes">
            <ModTime>1734099205004</ModTime>
            <parameter name="label">_________________________________________________________________________________</parameter>
            <parameter name="script"/>
            <parameter name="scriptLabel"/>
            <parameter name="syntax">static</parameter>
        </FormItem>
        <FormItem name="debug">
            <ModTime>1737459130079</ModTime>
            <parameter name="description">Yes or no</parameter>
            <parameter name="label">Debug output</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="dropdown"/>
        <FormItem name="includePrologs">
            <parameter name="description">pro_desc</parameter>
            <parameter name="label">pro_label</parameter>
            <parameter name="script">selectGlobalProlog</parameter>
            <parameter name="scriptLabel">pro_script_label</parameter>
            <parameter name="scripthelp">pro_script_help</parameter>
            <parameter name="syntax">textarea</parameter>
        </FormItem>
        <FormItem name="includeUIDs">
            <ModTime>1738499699708</ModTime>
            <parameter name="description">Should UIDs for the entry and associated data be included in the returned data</parameter>
            <parameter name="label">Include UIDs</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="item">
            <ModTime>1735050022484</ModTime>
            <parameter name="description">The resource to act on</parameter>
            <parameter name="label">Item</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="keepGlobalState">
            <parameter name="description">SCRIPT_CONN_KEEP_GLOBAL_STATE_DESC</parameter>
            <parameter name="label">SCRIPT_CONN_KEEP_GLOBAL_STATE_LABEL</parameter>
            <parameter name="syntax">boolean</parameter>
        </FormItem>
        <FormItem name="parameters">
            <ModTime>1739974569312</ModTime>
            <parameter name="description">Free-text list of &lt;parameter&gt;=&lt;value&gt;, one line for each parameter</parameter>
            <parameter name="label">Parameters</parameter>
            <parameter name="script">fetchParameters</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">textarea</parameter>
        </FormItem>
        <FormItem name="password">
            <ModTime>1736017137163</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Authorization password</parameter>
            <parameter name="label">Password</parameter>
            <parameter name="syntax">password</parameter>
        </FormItem>
        <FormItem name="path">
            <ModTime>1737024268372</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">The URL path representing the resource item to work with</parameter>
            <parameter name="label">Path</parameter>
            <parameter name="script">fetchItems</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
            <parameter name="syntax">dropedit</parameter>
        </FormItem>
        <FormItem name="queryMode">
            <ModTime>1739287744378</ModTime>
            <Values>
                <ListItem>Parameters</ListItem>
                <ListItem>Data</ListItem>
            </Values>
            <parameter name="description">Pressing Next in the Attribute Schema pane will either return available parameters for the selected Path, or the schema of the data</parameter>
            <parameter name="label">Query Schema mode</parameter>
            <parameter name="syntax">droplist</parameter>
        </FormItem>
        <FormItem name="schema">
            <ModTime>1737024188497</ModTime>
            <parameter name="description">The REST endpoint that returns the schema for this API</parameter>
            <parameter name="label">Schema</parameter>
            <parameter name="script">fetchSchema</parameter>
            <parameter name="scriptLabel">Fetch</parameter>
        </FormItem>
        <FormItem name="searchCrit">
            <ModTime>1737544048218</ModTime>
            <parameter name="description">The Id of the Resource Item you want to retrieve</parameter>
            <parameter name="label">Search for ID</parameter>
        </FormItem>
        <FormItem name="url">
            <ModTime>1742563224992</ModTime>
            <parameter name="description">The first part of the URL, http://&lt;domain&gt;:&lt;port&gt;, with colon and port number, which is not required if the port is 80</parameter>
            <parameter name="label">REST Host</parameter>
        </FormItem>
        <FormItem name="username">
            <ModTime>1736017120599</ModTime>
            <parameter name="Required">true</parameter>
            <parameter name="description">Authorization username</parameter>
            <parameter name="label">Username</parameter>
        </FormItem>
        <FormSection name="Advanced">
            <FormSectionNames>
                <ListItem>authUrl</ListItem>
                <ListItem>schema</ListItem>
                <ListItem>parameters</ListItem>
                <ListItem>$GLOBAL.userComment</ListItem>
                <ListItem>$GLOBAL.script</ListItem>
                <ListItem>Clear</ListItem>
            </FormSectionNames>
            <parameter name="initiallyExpanded">false</parameter>
            <parameter name="title">Advanced</parameter>
        </FormSection>
        <FormSection name="Debug">
            <FormSectionNames>
                <ListItem>Clear</ListItem>
            </FormSectionNames>
        </FormSection>
        <FormSection name="General">
            <FormSectionNames>
                <ListItem>apikey</ListItem>
                <ListItem>username</ListItem>
                <ListItem>password</ListItem>
                <ListItem>url</ListItem>
                <ListItem>path</ListItem>
                <ListItem>action</ListItem>
                <ListItem>searchCrit</ListItem>
            </FormSectionNames>
        </FormSection>
        <parameter name="formevents"><![CDATA[// 20250104 1959 Initial
// 20250121 1154 Created RESTCLIENT class and used that instead of lots of functions
// 20250121 2047 Copied back test Event Script after _testScriptConnectorCode succeeded in testing Form code
// 20250121 2103 Form Working! Now to look at Mode ops (putEntry, findEntry, ...)
// 20250128 1608 Hardened the fetchActions and fetchItems so it checks for schema first
// 20250219 1802 Finished Fetch for parameters in Connections tab
// 20250220 1321 Added some description to Parameters when fetched
//
//						GLOBAL VARIABLES
//
var __schema = null;
var __initialized = false;
//var __lib = null;

//
//							FUNCTIONS
//

function debug() {
	return false;
	return form.getControl("debug").getText()
}

function alert(msg) {
	main.logmsg(msg);
	java.lang.System.out.println(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (__initialized) return;
	__initialized = true;
	
	//alert("Initializing...");
	//eval(system.getScriptText("RESTIFY library class")); // Load script library class
	//__lib = new RESTIFY();

	eval(system.getScriptText("RESTCLIENT class")); // Load HTTP Client class
	
	// Recreate in case parameters are changed
	__http = new RESTCLIENT({
						baseUrl:  form.getControl("url").getText(),
						authUrl:  form.getControl("authUrl").getText(),
						apikey:   form.getControl("apikey").getText(),
						username: form.getControl("username").getText(),
						password: form.getControl("password").getText(),
						schemaUrl: form.getControl("schema").getText(),
						debug: debug() // true => debug output
				})		
}

// Return the openAPI schema - @TEST hardcoded for now
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	initialize();

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: "/schema",
			authUrl: form.getControl("authUrl").getText(),
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Update the dropdown with paths
function fetchItems() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")
	//alert("---> fetchItems");

	initialize();

	path = "paths";

    updateDropdown("path",
        [path],
        "Cannot fetch actions for Path");
        
	fetchActions()
}

// Update the dropdown with opera tions for the selected path
function fetchActions() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")
	
	initialize();
	
    var selectedItem = form.getControl("path").getText() || "";
	// alert("fetchActions() for " + selectedItem);

    updateDropdown("action",
        ["paths", selectedItem],
        "Cannot fetch actions for Path: " + selectedItem)
}

// Fetch the parameters (with descriptions) and populate the text box - appending to what is already there
function fetchParameters() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")

	var params = __schema.getParameters(form.getControl("path").getText(),
										form.getControl("action").getText());

	updateTextBox("parameters", params)
}

// Updating a textbox control
function updateTextBox(controlName, paramsArray) {
	// First get the existing value and parse it (if possible)
	var oldValue = form.getControl(controlName).getText().trim();
	var useParams = {};
	
	//alert("     paramsArray: " + paramsArray.length);
	
	// Go through the passed parameters and set those that are not already set
	for (var i = 0; i < paramsArray.length; i++) {
		var param = paramsArray[i];
		//alert("Found " + i + " " + param.name + ": " + param.description);
		if (param["in"] != "path") {
			// Add to the list if not something for the path itself
			useParams[param.name] = system.splitString(param.description, ".")[0]
									+ (system.splitString(param.description, ".")[1]);	
		}
	}
	
	// Parse the old text value into individual parameter settings and put in an Entry
	if (oldValue) {
		var lines = system.splitString(oldValue, "\n");
		for (var line in lines) {
			var parts = system.splitString(line, "=");
			if (parts.length > 1) {
				// Overwrite any discovered parameters with previously set values
				useParams[parts[0].trim()] = parts[1].trim();
			}
		}
	}
	
	alert("---- Final list of params: " + toJson(useParams))

	// Get the useParams property names (param names) and sort them
	var paramList = new java.util.ArrayList();
	for (var propName in useParams) {
		alert("    Adding " + propName)
		paramList.add(propName);
	}
	
	paramNames = paramList.toArray();
	java.util.Arrays.sort(paramNames);
	alert("    ParamNames: " + paramNames.length + " item(s)")

	var newParamText = "";
	for (var i = 0; i < paramNames.length; i++) {
		var paramName = paramNames[i];
		alert("    Getting " + paramName)
		newParamText += paramName + "=" + useParams[paramName] + "\n"
	}
	
	//alert(">>>> Setting Parameters value:\n" + newParamText);
	
	// Finally, update the control
	form.getControl(controlName).setText(newParamText)
}

// Update dropdown based api
function updateDropdown(controlName, path, errorMsg) {
    try {
    	alert("updateDropdown("
    			+ controlName
    			+ ", " + path + ", errmsg)");

	    initialize();
		
        if (!path) {
        	alert("updateDropdown() - Path parameter must be set");
        	return	
        };

        var subtree = __schema.getChildren(path);
        
        if (subtree == null) {
        	path.shift();
        	alert("Invalid item path: " + path.toString());
        	return
        }
        
		combo = form.getControl(controlName);
		combo.removeAll(); // Empty drop-down

		var arrList = java.util.ArrayList();
        for (var propName in subtree) {
        	arrList.add(propName);
        }
        var arr = arrList.toArray();
        java.util.Arrays.sort(arr);
    			
        for (var propName in arr) {
            //alert("   ..adding " + res);
            combo.add(propName)
        }

        alert("drop-down updated!");

        combo.select(0)

    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        alert(msg);
        throw msg
    }
}

// Empty out both Item and Object dropdowns
function clearDropdowns() {
	form.getControl("path").removeAll();
	form.getControl("action").removeAll()	
}

// For debugging from inside 
function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("_Restify/Log_" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]]]><![CDATA[></parameter>
        <parameter name="formscript"/>
        <parameter name="title">CONN_TITLE</parameter>
        <TranslationFile>NLS/idi_conn_scriptconn</TranslationFile>
    </Form>
</MetamergeConfig>]]></parameter>
                <parameter name="Action"/>
                <parameter name="Item"/>
                <parameter name="Object"/>
                <parameter name="Operation">servers</parameter>
                <parameter name="PathToObjects">paths</parameter>
                <parameter name="action">get</parameter>
                <parameter encrypted="true" name="apikey">P+LiSfxIRdyJTyrSg+YaKzaWBahxvOPaMcGBllfYWN4+Y2yQ16Te5Y74lrOe6pmgKYoeoP2T2Xo2Zc1nmgKhzSP2jPVBN4piwJghROdGabVOy4J96pLxlIxsqpPt/2Z26ockqso1+PBJxO/XVIb1X87wjlnN5mnhtJygmSk8Lfg=</parameter>
                <parameter name="authUrl">/itim/j_security_check</parameter>
                <parameter name="debug">false</parameter>
                <parameter name="includeFiles"/>
                <parameter name="includePrologs"><![CDATA[SCHEMA class
RESTCLIENT class]]></parameter>
                <parameter name="includeUIDs">true</parameter>
                <parameter name="item">/people</parameter>
                <parameter name="parameters"><![CDATA[attributes=name,rank,serialnumber
embedded=Specifies the comma-separated attributes to return for reference attributes of a user (eg manager)
forms=Specifies the boolean If true, then the form is returned for the user
security=max
]]></parameter>
                <parameter encrypted="true" name="password">iJMpd9pnrKCxSM6QcHRozJN2HD4hIkcng9q5AlTmHUBTYyJhbxCzBllhdiuFGR+FzcZ5aqoGEp2Ze8BFE4yuKDFljAw8gv+tS1K02fiq926hhCu3gJj7QTavHqdPId6Q5P/MEQ9V+yKR0/LcHnqp8g02VHBD9TWFDIxFTFbedzg=</parameter>
                <parameter name="path">/people/{personId}</parameter>
                <parameter name="queryMode">Data</parameter>
                <parameter name="schema">/schema</parameter>
                <parameter name="script"><![CDATA[// 20250104 2008 Initial
// 20250111 1915 Handling queryParameters in url
// 20250126 1901 Adding queryMode for querySchema to return either params, or schema of data
// 20250127 1346 initialize(), terminate(), selectEntries() and a test queryReply() in place
// 20250127	1854 maded querySchema drop the token in the parameters returned
// 20250128 1503 selectEntries and getNextEntry implemented - ready for more testing I'm sure :)
// 20250128 1705 Added the check for spoofing
// 20250128 2136 querySchema() can now return either parameters or data when you press Connect and Next in the Schema pane
// 20250130 1207 Hopefully now
// 20250130 1221 Fixing it in place in the Connector
// 20250131 1928 Gonna get querySchema to work right
// 20250131 2009 Now looking at getNextEntry() so I can return parameter descriptions with Connect + Next if querySchemaMode == Parameters
// 20250131 2033 Something still not right - alas, tomorrow
// 20250202 1313 Looking for my "entry not found" error when Connect while queryMode == Data
// 20250202 1407 Connect working for both settings!!!! 
// 20250202 1453 getNextEntry for Connect + Next now it's working!
// 20250207 1819 looking at selectEntries and getNextEntry, as well as findEntry, putEntry and modEntry. Tonight!!!
//          1917 Nope - manana
// 20250211 2024 Fixed mock server for people put, delete and servers - I hope
// 20250212 1142 Adding putEntry, deleteEntry and findEntry
// 20250214 1758 Finishing putEntry, deleteEntry and findEntry
// 20250214 1924 all Connector functions in place
// 20250219 1419 Removing Query Schema Mode 
// 20250219 2023 All connector modes supported except modify
//
// --- TODO Freetext parameter where all the standard set of parameter values can be set
//                                        
//
//						GLOBAL VARIABLES
//
var __parameters = {};						// params for the chosen path and action
var __debug = connector.getParam("debug");	// debug output?
var __schema = null;						// shared openAPI schema object (SCHEMA class)
var __initialized = false;					// Do I need this?
var __emptyEntry = system.newEntry();		// for craftQueryString
var __http = null; 							// for the RESTCLIENT we will use for the calls
var __resultSet = null;						// A container for returned entries (selectEntries/findEntry)
var __resultSetIndex = 0;					// Index into the result set
var __formEventCalling = false;

var __paramNames = {
	action: true,
	apikey: true,
	schema: true,
	authUrl: true,
	debug: true,
	path: true,
	password: true,
	url: true,
	username: true,
	item: true,
	action: true,
	searchCrit: true,
	includeUIDs: true,
	parameters: true
}

//
//							FUNCTIONS
//



function connParamField2Entry(connParams) {
	var paramsEntry = system.newEntry();
	var paramSetting = connParams.parameters;
	var lines = paramSetting.split(/\r?\n|\r/);
	for (var lineIndex = 0; lineIndex < lines.length; lineIndex++){
		var thisLine = lines[lineIndex];
		var parts = thisLine.split("=");
		var paramName = parts[0].trim();
		var paramValue = (parts.length > 1) ? parts[1].trim() : "";
		
		if (paramValue) {
			paramsEntry[paramName] = paramValue
		}
	}
	
	return paramsEntry
}

function craftQueryString(args) {
	var path = args.path;
	var action = args.action;
	var connParams = args.connParams;
	var useParams = args.epParams || {};
	var entry = args.entry || __emptyEntry;
	
	var embeddedUID = __schema.getEmbeddedUID(path);

	var paramsEntry = connParamField2Entry(connParams);
	
	var epParams = [];
	for (var i in useParams) {
		var param = useParams[i];
		var paramName = param.name;
		if (param["in"] == "query" || true) {
			if (entry[paramName] != null || paramsEntry[paramName] != null) {
				paramValue = paramsEntry[paramName] ? paramsEntry[paramName].getValue() : entry[paramName].getValue(0);
				if (paramValue != null) {
					epParams.push(paramName + "=" + paramValue)
				}
			}
		}	
	}
	
	return epParams.join("&")
}

function fixUrl(url) {
	if (!url.endsWith("/")) {
		return url + "/";
	} else {
		return url;
	}
}

function debug() {
	return __debug;
}

// Rest the connector and re-initialize it in case parameters have changed
function resetConnector() {
	__initialized = false;
	__resultSetIndex = 0;
	
	
	// Now zero out the __resultSet global ArrayList
	__resultSet = new java.util.ArrayList();

	if (typeof list != "undefined") list.clear(); // so it works while spoofing
	if (__http != null) __http.terminate();
	
	// Renew the RESTCLIENT with the currently set parameters
	if (!RESTCLIENT) eval(system.getScriptText("RESTCLIENT class"));
	__http = new RESTCLIENT({
						baseUrl:   __parameters.url,
						authUrl:   __parameters.authUrl,
						apikey:    __parameters.apikey,
						username:  __parameters.username,
						password:  __parameters.password,
						schemaUrl: __parameters.schema,
						debug: 	   debug() // true => debug output		
					})
}

// Change the URL path so the UID placeholder is replace with the Attribute value
function replaceUID(path, entry) {
	
}

// Turn the JS object returned from a call into the global entry object
function toEntry(obj, entry) {
	var connParams = refreshParameters();
	entry = entry || system.newEntry();

	//main.logmsg("toEntry() - includeUIDs: " + connector.getParam("includeUIDs"))
	
	for (var propName in obj) {
		// skip _links
		if (propName.equalsIgnoreCase("_links") && !connParams.includeUIDs) continue;
		for (var subPropName in obj[propName]) {
			if (typeof(subPropName) != "string") {
				//main.logmsg("toEntry() - !!!!!!!! subPropName not string: " + subPropName);
			} else {
				var newVal = beautifyValue(obj[propName][subPropName]);
				/*
				var prepend = (propName.equalsIgnoreCase("_links") ? propName + "_" : "");
				
				// For _links we must prepend the propName to the Attribute name
				subPropName = prepend + subPropName;
				*/
				if (newVal.toLowerCase().startsWith("erglobalid=")) {
					//main.logmsg("FOUND erglobalid value for " + subPropName)
					if (!connParams.includeUIDs) continue;	
				}
				
				//main.logmsg("toEntry() - adding " + subPropName + " - " + obj[propName][subPropName]);
				entry[subPropName] = newVal
			}
		}
	}
	
	//main.logmsg("toEntry - Complete: \n" + entry)
	
	return entry // Not necessary, since entry is global in the Connector context - I just like doing it :)
}

function debugMsg(msg) {
	if (__debug) {
//		task.logmsg(msg);
		main.logmsg(msg);
		java.lang.System.out.println(msg)
	}
}

function alertObject(objName, obj) {
	debugMsg("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	debugMsg(arr.toString())
}

// Return the openAPI schema
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: __parameters.schema,
			authUrl: __parameters.authUrl,
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Parse the openAPI schema
function parseSchema() {
	if (__schema) return __schema;

	// @@TODO Make actual call
	debugMsg("Fetching schema...")
	//var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	//var schemaJSON = fetchSchema();

	//debugMsg("Creating SCHEMA object");
	__schema = fetchSchema();

	//var toplvl = "";
	//for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
	//debugMsg("SCHEMA -> " + toplvl)

	//debugMsg("Got it!");
	return __schema
}

function refreshParameters() {
	var path = connector.getParam("path");
	//if (!path) throw new java.lang.RuntimeException("Path parameter has not been set")
	var action = connector.getParam("action");
	// if (!action) throw new java.lang.RuntimeException("Action parameter has not been set")

	__parameters = {};
	
	for (var paramName in __paramNames) {
		//java.lang.System.out.println("> " + paramName);
		__parameters[paramName] = connector.getParam(paramName);
	}
	
	return __parameters
}

function beautifyValue(val) {
	//main.logmsg("beautifyValue() - " + val);
	if (typeof(val) != "object") return val;
	
	try {
		var newVal = toJson(val);
		
		//main.logmsg("!!! It IS JSON !!!");
		if (val.description) newVal = val.description;
		//main.logmsg("--- Returning: '" + newVal + "'");
		return newVal;
	} catch (ex) {
		return val
	}
}

// Figure out which endpoint param is for the base path and grab the value from the entry
// If the entry passed is null, then don't go looking for the Attribute
function extractUID(entry, epParams, connParams) {
	var uid = null;
	var uidAttName = null;

	for (var i in epParams) {
		var param = epParams[i];
		if (param["in"] == "path") {
			uidAttName = param.name;
			break
		}
	}
	
	if (!entry) {
		uid = "*not gonna be used for anything*"
	} else
	if (uidAttName) {
		var uidAtt = entry[uidAttName];
		if (uidAtt) uid = uidAtt.getValue(0)
	}
	
	if (!uid) throw new java.lang.Exception("The UID attribute must be mapped out: " + uidAttName)
	
	return {
		value: uid,
		name: uidAttName
	}
}

// Local function (for some reason)
function getParameters(path, action) {
	return __schema.getParameters(path, action)
}

// Here too
function replaceEmbeddedUID(path, entryUID) {
	return __schema.replaceEmbeddedUID(path, entryUID)
}



//
// -------  Standard Connector functions 
//




function initialize() {
	refreshParameters();
	resetConnector();
	parseSchema()
}

function terminate() {
}

// CallReply function
function queryReply() {
	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// Embed mapped parameters into the path
	java.lang.System.out.println("queryReply() - entry: " + entry);
	// main.logmsg("queryReply() - entry: " + entry);
	
	var usePath = replaceEmbeddedUID(connParams.path, entry);

	// Now for queryParameters
	var queryString = craftQueryString({
		path: usePath,
		connParams: connParams,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	try {
		// Make the REST call @@TODO Only does GET for now
		var reply = __http.makeRequest({
				verb: "GET", // @@TODO Must figure out how to set the HTTP verb based on the schema
				url: usePath + queryString,
				ctype: "application/json",
				where: "queryReply()"
		});
	
		java.lang.System.out.println("Reply: " + entry.fromJSON(toJson(reply)));
	
		toEntry(reply, entry);
		return entry
	} catch (ex) {
		task.logmsg("ERROR", ex);
		return null
	}	
}

// Since this function is being double-purposed, to also retrieve parameters for the Schema pane
// I have to add more logic that is not necessary for normal connector operations.
function selectEntries(queryMode) {
	queryMode = queryMode || "Data"; // defaults to data
	// Clear out the selected array of entries and set the index to 0
	__resultSetIndex = 0;
	if (typeof(form) == "undefined") __resultSet.clear();
	
	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// So this code works in my testScriptConnectorCode AL
	if (typeof(entry) == "undefined") var entry = system.newEntry();
	
	// Return either the parameters from the path + action from the openAPI schema, which means 
	// you can use Connect + Next to list all available parameters w/ descriptions...
	if (connParams.queryMode == "Parameters" || typeof(task) == "undefined") {
		var restParams = getParameters(connParams.path, connParams.action);
		
		for (var i in restParams) {
			var paramName = restParams[i].name;
			//main.logmsg("getNextEntry() - " + paramName + " - " + beautifyValue(restParams[i]))
			entry[paramName] = beautifyValue(restParams[i]);
		}
		
		__resultSet.add(entry)
	} else {
		// ...else work like getNextEntry() usually does and return data
		
		// This the search filter parameter in the Connections tab
		var personId = connParams.searchCrit;
		if (!personId) throw java.lang.Exception("Search criteria (personId) must be configured")
		
		// Get the path and replace id's as required
		var usePath = replaceEmbeddedUID(connParams.path, personId);
	
		// Now for queryParameters
		var queryString = craftQueryString({
			connParams: connParams,
			path: usePath,
			epParams: epParams,
			action: connParams.action,
			entry: entry
		});
		
		// If there is a queryString, prepend it with ?
		queryString = queryString ? "?" + queryString : "";
		
		//main.logmsg("selectEntries for Data - making call");
		
		try {
			// Make the REST call @@TODO Only does GET for now
			var reply = __http.makeRequest({
					verb: "GET", // @@TODO Must figure out how to set the HTTP verb based on the schema
					url: usePath + queryString,
					ctype: "application/json",
					where: "queryReply()"
			});
		
			//main.logmsg("selectEntries for Data - Reply: " + com.ibm.di.entry.Entry.fromJSON(toJson(reply)));
	
			// Update the global 'entry' variable with these values
			var entry = toEntry(reply);
			
			//main.logmsg("selectEntries for Data - toEntry(): " + entry);
	
			var resultEntry = system.newEntry();
			resultEntry.merge(entry);
			__resultSet.add(resultEntry)
		} catch (ex) {
			task.logmsg("ERROR", ex)
		}	
	}
	return __resultSet	
}

function getNextEntry() {
	//main.logmsg("@@getNextEntry - remaining in buffer: " + __resultSet.size());
	if (__resultSetIndex >= __resultSet.size()) {
		result.setStatus(0);
		return null;
	}

	if (typeof(entry) == "undefined") entry = system.newEntry(); // only for testing
	
	//main.logmsg("getNextEntry() - getting index " + __resultSetIndex);
	entry.merge(__resultSet.get(__resultSetIndex));
	__resultSetIndex++;

	result.setStatus(1);
	//main.logmsg("@@getNextEntry: " + entry);
	return entry
}

function putEntry(entryArg) {
	// entryArg is optional and is for easier testing
	entry = entry || entryArg;
	
	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// Now for queryParameters
	var queryString = craftQueryString({
		connParams: connParams,
		path: usePath,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// Check parameters for the one in the path(base) - the UID
	var uidObj = extractUID(entry, epParams, connParams);
	
	var entryUID = uidObj.value;
	var entryUIDattName = uidObj.name;
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Get the path and replace id's as required
	var usePath = replaceEmbeddedUID(connParams.path, entryUID);

	//main.logmsg("putEntry - making call");

	try {	
		// Make the REST call 
		var reply = __http.makeRequest({
				verb: "POST",
				url: usePath + queryString,
				ctype: "application/json",
				where: "putEntry()",
				body: entry.toJSON()
		});
	
		//main.logmsg("selectEntries for Data - Reply: " + com.ibm.di.entry.Entry.fromJSON(toJson(reply)));
	
		//var resultEntry = toEntry(reply);
		//task.logmsg("putEntry() - " + entry.fromJSON(toJson(reply)));
		
		return entry
	} catch (ex) {
		task.logmsg("ERROR", ex);
		return null
	}	
}

function modEntry() {
	throw new java.lang.Exception("The modify operation is not supported in the current API version")
}

function deleteEntry(entryArg) {
	// entryArg is optional and is for easier testing
	entry = entry || entryArg;
	
	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// Now for queryParameters
	var queryString = craftQueryString({
		connParams: connParams,
		path: usePath,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// Check parameters for the one in the path(base) - the UID
	var uidObj = extractUID(null, epParams, connParams);
	
	var entryUID = uidObj.value;
	var entryUIDattName = uidObj.name;
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Get the path and replace id's as required
	var usePath = replaceEmbeddedUID(connParams.path, entryUID);

	try {	
		// Make the REST call 
		var reply = __http.makeRequest({
				verb: "DELETE",
				url: usePath + queryString,
				ctype: "application/json",
				where: "putEntry()",
				body: entry.toJSON()
		});
	
		return entry
	} catch (ex) {
		task.logmsg("ERROR", ex);
		return null
	}	
}

// Finding an entry only works as direct read using the UID
function findEntry(searchCriteria) {
	// Allows you to pass in the search criteria for easier testing	
	searchCriteria = searchCriteria || search;

	var critValue,
		critName;
	var critMatch = com.ibm.di.server.SearchCriteria.EXACT;
	var crit = searchCriteria.getScriptFilter();

	// Always get the latest parameter settings
	var connParams = refreshParameters();
	// Get the parameters for this path + actoin
	var epParams = getParameters(connParams.path, connParams.action);
	
	// Check parameters for the one in the path(base) - the UID
	uidObj = extractUID(null, epParams, connParams); // Passing null for the first argument stifles any "UID must be mapped" problems
	
	// If there is a scripted filter then use this
	if (crit) {
		var parts = system.splitString(crit, "="); // @@TODO No need to handle other operators - for now :)
		if (parts.length >= 2) {
			critName = parts[0].trim();
			critValue = parts[1].trim();
			critValue = system.remove("\"\'", (critValue || "")) // Remove quotes from the value
		} else {
			critName = uidObj.name;
			critValue = crit
		}

		// Set up the criteria
		crit = {
			name: critName,
			match: critMatch,
			value: critValue
		}
	} 
	else { // If no scripted filter, then grab the first Link Criteria //@@TODO Again, only handling one Link Crit for now
		try {
			crit = searchCriteria.getCriteria(0);
		} catch (ex) {
			throw new java.lang.Exception("You must configure at least one Link Criteria, or provide a script filter")
		}
	}

	// Now check that the attribute name in the filter is the UID parameter name from the OpenAPI schema
	if (!crit.name.equalsIgnoreCase(uidObj.name)) {
		throw new java.lang.Exception("Search criteria must be for the UID attribute: " + uidObj.name)
	}
	
	// Now for queryParameters
	var queryString = craftQueryString({
		connParams: connParams,
		path: usePath,
		epParams: epParams,
		action: connParams.action,
		entry: entry
	});
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Get the path and replace id's as required
	var entryUID = crit.value;
	var usePath = replaceEmbeddedUID(connParams.path, entryUID);

	//main.logmsg("putEntry - making call");

	try {	
		// Make the REST call 
		var reply = __http.makeRequest({
				verb: "GET",
				url: usePath + queryString,
				ctype: "application/json",
				where: "findEntry()"
		});
	
		//main.logmsg("selectEntries for Data - Reply: " + com.ibm.di.entry.Entry.fromJSON(toJson(reply)));
	
		resultEntry = toEntry(reply);
		entry.merge(resultEntry);
		
		result.setStatus(1);
		return entry
	} catch (ex) {
		task.logmsg("ERROR", ex);
		result.setStatus(0);
		return null
	}	
}

function querySchema(queryMode) {
	queryMode = queryMode || "Data"; // Defaults to "Data"
	
	//main.logmsg("@@querySchema...");
	var connParams = refreshParameters();
	var path = connParams.path;
	var action = connParams.action;
	
	list.clear(); // For use in the _testScriptConnectorCode
	
	if (connParams.queryMode == "Parameters" /* || typeof(task) == "undefined" */ ) {
/* don't think this is needed
		var embeddedParameter = getEmbeddedUID(path);
		if (embeddedParameter) {
			var e = system.newEntry();
			e.name = embeddedParameter;
			e.syntax = "MUST/uid";
			e.required = true;
			e.mandatory = true;
			list.add(e)
		}
*/
		var parameters = getParameters(path, action);
	
		for (var i in parameters) {
			var param = parameters[i];
	   
			if (param.name.equalsIgnoreCase("CSRFToken")) continue;
			
			var e = system.newEntry();
			e.name = param.name;
			e.syntax = "MUST/" + param.schema.type;
			e.required = true;
			e.mandatory = true;
			//main.logmsg("@@adding " + param.name);
			list.add(e)
		}
	} else { // queryMode is "Data"
		selectEntries();
		var dataEntry = getNextEntry();
		// Remember to reset the index to the result set for any getNextEntry() called after
		__resultSetIndex = Math.min(0, __resultSetIndex - 1);
		
		
		for (var att in dataEntry) {
			if (att instanceof com.ibm.di.entry.Entry) { // This is one of the links
				var name = "link_";
				throw "OOOOOOPS!! Connector Script line 373"
			} else {
				var name = att.getName();
				var val = att.getValue(0);
				
				//main.logmsg("querySchema() adding " + name + " - " + val);
				
				e = system.newEntry();
				e.name = name;
				e.syntax = typeof(val);
				list.add(e)
			}	
		}
	}

	result.setStatus(1);
	return list
}]]></parameter>
                <parameter name="searchCrit">NO12345</parameter>
                <parameter name="url">http://localhost:8080</parameter>
                <parameter name="username">edbird</parameter>
            </Configuration>
            <Parser>
                <InheritFrom>[parent]</InheritFrom>
            </Parser>
            <AttributeMap name="Input">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <AttributeMap name="Output">
                <InheritFrom>[parent]</InheritFrom>
            </AttributeMap>
            <DeltaSettings>
                <UniqueAttribute/>
                <WhenToCommit>After every database operation</WhenToCommit>
                <RowLocking>SERIALIZABLE</RowLocking>
                <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
            </DeltaSettings>
            <Schema name="Input">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1739555301141</ModTime>
            </Schema>
            <Schema name="Output">
                <InheritFrom>[parent]</InheritFrom>
                <ModTime>1739287790828</ModTime>
                <SchemaItem>
                    <Name>CSRFToken</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>_links_erparent</Name>
                    <Syntax>com.ibm.jscript.std.ObjectObject</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>_links_formTemplate</Name>
                    <Syntax>com.ibm.jscript.std.ObjectObject</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>_links_manager</Name>
                    <Syntax>com.ibm.jscript.std.ObjectObject</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>_links_self</Name>
                    <Syntax>com.ibm.jscript.std.ObjectObject</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>attributes</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>cn</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>counter</Name>
                    <Syntax>java.lang.Integer</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>embedded</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>ercustomdisplay</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>erparent</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>erpersonstatus</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>ersupervisor</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>forms</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>givenname</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>mail</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>manager</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>name</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>personId</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>personType</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>self</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>sn</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
                <SchemaItem>
                    <Name>uid</Name>
                    <Syntax>java.lang.String</Syntax>
                </SchemaItem>
            </Schema>
            <LinkCriteria>
                <InheritFrom>[parent]</InheritFrom>
            </LinkCriteria>
            <Hooks>
                <InheritFrom>[parent]</InheritFrom>
            </Hooks>
            <CheckpointConfig/>
            <SandboxConfig/>
            <Reconnect>
                <InheritFrom>[parent]</InheritFrom>
                <ReconnectRules/>
            </Reconnect>
            <Operations/>
            <PoolDefinition>
                <InheritFrom>[parent]</InheritFrom>
                <Enabled>false</Enabled>
                <MinPoolSize>0</MinPoolSize>
                <MaxPoolSize>0</MaxPoolSize>
                <PurgeInterval>0</PurgeInterval>
                <InitializeAttempts>1</InitializeAttempts>
                <InitializeSleepInterval>0</InitializeSleepInterval>
            </PoolDefinition>
            <PoolInstance/>
        </Connector>
    </Folder>
    <Folder name="Parsers"/>
    <Folder name="Scripts">
        <Script name="exampleOpenAPISchemaJson">
            <ModTime>1731856312606</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Swagger Petstore",
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v1"
    }
  ],
  "paths": {
    "/pets": {
      "get": {
        "summary": "List all pets",
        "operationId": "listPets",
        "tags": ["pets"],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An paged array of pets",
            "headers": {
              "x-next": {
                "description": "A link to the next page of responses",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pets"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a pet",
        "operationId": "createPets",
        "tags": ["pets"],
        "responses": {
          "201": {
            "description": "Null response"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/pets/{petId}": {
      "get": {
        "summary": "Info for a specific pet",
        "operationId": "showPetById",
        "tags": ["pets"],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "description": "The id of the pet to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pets"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Pet": {
        "required": ["id", "name"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          }
        }
      },
      "Pets": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Pet"
        }
      },
      "Error": {
        "required": ["code", "message"],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  }
}]]></parameter>
        </Script>
        <Script name="exampleOpenAPISchemaYAML">
            <ModTime>1731855960889</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: An paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      responses:
        201:
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string]]></parameter>
        </Script>
    <Script name="exampleGoogleSchemaJSON">
            <ModTime>1732108819818</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[{
  "name": "gmail",
  "baseUrl": "https://gmail.googleapis.com/",
  "id": "gmail:v1",
  "revision": "20241111",
  "ownerDomain": "google.com",
  "mtlsRootUrl": "https://gmail.mtls.googleapis.com/",
  "title": "Gmail API",
  "rootUrl": "https://gmail.googleapis.com/",
  "version": "v1",
  "description": "The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.",
  "discoveryVersion": "v1",
  "canonicalName": "Gmail",
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://mail.google.com/": {
          "description": "Read, compose, send, and permanently delete all your email from Gmail"
        },
        "https://www.googleapis.com/auth/gmail.addons.current.action.compose": {
          "description": "Manage drafts and send emails when you interact with the add-on"
        },
        "https://www.googleapis.com/auth/gmail.addons.current.message.action": {
          "description": "View your email messages when you interact with the add-on"
        },
        "https://www.googleapis.com/auth/gmail.addons.current.message.metadata": {
          "description": "View your email message metadata when the add-on is running"
        },
        "https://www.googleapis.com/auth/gmail.addons.current.message.readonly": {
          "description": "View your email messages when the add-on is running"
        },
        "https://www.googleapis.com/auth/gmail.compose": {
          "description": "Manage drafts and send emails"
        },
        "https://www.googleapis.com/auth/gmail.insert": {
          "description": "Add emails into your Gmail mailbox"
        },
        "https://www.googleapis.com/auth/gmail.labels": {
          "description": "See and edit your email labels"
        },
        "https://www.googleapis.com/auth/gmail.metadata": {
          "description": "View your email message metadata such as labels and headers, but not the email body"
        },
        "https://www.googleapis.com/auth/gmail.modify": {
          "description": "Read, compose, and send emails from your Gmail account"
        },
        "https://www.googleapis.com/auth/gmail.readonly": {
          "description": "View your email messages and settings"
        },
        "https://www.googleapis.com/auth/gmail.send": {
          "description": "Send email on your behalf"
        },
        "https://www.googleapis.com/auth/gmail.settings.basic": {
          "description": "See, edit, create, or change your email settings and filters in Gmail"
        },
        "https://www.googleapis.com/auth/gmail.settings.sharing": {
          "description": "Manage your sensitive mail settings, including who can manage your mail"
        }
      }
    }
  },
  "ownerName": "Google",
  "resources": {
    "users": {
      "methods": {
        "getProfile": {
          "id": "gmail.users.getProfile",
          "path": "gmail/v1/users/{userId}/profile",
          "flatPath": "gmail/v1/users/{userId}/profile",
          "httpMethod": "GET",
          "parameters": {
            "userId": {
              "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
              "default": "me",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "userId"
          ],
          "response": {
            "$ref": "Profile"
          },
          "scopes": [
            "https://mail.google.com/",
            "https://www.googleapis.com/auth/gmail.compose",
            "https://www.googleapis.com/auth/gmail.metadata",
            "https://www.googleapis.com/auth/gmail.modify",
            "https://www.googleapis.com/auth/gmail.readonly"
          ],
          "description": "Gets the current user's Gmail profile."
        },
        "watch": {
          "id": "gmail.users.watch",
          "path": "gmail/v1/users/{userId}/watch",
          "flatPath": "gmail/v1/users/{userId}/watch",
          "httpMethod": "POST",
          "parameters": {
            "userId": {
              "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
              "default": "me",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "userId"
          ],
          "request": {
            "$ref": "WatchRequest"
          },
          "response": {
            "$ref": "WatchResponse"
          },
          "scopes": [
            "https://mail.google.com/",
            "https://www.googleapis.com/auth/gmail.metadata",
            "https://www.googleapis.com/auth/gmail.modify",
            "https://www.googleapis.com/auth/gmail.readonly"
          ],
          "description": "Set up or update a push notification watch on the given user mailbox."
        },
        "stop": {
          "id": "gmail.users.stop",
          "path": "gmail/v1/users/{userId}/stop",
          "flatPath": "gmail/v1/users/{userId}/stop",
          "httpMethod": "POST",
          "parameters": {
            "userId": {
              "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
              "default": "me",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "userId"
          ],
          "scopes": [
            "https://mail.google.com/",
            "https://www.googleapis.com/auth/gmail.metadata",
            "https://www.googleapis.com/auth/gmail.modify",
            "https://www.googleapis.com/auth/gmail.readonly"
          ],
          "description": "Stop receiving push notifications for the given user mailbox."
        }
      },
      "resources": {
        "drafts": {
          "methods": {
            "delete": {
              "id": "gmail.users.drafts.delete",
              "path": "gmail/v1/users/{userId}/drafts/{id}",
              "flatPath": "gmail/v1/users/{userId}/drafts/{id}",
              "httpMethod": "DELETE",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the draft to delete.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.addons.current.action.compose",
                "https://www.googleapis.com/auth/gmail.compose",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Immediately and permanently deletes the specified draft. Does not simply trash it."
            },
            "create": {
              "id": "gmail.users.drafts.create",
              "path": "gmail/v1/users/{userId}/drafts",
              "flatPath": "gmail/v1/users/{userId}/drafts",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "supportsMediaUpload": true,
              "mediaUpload": {
                "accept": [
                  "message/*"
                ],
                "maxSize": "36700160",
                "protocols": {
                  "resumable": {
                    "multipart": true,
                    "path": "/resumable/upload/gmail/v1/users/{userId}/drafts"
                  },
                  "simple": {
                    "multipart": true,
                    "path": "/upload/gmail/v1/users/{userId}/drafts"
                  }
                }
              },
              "request": {
                "$ref": "Draft"
              },
              "response": {
                "$ref": "Draft"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.addons.current.action.compose",
                "https://www.googleapis.com/auth/gmail.compose",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Creates a new draft with the `DRAFT` label."
            },
            "get": {
              "id": "gmail.users.drafts.get",
              "path": "gmail/v1/users/{userId}/drafts/{id}",
              "flatPath": "gmail/v1/users/{userId}/drafts/{id}",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the draft to retrieve.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "format": {
                  "description": "The format to return the draft in.",
                  "default": "full",
                  "location": "query",
                  "type": "string",
                  "enumDescriptions": [
                    "Returns only email message ID and labels; does not return the email headers, body, or payload.",
                    "Returns the full email message data with body content parsed in the `payload` field; the `raw` field is not used. Format cannot be used when accessing the api using the gmail.metadata scope.",
                    "Returns the full email message data with body content in the `raw` field as a base64url encoded string; the `payload` field is not used. Format cannot be used when accessing the api using the gmail.metadata scope.",
                    "Returns only email message ID, labels, and email headers."
                  ],
                  "enum": [
                    "minimal",
                    "full",
                    "raw",
                    "metadata"
                  ]
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "response": {
                "$ref": "Draft"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.compose",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly"
              ],
              "description": "Gets the specified draft."
            },
            "list": {
              "id": "gmail.users.drafts.list",
              "path": "gmail/v1/users/{userId}/drafts",
              "flatPath": "gmail/v1/users/{userId}/drafts",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "maxResults": {
                  "description": "Maximum number of drafts to return. This field defaults to 100. The maximum allowed value for this field is 500.",
                  "default": "100",
                  "location": "query",
                  "type": "integer",
                  "format": "uint32"
                },
                "pageToken": {
                  "description": "Page token to retrieve a specific page of results in the list.",
                  "location": "query",
                  "type": "string"
                },
                "q": {
                  "description": "Only return draft messages matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`.",
                  "location": "query",
                  "type": "string"
                },
                "includeSpamTrash": {
                  "description": "Include drafts from `SPAM` and `TRASH` in the results.",
                  "default": "false",
                  "location": "query",
                  "type": "boolean"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "ListDraftsResponse"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.compose",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly"
              ],
              "description": "Lists the drafts in the user's mailbox."
            },
            "send": {
              "id": "gmail.users.drafts.send",
              "path": "gmail/v1/users/{userId}/drafts/send",
              "flatPath": "gmail/v1/users/{userId}/drafts/send",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "supportsMediaUpload": true,
              "mediaUpload": {
                "accept": [
                  "message/*"
                ],
                "maxSize": "36700160",
                "protocols": {
                  "resumable": {
                    "multipart": true,
                    "path": "/resumable/upload/gmail/v1/users/{userId}/drafts/send"
                  },
                  "simple": {
                    "multipart": true,
                    "path": "/upload/gmail/v1/users/{userId}/drafts/send"
                  }
                }
              },
              "request": {
                "$ref": "Draft"
              },
              "response": {
                "$ref": "Message"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.addons.current.action.compose",
                "https://www.googleapis.com/auth/gmail.compose",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Sends the specified, existing draft to the recipients in the `To`, `Cc`, and `Bcc` headers."
            },
            "update": {
              "id": "gmail.users.drafts.update",
              "path": "gmail/v1/users/{userId}/drafts/{id}",
              "flatPath": "gmail/v1/users/{userId}/drafts/{id}",
              "httpMethod": "PUT",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the draft to update.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "supportsMediaUpload": true,
              "mediaUpload": {
                "accept": [
                  "message/*"
                ],
                "maxSize": "36700160",
                "protocols": {
                  "resumable": {
                    "multipart": true,
                    "path": "/resumable/upload/gmail/v1/users/{userId}/drafts/{id}"
                  },
                  "simple": {
                    "multipart": true,
                    "path": "/upload/gmail/v1/users/{userId}/drafts/{id}"
                  }
                }
              },
              "request": {
                "$ref": "Draft"
              },
              "response": {
                "$ref": "Draft"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.addons.current.action.compose",
                "https://www.googleapis.com/auth/gmail.compose",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Replaces a draft's content."
            }
          }
        },
        "history": {
          "methods": {
            "list": {
              "id": "gmail.users.history.list",
              "path": "gmail/v1/users/{userId}/history",
              "flatPath": "gmail/v1/users/{userId}/history",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "maxResults": {
                  "description": "Maximum number of history records to return. This field defaults to 100. The maximum allowed value for this field is 500.",
                  "default": "100",
                  "location": "query",
                  "type": "integer",
                  "format": "uint32"
                },
                "pageToken": {
                  "description": "Page token to retrieve a specific page of results in the list.",
                  "location": "query",
                  "type": "string"
                },
                "startHistoryId": {
                  "description": "Required. Returns history records after the specified `startHistoryId`. The supplied `startHistoryId` should be obtained from the `historyId` of a message, thread, or previous `list` response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date `startHistoryId` typically returns an `HTTP 404` error code. A `historyId` is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an `HTTP 404` error response, your application should perform a full sync. If you receive no `nextPageToken` in the response, there are no updates to retrieve and you can store the returned `historyId` for a future request.",
                  "location": "query",
                  "type": "string",
                  "format": "uint64"
                },
                "labelId": {
                  "description": "Only return messages with a label matching the ID.",
                  "location": "query",
                  "type": "string"
                },
                "historyTypes": {
                  "description": "History types to be returned by the function",
                  "location": "query",
                  "repeated": true,
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "",
                    "",
                    ""
                  ],
                  "enum": [
                    "messageAdded",
                    "messageDeleted",
                    "labelAdded",
                    "labelRemoved"
                  ]
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "ListHistoryResponse"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.metadata",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly"
              ],
              "description": "Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing `historyId`)."
            }
          }
        },
        "messages": {
          "methods": {
            "trash": {
              "id": "gmail.users.messages.trash",
              "path": "gmail/v1/users/{userId}/messages/{id}/trash",
              "flatPath": "gmail/v1/users/{userId}/messages/{id}/trash",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the message to Trash.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "response": {
                "$ref": "Message"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Moves the specified message to the trash."
            },
            "untrash": {
              "id": "gmail.users.messages.untrash",
              "path": "gmail/v1/users/{userId}/messages/{id}/untrash",
              "flatPath": "gmail/v1/users/{userId}/messages/{id}/untrash",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the message to remove from Trash.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "response": {
                "$ref": "Message"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Removes the specified message from the trash."
            },
            "delete": {
              "id": "gmail.users.messages.delete",
              "path": "gmail/v1/users/{userId}/messages/{id}",
              "flatPath": "gmail/v1/users/{userId}/messages/{id}",
              "httpMethod": "DELETE",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the message to delete.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "scopes": [
                "https://mail.google.com/"
              ],
              "description": "Immediately and permanently deletes the specified message. This operation cannot be undone. Prefer `messages.trash` instead."
            },
            "batchDelete": {
              "id": "gmail.users.messages.batchDelete",
              "path": "gmail/v1/users/{userId}/messages/batchDelete",
              "flatPath": "gmail/v1/users/{userId}/messages/batchDelete",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "request": {
                "$ref": "BatchDeleteMessagesRequest"
              },
              "scopes": [
                "https://mail.google.com/"
              ],
              "description": "Deletes many messages by message ID. Provides no guarantees that messages were not already deleted or even existed at all."
            },
            "import": {
              "id": "gmail.users.messages.import",
              "path": "gmail/v1/users/{userId}/messages/import",
              "flatPath": "gmail/v1/users/{userId}/messages/import",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "internalDateSource": {
                  "description": "Source for Gmail's internal date of the message.",
                  "default": "dateHeader",
                  "location": "query",
                  "type": "string",
                  "enumDescriptions": [
                    "Internal message date set to current time when received by Gmail.",
                    "Internal message time based on 'Date' header in email, when valid."
                  ],
                  "enum": [
                    "receivedTime",
                    "dateHeader"
                  ]
                },
                "neverMarkSpam": {
                  "description": "Ignore the Gmail spam classifier decision and never mark this email as SPAM in the mailbox.",
                  "default": "false",
                  "location": "query",
                  "type": "boolean"
                },
                "processForCalendar": {
                  "description": "Process calendar invites in the email and add any extracted meetings to the Google Calendar for this user.",
                  "default": "false",
                  "location": "query",
                  "type": "boolean"
                },
                "deleted": {
                  "description": "Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts.",
                  "default": "false",
                  "location": "query",
                  "type": "boolean"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "supportsMediaUpload": true,
              "mediaUpload": {
                "accept": [
                  "message/*"
                ],
                "maxSize": "52428800",
                "protocols": {
                  "resumable": {
                    "multipart": true,
                    "path": "/resumable/upload/gmail/v1/users/{userId}/messages/import"
                  },
                  "simple": {
                    "multipart": true,
                    "path": "/upload/gmail/v1/users/{userId}/messages/import"
                  }
                }
              },
              "request": {
                "$ref": "Message"
              },
              "response": {
                "$ref": "Message"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.insert",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Imports a message into only this user's mailbox, with standard email delivery scanning and classification similar to receiving via SMTP. This method doesn't perform SPF checks, so it might not work for some spam messages, such as those attempting to perform domain spoofing. This method does not send a message."
            },
            "insert": {
              "id": "gmail.users.messages.insert",
              "path": "gmail/v1/users/{userId}/messages",
              "flatPath": "gmail/v1/users/{userId}/messages",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "internalDateSource": {
                  "description": "Source for Gmail's internal date of the message.",
                  "default": "receivedTime",
                  "location": "query",
                  "type": "string",
                  "enumDescriptions": [
                    "Internal message date set to current time when received by Gmail.",
                    "Internal message time based on 'Date' header in email, when valid."
                  ],
                  "enum": [
                    "receivedTime",
                    "dateHeader"
                  ]
                },
                "deleted": {
                  "description": "Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts.",
                  "default": "false",
                  "location": "query",
                  "type": "boolean"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "supportsMediaUpload": true,
              "mediaUpload": {
                "accept": [
                  "message/*"
                ],
                "maxSize": "52428800",
                "protocols": {
                  "resumable": {
                    "multipart": true,
                    "path": "/resumable/upload/gmail/v1/users/{userId}/messages"
                  },
                  "simple": {
                    "multipart": true,
                    "path": "/upload/gmail/v1/users/{userId}/messages"
                  }
                }
              },
              "request": {
                "$ref": "Message"
              },
              "response": {
                "$ref": "Message"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.insert",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Directly inserts a message into only this user's mailbox similar to `IMAP APPEND`, bypassing most scanning and classification. Does not send a message."
            },
            "get": {
              "id": "gmail.users.messages.get",
              "path": "gmail/v1/users/{userId}/messages/{id}",
              "flatPath": "gmail/v1/users/{userId}/messages/{id}",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the message to retrieve. This ID is usually retrieved using `messages.list`. The ID is also contained in the result when a message is inserted (`messages.insert`) or imported (`messages.import`).",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "format": {
                  "description": "The format to return the message in.",
                  "default": "full",
                  "location": "query",
                  "type": "string",
                  "enumDescriptions": [
                    "Returns only email message ID and labels; does not return the email headers, body, or payload.",
                    "Returns the full email message data with body content parsed in the `payload` field; the `raw` field is not used. Format cannot be used when accessing the api using the gmail.metadata scope.",
                    "Returns the full email message data with body content in the `raw` field as a base64url encoded string; the `payload` field is not used. Format cannot be used when accessing the api using the gmail.metadata scope.",
                    "Returns only email message ID, labels, and email headers."
                  ],
                  "enum": [
                    "minimal",
                    "full",
                    "raw",
                    "metadata"
                  ]
                },
                "metadataHeaders": {
                  "description": "When given and format is `METADATA`, only include headers specified.",
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "response": {
                "$ref": "Message"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.addons.current.message.action",
                "https://www.googleapis.com/auth/gmail.addons.current.message.metadata",
                "https://www.googleapis.com/auth/gmail.addons.current.message.readonly",
                "https://www.googleapis.com/auth/gmail.metadata",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly"
              ],
              "description": "Gets the specified message."
            },
            "send": {
              "id": "gmail.users.messages.send",
              "path": "gmail/v1/users/{userId}/messages/send",
              "flatPath": "gmail/v1/users/{userId}/messages/send",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "supportsMediaUpload": true,
              "mediaUpload": {
                "accept": [
                  "message/*"
                ],
                "maxSize": "36700160",
                "protocols": {
                  "resumable": {
                    "multipart": true,
                    "path": "/resumable/upload/gmail/v1/users/{userId}/messages/send"
                  },
                  "simple": {
                    "multipart": true,
                    "path": "/upload/gmail/v1/users/{userId}/messages/send"
                  }
                }
              },
              "request": {
                "$ref": "Message"
              },
              "response": {
                "$ref": "Message"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.addons.current.action.compose",
                "https://www.googleapis.com/auth/gmail.compose",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.send"
              ],
              "description": "Sends the specified message to the recipients in the `To`, `Cc`, and `Bcc` headers. For example usage, see [Sending email](https://developers.google.com/gmail/api/guides/sending)."
            },
            "list": {
              "id": "gmail.users.messages.list",
              "path": "gmail/v1/users/{userId}/messages",
              "flatPath": "gmail/v1/users/{userId}/messages",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "maxResults": {
                  "description": "Maximum number of messages to return. This field defaults to 100. The maximum allowed value for this field is 500.",
                  "default": "100",
                  "location": "query",
                  "type": "integer",
                  "format": "uint32"
                },
                "pageToken": {
                  "description": "Page token to retrieve a specific page of results in the list.",
                  "location": "query",
                  "type": "string"
                },
                "q": {
                  "description": "Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`. Parameter cannot be used when accessing the api using the gmail.metadata scope.",
                  "location": "query",
                  "type": "string"
                },
                "labelIds": {
                  "description": "Only return messages with labels that match all of the specified label IDs. Messages in a thread might have labels that other messages in the same thread don't have. To learn more, see [Manage labels on messages and threads](https://developers.google.com/gmail/api/guides/labels#manage_labels_on_messages_threads).",
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                },
                "includeSpamTrash": {
                  "description": "Include messages from `SPAM` and `TRASH` in the results.",
                  "default": "false",
                  "location": "query",
                  "type": "boolean"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "ListMessagesResponse"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.metadata",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly"
              ],
              "description": "Lists the messages in the user's mailbox."
            },
            "modify": {
              "id": "gmail.users.messages.modify",
              "path": "gmail/v1/users/{userId}/messages/{id}/modify",
              "flatPath": "gmail/v1/users/{userId}/messages/{id}/modify",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the message to modify.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "request": {
                "$ref": "ModifyMessageRequest"
              },
              "response": {
                "$ref": "Message"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Modifies the labels on the specified message."
            },
            "batchModify": {
              "id": "gmail.users.messages.batchModify",
              "path": "gmail/v1/users/{userId}/messages/batchModify",
              "flatPath": "gmail/v1/users/{userId}/messages/batchModify",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "request": {
                "$ref": "BatchModifyMessagesRequest"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Modifies the labels on the specified messages."
            }
          },
          "resources": {
            "attachments": {
              "methods": {
                "get": {
                  "id": "gmail.users.messages.attachments.get",
                  "path": "gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}",
                  "flatPath": "gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}",
                  "httpMethod": "GET",
                  "parameters": {
                    "userId": {
                      "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "messageId": {
                      "description": "The ID of the message containing the attachment.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "id": {
                      "description": "The ID of the attachment.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "messageId",
                    "id"
                  ],
                  "response": {
                    "$ref": "MessagePartBody"
                  },
                  "scopes": [
                    "https://mail.google.com/",
                    "https://www.googleapis.com/auth/gmail.addons.current.message.action",
                    "https://www.googleapis.com/auth/gmail.addons.current.message.readonly",
                    "https://www.googleapis.com/auth/gmail.modify",
                    "https://www.googleapis.com/auth/gmail.readonly"
                  ],
                  "description": "Gets the specified message attachment."
                }
              }
            }
          }
        },
        "labels": {
          "methods": {
            "create": {
              "id": "gmail.users.labels.create",
              "path": "gmail/v1/users/{userId}/labels",
              "flatPath": "gmail/v1/users/{userId}/labels",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "request": {
                "$ref": "Label"
              },
              "response": {
                "$ref": "Label"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.labels",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Creates a new label."
            },
            "delete": {
              "id": "gmail.users.labels.delete",
              "path": "gmail/v1/users/{userId}/labels/{id}",
              "flatPath": "gmail/v1/users/{userId}/labels/{id}",
              "httpMethod": "DELETE",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the label to delete.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.labels",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Immediately and permanently deletes the specified label and removes it from any messages and threads that it is applied to."
            },
            "get": {
              "id": "gmail.users.labels.get",
              "path": "gmail/v1/users/{userId}/labels/{id}",
              "flatPath": "gmail/v1/users/{userId}/labels/{id}",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the label to retrieve.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "response": {
                "$ref": "Label"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.labels",
                "https://www.googleapis.com/auth/gmail.metadata",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly"
              ],
              "description": "Gets the specified label."
            },
            "list": {
              "id": "gmail.users.labels.list",
              "path": "gmail/v1/users/{userId}/labels",
              "flatPath": "gmail/v1/users/{userId}/labels",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "ListLabelsResponse"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.labels",
                "https://www.googleapis.com/auth/gmail.metadata",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly"
              ],
              "description": "Lists all labels in the user's mailbox."
            },
            "update": {
              "id": "gmail.users.labels.update",
              "path": "gmail/v1/users/{userId}/labels/{id}",
              "flatPath": "gmail/v1/users/{userId}/labels/{id}",
              "httpMethod": "PUT",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the label to update.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "request": {
                "$ref": "Label"
              },
              "response": {
                "$ref": "Label"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.labels",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Updates the specified label."
            },
            "patch": {
              "id": "gmail.users.labels.patch",
              "path": "gmail/v1/users/{userId}/labels/{id}",
              "flatPath": "gmail/v1/users/{userId}/labels/{id}",
              "httpMethod": "PATCH",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the label to update.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "request": {
                "$ref": "Label"
              },
              "response": {
                "$ref": "Label"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.labels",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Patch the specified label."
            }
          }
        },
        "threads": {
          "methods": {
            "trash": {
              "id": "gmail.users.threads.trash",
              "path": "gmail/v1/users/{userId}/threads/{id}/trash",
              "flatPath": "gmail/v1/users/{userId}/threads/{id}/trash",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the thread to Trash.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "response": {
                "$ref": "Thread"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Moves the specified thread to the trash. Any messages that belong to the thread are also moved to the trash."
            },
            "untrash": {
              "id": "gmail.users.threads.untrash",
              "path": "gmail/v1/users/{userId}/threads/{id}/untrash",
              "flatPath": "gmail/v1/users/{userId}/threads/{id}/untrash",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the thread to remove from Trash.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "response": {
                "$ref": "Thread"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Removes the specified thread from the trash. Any messages that belong to the thread are also removed from the trash."
            },
            "delete": {
              "id": "gmail.users.threads.delete",
              "path": "gmail/v1/users/{userId}/threads/{id}",
              "flatPath": "gmail/v1/users/{userId}/threads/{id}",
              "httpMethod": "DELETE",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "ID of the Thread to delete.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "scopes": [
                "https://mail.google.com/"
              ],
              "description": "Immediately and permanently deletes the specified thread. Any messages that belong to the thread are also deleted. This operation cannot be undone. Prefer `threads.trash` instead."
            },
            "get": {
              "id": "gmail.users.threads.get",
              "path": "gmail/v1/users/{userId}/threads/{id}",
              "flatPath": "gmail/v1/users/{userId}/threads/{id}",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the thread to retrieve.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "format": {
                  "description": "The format to return the messages in.",
                  "default": "full",
                  "location": "query",
                  "type": "string",
                  "enumDescriptions": [
                    "Returns the full email message data with body content parsed in the `payload` field; the `raw` field is not used. Format cannot be used when accessing the api using the gmail.metadata scope.",
                    "Returns only email message IDs, labels, and email headers.",
                    "Returns only email message IDs and labels; does not return the email headers, body, or payload."
                  ],
                  "enum": [
                    "full",
                    "metadata",
                    "minimal"
                  ]
                },
                "metadataHeaders": {
                  "description": "When given and format is METADATA, only include headers specified.",
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "response": {
                "$ref": "Thread"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.addons.current.message.action",
                "https://www.googleapis.com/auth/gmail.addons.current.message.metadata",
                "https://www.googleapis.com/auth/gmail.addons.current.message.readonly",
                "https://www.googleapis.com/auth/gmail.metadata",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly"
              ],
              "description": "Gets the specified thread."
            },
            "list": {
              "id": "gmail.users.threads.list",
              "path": "gmail/v1/users/{userId}/threads",
              "flatPath": "gmail/v1/users/{userId}/threads",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "maxResults": {
                  "description": "Maximum number of threads to return. This field defaults to 100. The maximum allowed value for this field is 500.",
                  "default": "100",
                  "location": "query",
                  "type": "integer",
                  "format": "uint32"
                },
                "pageToken": {
                  "description": "Page token to retrieve a specific page of results in the list.",
                  "location": "query",
                  "type": "string"
                },
                "q": {
                  "description": "Only return threads matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`. Parameter cannot be used when accessing the api using the gmail.metadata scope.",
                  "location": "query",
                  "type": "string"
                },
                "labelIds": {
                  "description": "Only return threads with labels that match all of the specified label IDs.",
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                },
                "includeSpamTrash": {
                  "description": "Include threads from `SPAM` and `TRASH` in the results.",
                  "default": "false",
                  "location": "query",
                  "type": "boolean"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "ListThreadsResponse"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.metadata",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly"
              ],
              "description": "Lists the threads in the user's mailbox."
            },
            "modify": {
              "id": "gmail.users.threads.modify",
              "path": "gmail/v1/users/{userId}/threads/{id}/modify",
              "flatPath": "gmail/v1/users/{userId}/threads/{id}/modify",
              "httpMethod": "POST",
              "parameters": {
                "userId": {
                  "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the thread to modify.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "id"
              ],
              "request": {
                "$ref": "ModifyThreadRequest"
              },
              "response": {
                "$ref": "Thread"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify"
              ],
              "description": "Modifies the labels applied to the thread. This applies to all messages in the thread."
            }
          }
        },
        "settings": {
          "methods": {
            "getImap": {
              "id": "gmail.users.settings.getImap",
              "path": "gmail/v1/users/{userId}/settings/imap",
              "flatPath": "gmail/v1/users/{userId}/settings/imap",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "ImapSettings"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly",
                "https://www.googleapis.com/auth/gmail.settings.basic"
              ],
              "description": "Gets IMAP settings."
            },
            "updateImap": {
              "id": "gmail.users.settings.updateImap",
              "path": "gmail/v1/users/{userId}/settings/imap",
              "flatPath": "gmail/v1/users/{userId}/settings/imap",
              "httpMethod": "PUT",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "request": {
                "$ref": "ImapSettings"
              },
              "response": {
                "$ref": "ImapSettings"
              },
              "scopes": [
                "https://www.googleapis.com/auth/gmail.settings.basic"
              ],
              "description": "Updates IMAP settings."
            },
            "getPop": {
              "id": "gmail.users.settings.getPop",
              "path": "gmail/v1/users/{userId}/settings/pop",
              "flatPath": "gmail/v1/users/{userId}/settings/pop",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "PopSettings"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly",
                "https://www.googleapis.com/auth/gmail.settings.basic"
              ],
              "description": "Gets POP settings."
            },
            "updatePop": {
              "id": "gmail.users.settings.updatePop",
              "path": "gmail/v1/users/{userId}/settings/pop",
              "flatPath": "gmail/v1/users/{userId}/settings/pop",
              "httpMethod": "PUT",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "request": {
                "$ref": "PopSettings"
              },
              "response": {
                "$ref": "PopSettings"
              },
              "scopes": [
                "https://www.googleapis.com/auth/gmail.settings.basic"
              ],
              "description": "Updates POP settings."
            },
            "getVacation": {
              "id": "gmail.users.settings.getVacation",
              "path": "gmail/v1/users/{userId}/settings/vacation",
              "flatPath": "gmail/v1/users/{userId}/settings/vacation",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "VacationSettings"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly",
                "https://www.googleapis.com/auth/gmail.settings.basic"
              ],
              "description": "Gets vacation responder settings."
            },
            "updateVacation": {
              "id": "gmail.users.settings.updateVacation",
              "path": "gmail/v1/users/{userId}/settings/vacation",
              "flatPath": "gmail/v1/users/{userId}/settings/vacation",
              "httpMethod": "PUT",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "request": {
                "$ref": "VacationSettings"
              },
              "response": {
                "$ref": "VacationSettings"
              },
              "scopes": [
                "https://www.googleapis.com/auth/gmail.settings.basic"
              ],
              "description": "Updates vacation responder settings."
            },
            "getLanguage": {
              "id": "gmail.users.settings.getLanguage",
              "path": "gmail/v1/users/{userId}/settings/language",
              "flatPath": "gmail/v1/users/{userId}/settings/language",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "LanguageSettings"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly",
                "https://www.googleapis.com/auth/gmail.settings.basic"
              ],
              "description": "Gets language settings."
            },
            "updateLanguage": {
              "id": "gmail.users.settings.updateLanguage",
              "path": "gmail/v1/users/{userId}/settings/language",
              "flatPath": "gmail/v1/users/{userId}/settings/language",
              "httpMethod": "PUT",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "request": {
                "$ref": "LanguageSettings"
              },
              "response": {
                "$ref": "LanguageSettings"
              },
              "scopes": [
                "https://www.googleapis.com/auth/gmail.settings.basic"
              ],
              "description": "Updates language settings. If successful, the return object contains the `displayLanguage` that was saved for the user, which may differ from the value passed into the request. This is because the requested `displayLanguage` may not be directly supported by Gmail but have a close variant that is, and so the variant may be chosen and saved instead."
            },
            "getAutoForwarding": {
              "id": "gmail.users.settings.getAutoForwarding",
              "path": "gmail/v1/users/{userId}/settings/autoForwarding",
              "flatPath": "gmail/v1/users/{userId}/settings/autoForwarding",
              "httpMethod": "GET",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "response": {
                "$ref": "AutoForwarding"
              },
              "scopes": [
                "https://mail.google.com/",
                "https://www.googleapis.com/auth/gmail.modify",
                "https://www.googleapis.com/auth/gmail.readonly",
                "https://www.googleapis.com/auth/gmail.settings.basic"
              ],
              "description": "Gets the auto-forwarding setting for the specified account."
            },
            "updateAutoForwarding": {
              "id": "gmail.users.settings.updateAutoForwarding",
              "path": "gmail/v1/users/{userId}/settings/autoForwarding",
              "flatPath": "gmail/v1/users/{userId}/settings/autoForwarding",
              "httpMethod": "PUT",
              "parameters": {
                "userId": {
                  "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                  "default": "me",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "request": {
                "$ref": "AutoForwarding"
              },
              "response": {
                "$ref": "AutoForwarding"
              },
              "scopes": [
                "https://www.googleapis.com/auth/gmail.settings.sharing"
              ],
              "description": "Updates the auto-forwarding setting for the specified account. A verified forwarding address must be specified when auto-forwarding is enabled. This method is only available to service account clients that have been delegated domain-wide authority."
            }
          },
          "resources": {
            "sendAs": {
              "methods": {
                "list": {
                  "id": "gmail.users.settings.sendAs.list",
                  "path": "gmail/v1/users/{userId}/settings/sendAs",
                  "flatPath": "gmail/v1/users/{userId}/settings/sendAs",
                  "httpMethod": "GET",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId"
                  ],
                  "response": {
                    "$ref": "ListSendAsResponse"
                  },
                  "scopes": [
                    "https://mail.google.com/",
                    "https://www.googleapis.com/auth/gmail.modify",
                    "https://www.googleapis.com/auth/gmail.readonly",
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Lists the send-as aliases for the specified account. The result includes the primary send-as address associated with the account as well as any custom \"from\" aliases."
                },
                "get": {
                  "id": "gmail.users.settings.sendAs.get",
                  "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
                  "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
                  "httpMethod": "GET",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "sendAsEmail": {
                      "description": "The send-as alias to be retrieved.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "sendAsEmail"
                  ],
                  "response": {
                    "$ref": "SendAs"
                  },
                  "scopes": [
                    "https://mail.google.com/",
                    "https://www.googleapis.com/auth/gmail.modify",
                    "https://www.googleapis.com/auth/gmail.readonly",
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Gets the specified send-as alias. Fails with an HTTP 404 error if the specified address is not a member of the collection."
                },
                "create": {
                  "id": "gmail.users.settings.sendAs.create",
                  "path": "gmail/v1/users/{userId}/settings/sendAs",
                  "flatPath": "gmail/v1/users/{userId}/settings/sendAs",
                  "httpMethod": "POST",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId"
                  ],
                  "request": {
                    "$ref": "SendAs"
                  },
                  "response": {
                    "$ref": "SendAs"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.sharing"
                  ],
                  "description": "Creates a custom \"from\" send-as alias. If an SMTP MSA is specified, Gmail will attempt to connect to the SMTP service to validate the configuration before creating the alias. If ownership verification is required for the alias, a message will be sent to the email address and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. This method is only available to service account clients that have been delegated domain-wide authority."
                },
                "update": {
                  "id": "gmail.users.settings.sendAs.update",
                  "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
                  "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
                  "httpMethod": "PUT",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "sendAsEmail": {
                      "description": "The send-as alias to be updated.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "sendAsEmail"
                  ],
                  "request": {
                    "$ref": "SendAs"
                  },
                  "response": {
                    "$ref": "SendAs"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.basic",
                    "https://www.googleapis.com/auth/gmail.settings.sharing"
                  ],
                  "description": "Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. Addresses other than the primary address for the account can only be updated by service account clients that have been delegated domain-wide authority."
                },
                "patch": {
                  "id": "gmail.users.settings.sendAs.patch",
                  "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
                  "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
                  "httpMethod": "PATCH",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "sendAsEmail": {
                      "description": "The send-as alias to be updated.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "sendAsEmail"
                  ],
                  "request": {
                    "$ref": "SendAs"
                  },
                  "response": {
                    "$ref": "SendAs"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.basic",
                    "https://www.googleapis.com/auth/gmail.settings.sharing"
                  ],
                  "description": "Patch the specified send-as alias."
                },
                "delete": {
                  "id": "gmail.users.settings.sendAs.delete",
                  "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
                  "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "sendAsEmail": {
                      "description": "The send-as alias to be deleted.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "sendAsEmail"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.sharing"
                  ],
                  "description": "Deletes the specified send-as alias. Revokes any verification that may have been required for using it. This method is only available to service account clients that have been delegated domain-wide authority."
                },
                "verify": {
                  "id": "gmail.users.settings.sendAs.verify",
                  "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify",
                  "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify",
                  "httpMethod": "POST",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "sendAsEmail": {
                      "description": "The send-as alias to be verified.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "sendAsEmail"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.sharing"
                  ],
                  "description": "Sends a verification email to the specified send-as alias address. The verification status must be `pending`. This method is only available to service account clients that have been delegated domain-wide authority."
                }
              },
              "resources": {
                "smimeInfo": {
                  "methods": {
                    "list": {
                      "id": "gmail.users.settings.sendAs.smimeInfo.list",
                      "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo",
                      "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo",
                      "httpMethod": "GET",
                      "parameters": {
                        "userId": {
                          "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "sendAsEmail": {
                          "description": "The email address that appears in the \"From:\" header for mail sent using this alias.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "sendAsEmail"
                      ],
                      "response": {
                        "$ref": "ListSmimeInfoResponse"
                      },
                      "scopes": [
                        "https://mail.google.com/",
                        "https://www.googleapis.com/auth/gmail.modify",
                        "https://www.googleapis.com/auth/gmail.readonly",
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Lists S/MIME configs for the specified send-as alias."
                    },
                    "get": {
                      "id": "gmail.users.settings.sendAs.smimeInfo.get",
                      "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}",
                      "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}",
                      "httpMethod": "GET",
                      "parameters": {
                        "userId": {
                          "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "sendAsEmail": {
                          "description": "The email address that appears in the \"From:\" header for mail sent using this alias.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "id": {
                          "description": "The immutable ID for the SmimeInfo.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "sendAsEmail",
                        "id"
                      ],
                      "response": {
                        "$ref": "SmimeInfo"
                      },
                      "scopes": [
                        "https://mail.google.com/",
                        "https://www.googleapis.com/auth/gmail.modify",
                        "https://www.googleapis.com/auth/gmail.readonly",
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Gets the specified S/MIME config for the specified send-as alias."
                    },
                    "insert": {
                      "id": "gmail.users.settings.sendAs.smimeInfo.insert",
                      "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo",
                      "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo",
                      "httpMethod": "POST",
                      "parameters": {
                        "userId": {
                          "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "sendAsEmail": {
                          "description": "The email address that appears in the \"From:\" header for mail sent using this alias.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "sendAsEmail"
                      ],
                      "request": {
                        "$ref": "SmimeInfo"
                      },
                      "response": {
                        "$ref": "SmimeInfo"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Insert (upload) the given S/MIME config for the specified send-as alias. Note that pkcs12 format is required for the key."
                    },
                    "delete": {
                      "id": "gmail.users.settings.sendAs.smimeInfo.delete",
                      "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}",
                      "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}",
                      "httpMethod": "DELETE",
                      "parameters": {
                        "userId": {
                          "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "sendAsEmail": {
                          "description": "The email address that appears in the \"From:\" header for mail sent using this alias.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "id": {
                          "description": "The immutable ID for the SmimeInfo.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "sendAsEmail",
                        "id"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Deletes the specified S/MIME config for the specified send-as alias."
                    },
                    "setDefault": {
                      "id": "gmail.users.settings.sendAs.smimeInfo.setDefault",
                      "path": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault",
                      "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault",
                      "httpMethod": "POST",
                      "parameters": {
                        "userId": {
                          "description": "The user's email address. The special value `me` can be used to indicate the authenticated user.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "sendAsEmail": {
                          "description": "The email address that appears in the \"From:\" header for mail sent using this alias.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "id": {
                          "description": "The immutable ID for the SmimeInfo.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "sendAsEmail",
                        "id"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Sets the default S/MIME config for the specified send-as alias."
                    }
                  }
                }
              }
            },
            "cse": {
              "resources": {
                "identities": {
                  "methods": {
                    "create": {
                      "id": "gmail.users.settings.cse.identities.create",
                      "path": "gmail/v1/users/{userId}/settings/cse/identities",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/identities",
                      "httpMethod": "POST",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId"
                      ],
                      "request": {
                        "$ref": "CseIdentity"
                      },
                      "response": {
                        "$ref": "CseIdentity"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Creates and configures a client-side encryption identity that's authorized to send mail from the user account. Google publishes the S/MIME certificate to a shared domain-wide directory so that people within a Google Workspace organization can encrypt and send mail to the identity."
                    },
                    "delete": {
                      "id": "gmail.users.settings.cse.identities.delete",
                      "path": "gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}",
                      "httpMethod": "DELETE",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "cseEmailAddress": {
                          "description": "The primary email address associated with the client-side encryption identity configuration that's removed.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "cseEmailAddress"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Deletes a client-side encryption identity. The authenticated user can no longer use the identity to send encrypted messages. You cannot restore the identity after you delete it. Instead, use the CreateCseIdentity method to create another identity with the same configuration."
                    },
                    "get": {
                      "id": "gmail.users.settings.cse.identities.get",
                      "path": "gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}",
                      "httpMethod": "GET",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "cseEmailAddress": {
                          "description": "The primary email address associated with the client-side encryption identity configuration that's retrieved.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "cseEmailAddress"
                      ],
                      "response": {
                        "$ref": "CseIdentity"
                      },
                      "scopes": [
                        "https://mail.google.com/",
                        "https://www.googleapis.com/auth/gmail.modify",
                        "https://www.googleapis.com/auth/gmail.readonly",
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Retrieves a client-side encryption identity configuration."
                    },
                    "list": {
                      "id": "gmail.users.settings.cse.identities.list",
                      "path": "gmail/v1/users/{userId}/settings/cse/identities",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/identities",
                      "httpMethod": "GET",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "pageToken": {
                          "description": "Pagination token indicating which page of identities to return. If the token is not supplied, then the API will return the first page of results.",
                          "location": "query",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "The number of identities to return. If not provided, the page size will default to 20 entries.",
                          "default": "20",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "parameterOrder": [
                        "userId"
                      ],
                      "response": {
                        "$ref": "ListCseIdentitiesResponse"
                      },
                      "scopes": [
                        "https://mail.google.com/",
                        "https://www.googleapis.com/auth/gmail.modify",
                        "https://www.googleapis.com/auth/gmail.readonly",
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Lists the client-side encrypted identities for an authenticated user."
                    },
                    "patch": {
                      "id": "gmail.users.settings.cse.identities.patch",
                      "path": "gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}",
                      "httpMethod": "PATCH",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "emailAddress": {
                          "description": "The email address of the client-side encryption identity to update.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "emailAddress"
                      ],
                      "request": {
                        "$ref": "CseIdentity"
                      },
                      "response": {
                        "$ref": "CseIdentity"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Associates a different key pair with an existing client-side encryption identity. The updated key pair must validate against Google's [S/MIME certificate profiles](https://support.google.com/a/answer/7300887)."
                    }
                  }
                },
                "keypairs": {
                  "methods": {
                    "create": {
                      "id": "gmail.users.settings.cse.keypairs.create",
                      "path": "gmail/v1/users/{userId}/settings/cse/keypairs",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/keypairs",
                      "httpMethod": "POST",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId"
                      ],
                      "request": {
                        "$ref": "CseKeyPair"
                      },
                      "response": {
                        "$ref": "CseKeyPair"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Creates and uploads a client-side encryption S/MIME public key certificate chain and private key metadata for the authenticated user."
                    },
                    "disable": {
                      "id": "gmail.users.settings.cse.keypairs.disable",
                      "path": "gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable",
                      "httpMethod": "POST",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "keyPairId": {
                          "description": "The identifier of the key pair to turn off.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "keyPairId"
                      ],
                      "request": {
                        "$ref": "DisableCseKeyPairRequest"
                      },
                      "response": {
                        "$ref": "CseKeyPair"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Turns off a client-side encryption key pair. The authenticated user can no longer use the key pair to decrypt incoming CSE message texts or sign outgoing CSE mail. To regain access, use the EnableCseKeyPair to turn on the key pair. After 30 days, you can permanently delete the key pair by using the ObliterateCseKeyPair method."
                    },
                    "enable": {
                      "id": "gmail.users.settings.cse.keypairs.enable",
                      "path": "gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable",
                      "httpMethod": "POST",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "keyPairId": {
                          "description": "The identifier of the key pair to turn on.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "keyPairId"
                      ],
                      "request": {
                        "$ref": "EnableCseKeyPairRequest"
                      },
                      "response": {
                        "$ref": "CseKeyPair"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Turns on a client-side encryption key pair that was turned off. The key pair becomes active again for any associated client-side encryption identities."
                    },
                    "get": {
                      "id": "gmail.users.settings.cse.keypairs.get",
                      "path": "gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}",
                      "httpMethod": "GET",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "keyPairId": {
                          "description": "The identifier of the key pair to retrieve.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "keyPairId"
                      ],
                      "response": {
                        "$ref": "CseKeyPair"
                      },
                      "scopes": [
                        "https://mail.google.com/",
                        "https://www.googleapis.com/auth/gmail.modify",
                        "https://www.googleapis.com/auth/gmail.readonly",
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Retrieves an existing client-side encryption key pair."
                    },
                    "list": {
                      "id": "gmail.users.settings.cse.keypairs.list",
                      "path": "gmail/v1/users/{userId}/settings/cse/keypairs",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/keypairs",
                      "httpMethod": "GET",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "pageToken": {
                          "description": "Pagination token indicating which page of key pairs to return. If the token is not supplied, then the API will return the first page of results.",
                          "location": "query",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "The number of key pairs to return. If not provided, the page size will default to 20 entries.",
                          "default": "20",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "parameterOrder": [
                        "userId"
                      ],
                      "response": {
                        "$ref": "ListCseKeyPairsResponse"
                      },
                      "scopes": [
                        "https://mail.google.com/",
                        "https://www.googleapis.com/auth/gmail.modify",
                        "https://www.googleapis.com/auth/gmail.readonly",
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Lists client-side encryption key pairs for an authenticated user."
                    },
                    "obliterate": {
                      "id": "gmail.users.settings.cse.keypairs.obliterate",
                      "path": "gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate",
                      "flatPath": "gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate",
                      "httpMethod": "POST",
                      "parameters": {
                        "userId": {
                          "description": "The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.",
                          "default": "me",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "keyPairId": {
                          "description": "The identifier of the key pair to obliterate.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "parameterOrder": [
                        "userId",
                        "keyPairId"
                      ],
                      "request": {
                        "$ref": "ObliterateCseKeyPairRequest"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/gmail.settings.basic",
                        "https://www.googleapis.com/auth/gmail.settings.sharing"
                      ],
                      "description": "Deletes a client-side encryption key pair permanently and immediately. You can only permanently delete key pairs that have been turned off for more than 30 days. To turn off a key pair, use the DisableCseKeyPair method. Gmail can't restore or decrypt any messages that were encrypted by an obliterated key. Authenticated users and Google Workspace administrators lose access to reading the encrypted messages."
                    }
                  }
                }
              }
            },
            "filters": {
              "methods": {
                "list": {
                  "id": "gmail.users.settings.filters.list",
                  "path": "gmail/v1/users/{userId}/settings/filters",
                  "flatPath": "gmail/v1/users/{userId}/settings/filters",
                  "httpMethod": "GET",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId"
                  ],
                  "response": {
                    "$ref": "ListFiltersResponse"
                  },
                  "scopes": [
                    "https://mail.google.com/",
                    "https://www.googleapis.com/auth/gmail.modify",
                    "https://www.googleapis.com/auth/gmail.readonly",
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Lists the message filters of a Gmail user."
                },
                "get": {
                  "id": "gmail.users.settings.filters.get",
                  "path": "gmail/v1/users/{userId}/settings/filters/{id}",
                  "flatPath": "gmail/v1/users/{userId}/settings/filters/{id}",
                  "httpMethod": "GET",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "id": {
                      "description": "The ID of the filter to be fetched.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "id"
                  ],
                  "response": {
                    "$ref": "Filter"
                  },
                  "scopes": [
                    "https://mail.google.com/",
                    "https://www.googleapis.com/auth/gmail.modify",
                    "https://www.googleapis.com/auth/gmail.readonly",
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Gets a filter."
                },
                "create": {
                  "id": "gmail.users.settings.filters.create",
                  "path": "gmail/v1/users/{userId}/settings/filters",
                  "flatPath": "gmail/v1/users/{userId}/settings/filters",
                  "httpMethod": "POST",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId"
                  ],
                  "request": {
                    "$ref": "Filter"
                  },
                  "response": {
                    "$ref": "Filter"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Creates a filter. Note: you can only create a maximum of 1,000 filters."
                },
                "delete": {
                  "id": "gmail.users.settings.filters.delete",
                  "path": "gmail/v1/users/{userId}/settings/filters/{id}",
                  "flatPath": "gmail/v1/users/{userId}/settings/filters/{id}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "id": {
                      "description": "The ID of the filter to be deleted.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "id"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Immediately and permanently deletes the specified filter."
                }
              }
            },
            "forwardingAddresses": {
              "methods": {
                "list": {
                  "id": "gmail.users.settings.forwardingAddresses.list",
                  "path": "gmail/v1/users/{userId}/settings/forwardingAddresses",
                  "flatPath": "gmail/v1/users/{userId}/settings/forwardingAddresses",
                  "httpMethod": "GET",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId"
                  ],
                  "response": {
                    "$ref": "ListForwardingAddressesResponse"
                  },
                  "scopes": [
                    "https://mail.google.com/",
                    "https://www.googleapis.com/auth/gmail.modify",
                    "https://www.googleapis.com/auth/gmail.readonly",
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Lists the forwarding addresses for the specified account."
                },
                "get": {
                  "id": "gmail.users.settings.forwardingAddresses.get",
                  "path": "gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}",
                  "flatPath": "gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}",
                  "httpMethod": "GET",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "forwardingEmail": {
                      "description": "The forwarding address to be retrieved.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "forwardingEmail"
                  ],
                  "response": {
                    "$ref": "ForwardingAddress"
                  },
                  "scopes": [
                    "https://mail.google.com/",
                    "https://www.googleapis.com/auth/gmail.modify",
                    "https://www.googleapis.com/auth/gmail.readonly",
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Gets the specified forwarding address."
                },
                "create": {
                  "id": "gmail.users.settings.forwardingAddresses.create",
                  "path": "gmail/v1/users/{userId}/settings/forwardingAddresses",
                  "flatPath": "gmail/v1/users/{userId}/settings/forwardingAddresses",
                  "httpMethod": "POST",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId"
                  ],
                  "request": {
                    "$ref": "ForwardingAddress"
                  },
                  "response": {
                    "$ref": "ForwardingAddress"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.sharing"
                  ],
                  "description": "Creates a forwarding address. If ownership verification is required, a message will be sent to the recipient and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. This method is only available to service account clients that have been delegated domain-wide authority."
                },
                "delete": {
                  "id": "gmail.users.settings.forwardingAddresses.delete",
                  "path": "gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}",
                  "flatPath": "gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "forwardingEmail": {
                      "description": "The forwarding address to be deleted.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "forwardingEmail"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.sharing"
                  ],
                  "description": "Deletes the specified forwarding address and revokes any verification that may have been required. This method is only available to service account clients that have been delegated domain-wide authority."
                }
              }
            },
            "delegates": {
              "methods": {
                "list": {
                  "id": "gmail.users.settings.delegates.list",
                  "path": "gmail/v1/users/{userId}/settings/delegates",
                  "flatPath": "gmail/v1/users/{userId}/settings/delegates",
                  "httpMethod": "GET",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId"
                  ],
                  "response": {
                    "$ref": "ListDelegatesResponse"
                  },
                  "scopes": [
                    "https://mail.google.com/",
                    "https://www.googleapis.com/auth/gmail.modify",
                    "https://www.googleapis.com/auth/gmail.readonly",
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Lists the delegates for the specified account. This method is only available to service account clients that have been delegated domain-wide authority."
                },
                "get": {
                  "id": "gmail.users.settings.delegates.get",
                  "path": "gmail/v1/users/{userId}/settings/delegates/{delegateEmail}",
                  "flatPath": "gmail/v1/users/{userId}/settings/delegates/{delegateEmail}",
                  "httpMethod": "GET",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "delegateEmail": {
                      "description": "The email address of the user whose delegate relationship is to be retrieved.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "delegateEmail"
                  ],
                  "response": {
                    "$ref": "Delegate"
                  },
                  "scopes": [
                    "https://mail.google.com/",
                    "https://www.googleapis.com/auth/gmail.modify",
                    "https://www.googleapis.com/auth/gmail.readonly",
                    "https://www.googleapis.com/auth/gmail.settings.basic"
                  ],
                  "description": "Gets the specified delegate. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority."
                },
                "create": {
                  "id": "gmail.users.settings.delegates.create",
                  "path": "gmail/v1/users/{userId}/settings/delegates",
                  "flatPath": "gmail/v1/users/{userId}/settings/delegates",
                  "httpMethod": "POST",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId"
                  ],
                  "request": {
                    "$ref": "Delegate"
                  },
                  "response": {
                    "$ref": "Delegate"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.sharing"
                  ],
                  "description": "Adds a delegate with its verification status set directly to `accepted`, without sending any verification email. The delegate user must be a member of the same Google Workspace organization as the delegator user. Gmail imposes limitations on the number of delegates and delegators each user in a Google Workspace organization can have. These limits depend on your organization, but in general each user can have up to 25 delegates and up to 10 delegators. Note that a delegate user must be referred to by their primary email address, and not an email alias. Also note that when a new delegate is created, there may be up to a one minute delay before the new delegate is available for use. This method is only available to service account clients that have been delegated domain-wide authority."
                },
                "delete": {
                  "id": "gmail.users.settings.delegates.delete",
                  "path": "gmail/v1/users/{userId}/settings/delegates/{delegateEmail}",
                  "flatPath": "gmail/v1/users/{userId}/settings/delegates/{delegateEmail}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "userId": {
                      "description": "User's email address. The special value \"me\" can be used to indicate the authenticated user.",
                      "default": "me",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    },
                    "delegateEmail": {
                      "description": "The email address of the user to be removed as a delegate.",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "userId",
                    "delegateEmail"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/gmail.settings.sharing"
                  ],
                  "description": "Removes the specified delegate (which can be of any verification status), and revokes any verification that may have been required for using it. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority."
                }
              }
            }
          }
        }
      }
    }
  },
  "batchPath": "batch",
  "protocol": "rest",
  "basePath": "",
  "servicePath": "",
  "schemas": {
    "Draft": {
      "id": "Draft",
      "description": "A draft email in the user's mailbox.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The immutable ID of the draft.",
          "annotations": {
            "required": [
              "gmail.users.drafts.send"
            ]
          },
          "type": "string"
        },
        "message": {
          "description": "The message content of the draft.",
          "$ref": "Message"
        }
      }
    },
    "Message": {
      "id": "Message",
      "description": "An email message.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The immutable ID of the message.",
          "type": "string"
        },
        "threadId": {
          "description": "The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested `threadId` must be specified on the `Message` or `Draft.Message` you supply with your request. 2. The `References` and `In-Reply-To` headers must be set in compliance with the [RFC 2822](https://tools.ietf.org/html/rfc2822) standard. 3. The `Subject` headers must match. ",
          "type": "string"
        },
        "labelIds": {
          "description": "List of IDs of labels applied to this message.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "snippet": {
          "description": "A short part of the message text.",
          "type": "string"
        },
        "historyId": {
          "description": "The ID of the last history record that modified this message.",
          "type": "string",
          "format": "uint64"
        },
        "internalDate": {
          "description": "The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the `Date` header. However, for API-migrated mail, it can be configured by client to be based on the `Date` header.",
          "type": "string",
          "format": "int64"
        },
        "payload": {
          "description": "The parsed email structure in the message parts.",
          "$ref": "MessagePart"
        },
        "sizeEstimate": {
          "description": "Estimated size in bytes of the message.",
          "type": "integer",
          "format": "int32"
        },
        "raw": {
          "description": "The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in `messages.get` and `drafts.get` responses when the `format=RAW` parameter is supplied.",
          "annotations": {
            "required": [
              "gmail.users.drafts.create",
              "gmail.users.drafts.update",
              "gmail.users.messages.insert",
              "gmail.users.messages.send"
            ]
          },
          "type": "string",
          "format": "byte"
        }
      }
    },
    "MessagePart": {
      "id": "MessagePart",
      "description": "A single MIME message part.",
      "type": "object",
      "properties": {
        "partId": {
          "description": "The immutable ID of the message part.",
          "type": "string"
        },
        "mimeType": {
          "description": "The MIME type of the message part.",
          "type": "string"
        },
        "filename": {
          "description": "The filename of the attachment. Only present if this message part represents an attachment.",
          "type": "string"
        },
        "headers": {
          "description": "List of headers on this message part. For the top-level message part, representing the entire message payload, it will contain the standard RFC 2822 email headers such as `To`, `From`, and `Subject`.",
          "type": "array",
          "items": {
            "$ref": "MessagePartHeader"
          }
        },
        "body": {
          "description": "The message part body for this part, which may be empty for container MIME message parts.",
          "$ref": "MessagePartBody"
        },
        "parts": {
          "description": "The child MIME message parts of this part. This only applies to container MIME message parts, for example `multipart/*`. For non- container MIME message part types, such as `text/plain`, this field is empty. For more information, see RFC 1521.",
          "type": "array",
          "items": {
            "$ref": "MessagePart"
          }
        }
      }
    },
    "MessagePartHeader": {
      "id": "MessagePartHeader",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the header before the `:` separator. For example, `To`.",
          "type": "string"
        },
        "value": {
          "description": "The value of the header after the `:` separator. For example, `someuser@example.com`.",
          "type": "string"
        }
      }
    },
    "MessagePartBody": {
      "id": "MessagePartBody",
      "description": "The body of a single MIME message part.",
      "type": "object",
      "properties": {
        "attachmentId": {
          "description": "When present, contains the ID of an external attachment that can be retrieved in a separate `messages.attachments.get` request. When not present, the entire content of the message part body is contained in the data field.",
          "type": "string"
        },
        "size": {
          "description": "Number of bytes for the message part data (encoding notwithstanding).",
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "description": "The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "ListDraftsResponse": {
      "id": "ListDraftsResponse",
      "type": "object",
      "properties": {
        "drafts": {
          "description": "List of drafts. Note that the `Message` property in each `Draft` resource only contains an `id` and a `threadId`. The messages.get method can fetch additional message details.",
          "type": "array",
          "items": {
            "$ref": "Draft"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results in the list.",
          "type": "string"
        },
        "resultSizeEstimate": {
          "description": "Estimated total number of results.",
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "ListHistoryResponse": {
      "id": "ListHistoryResponse",
      "type": "object",
      "properties": {
        "history": {
          "description": "List of history records. Any `messages` contained in the response will typically only have `id` and `threadId` fields populated.",
          "type": "array",
          "items": {
            "$ref": "History"
          }
        },
        "nextPageToken": {
          "description": "Page token to retrieve the next page of results in the list.",
          "type": "string"
        },
        "historyId": {
          "description": "The ID of the mailbox's current history record.",
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "History": {
      "id": "History",
      "description": "A record of a change to the user's mailbox. Each history change may affect multiple messages in multiple ways.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The mailbox sequence ID.",
          "type": "string",
          "format": "uint64"
        },
        "messages": {
          "description": "List of messages changed in this history record. The fields for specific change types, such as `messagesAdded` may duplicate messages in this field. We recommend using the specific change-type fields instead of this.",
          "type": "array",
          "items": {
            "$ref": "Message"
          }
        },
        "messagesAdded": {
          "description": "Messages added to the mailbox in this history record.",
          "type": "array",
          "items": {
            "$ref": "HistoryMessageAdded"
          }
        },
        "messagesDeleted": {
          "description": "Messages deleted (not Trashed) from the mailbox in this history record.",
          "type": "array",
          "items": {
            "$ref": "HistoryMessageDeleted"
          }
        },
        "labelsAdded": {
          "description": "Labels added to messages in this history record.",
          "type": "array",
          "items": {
            "$ref": "HistoryLabelAdded"
          }
        },
        "labelsRemoved": {
          "description": "Labels removed from messages in this history record.",
          "type": "array",
          "items": {
            "$ref": "HistoryLabelRemoved"
          }
        }
      }
    },
    "HistoryMessageAdded": {
      "id": "HistoryMessageAdded",
      "type": "object",
      "properties": {
        "message": {
          "$ref": "Message"
        }
      }
    },
    "HistoryMessageDeleted": {
      "id": "HistoryMessageDeleted",
      "type": "object",
      "properties": {
        "message": {
          "$ref": "Message"
        }
      }
    },
    "HistoryLabelAdded": {
      "id": "HistoryLabelAdded",
      "type": "object",
      "properties": {
        "message": {
          "$ref": "Message"
        },
        "labelIds": {
          "description": "Label IDs added to the message.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "HistoryLabelRemoved": {
      "id": "HistoryLabelRemoved",
      "type": "object",
      "properties": {
        "message": {
          "$ref": "Message"
        },
        "labelIds": {
          "description": "Label IDs removed from the message.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BatchDeleteMessagesRequest": {
      "id": "BatchDeleteMessagesRequest",
      "type": "object",
      "properties": {
        "ids": {
          "description": "The IDs of the messages to delete.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ListMessagesResponse": {
      "id": "ListMessagesResponse",
      "type": "object",
      "properties": {
        "messages": {
          "description": "List of messages. Note that each message resource contains only an `id` and a `threadId`. Additional message details can be fetched using the messages.get method.",
          "type": "array",
          "items": {
            "$ref": "Message"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results in the list.",
          "type": "string"
        },
        "resultSizeEstimate": {
          "description": "Estimated total number of results.",
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "ModifyMessageRequest": {
      "id": "ModifyMessageRequest",
      "type": "object",
      "properties": {
        "addLabelIds": {
          "description": "A list of IDs of labels to add to this message. You can add up to 100 labels with each update.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "removeLabelIds": {
          "description": "A list IDs of labels to remove from this message. You can remove up to 100 labels with each update.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BatchModifyMessagesRequest": {
      "id": "BatchModifyMessagesRequest",
      "type": "object",
      "properties": {
        "ids": {
          "description": "The IDs of the messages to modify. There is a limit of 1000 ids per request.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "addLabelIds": {
          "description": "A list of label IDs to add to messages.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "removeLabelIds": {
          "description": "A list of label IDs to remove from messages.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Label": {
      "id": "Label",
      "description": "Labels are used to categorize messages and threads within the user's mailbox. The maximum number of labels supported for a user's mailbox is 10,000.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The immutable ID of the label.",
          "annotations": {
            "required": [
              "gmail.users.labels.update"
            ]
          },
          "type": "string"
        },
        "name": {
          "description": "The display name of the label.",
          "annotations": {
            "required": [
              "gmail.users.labels.create",
              "gmail.users.labels.update"
            ]
          },
          "type": "string"
        },
        "messageListVisibility": {
          "description": "The visibility of messages with this label in the message list in the Gmail web interface.",
          "annotations": {
            "required": [
              "gmail.users.labels.create",
              "gmail.users.labels.update"
            ]
          },
          "type": "string",
          "enumDescriptions": [
            "Show the label in the message list.",
            "Do not show the label in the message list."
          ],
          "enum": [
            "show",
            "hide"
          ]
        },
        "labelListVisibility": {
          "description": "The visibility of the label in the label list in the Gmail web interface.",
          "annotations": {
            "required": [
              "gmail.users.labels.create",
              "gmail.users.labels.update"
            ]
          },
          "type": "string",
          "enumDescriptions": [
            "Show the label in the label list.",
            "Show the label if there are any unread messages with that label.",
            "Do not show the label in the label list."
          ],
          "enum": [
            "labelShow",
            "labelShowIfUnread",
            "labelHide"
          ]
        },
        "type": {
          "description": "The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the `INBOX` and `UNREAD` labels from messages and threads, but cannot apply or remove the `DRAFTS` or `SENT` labels from messages or threads.",
          "type": "string",
          "enumDescriptions": [
            "Labels created by Gmail.",
            "Custom labels created by the user or application."
          ],
          "enum": [
            "system",
            "user"
          ]
        },
        "messagesTotal": {
          "description": "The total number of messages with the label.",
          "type": "integer",
          "format": "int32"
        },
        "messagesUnread": {
          "description": "The number of unread messages with the label.",
          "type": "integer",
          "format": "int32"
        },
        "threadsTotal": {
          "description": "The total number of threads with the label.",
          "type": "integer",
          "format": "int32"
        },
        "threadsUnread": {
          "description": "The number of unread threads with the label.",
          "type": "integer",
          "format": "int32"
        },
        "color": {
          "description": "The color to assign to the label. Color is only available for labels that have their `type` set to `user`.",
          "$ref": "LabelColor"
        }
      }
    },
    "LabelColor": {
      "id": "LabelColor",
      "type": "object",
      "properties": {
        "textColor": {
          "description": "The text color of the label, represented as hex string. This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: \\#000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, \\#fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, \\#f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, \\#efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, \\#e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, \\#cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, \\#ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, \\#822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c \\#464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, \\#711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, \\#594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, \\#c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, \\#662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765",
          "type": "string"
        },
        "backgroundColor": {
          "description": "The background color represented as hex string #RRGGBB (ex #000000). This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: \\#000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, \\#fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, \\#f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, \\#efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, \\#e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, \\#cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, \\#ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, \\#822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c \\#464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, \\#711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, \\#594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, \\#c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, \\#662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765",
          "type": "string"
        }
      }
    },
    "ListLabelsResponse": {
      "id": "ListLabelsResponse",
      "type": "object",
      "properties": {
        "labels": {
          "description": "List of labels. Note that each label resource only contains an `id`, `name`, `messageListVisibility`, `labelListVisibility`, and `type`. The labels.get method can fetch additional label details.",
          "type": "array",
          "items": {
            "$ref": "Label"
          }
        }
      }
    },
    "Profile": {
      "id": "Profile",
      "description": "Profile for a Gmail user.",
      "type": "object",
      "properties": {
        "emailAddress": {
          "description": "The user's email address.",
          "type": "string"
        },
        "messagesTotal": {
          "description": "The total number of messages in the mailbox.",
          "type": "integer",
          "format": "int32"
        },
        "threadsTotal": {
          "description": "The total number of threads in the mailbox.",
          "type": "integer",
          "format": "int32"
        },
        "historyId": {
          "description": "The ID of the mailbox's current history record.",
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "WatchRequest": {
      "id": "WatchRequest",
      "description": "Set up or update a new push notification watch on this user's mailbox.",
      "type": "object",
      "properties": {
        "labelIds": {
          "description": "List of label_ids to restrict notifications about. By default, if unspecified, all changes are pushed out. If specified then dictates which labels are required for a push notification to be generated.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "labelFilterAction": {
          "description": "Filtering behavior of `labelIds list` specified. This field is deprecated because it caused incorrect behavior in some cases; use `label_filter_behavior` instead.",
          "deprecated": true,
          "type": "string",
          "enumDescriptions": [
            "Only get push notifications for message changes relating to labelIds specified.",
            "Get push notifications for all message changes except those relating to labelIds specified."
          ],
          "enum": [
            "include",
            "exclude"
          ]
        },
        "labelFilterBehavior": {
          "description": "Filtering behavior of `labelIds list` specified. This field replaces `label_filter_action`; if set, `label_filter_action` is ignored.",
          "type": "string",
          "enumDescriptions": [
            "Only get push notifications for message changes relating to labelIds specified.",
            "Get push notifications for all message changes except those relating to labelIds specified."
          ],
          "enum": [
            "include",
            "exclude"
          ]
        },
        "topicName": {
          "description": "A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name **must** already exist in Cloud Pub/Sub and you **must** have already granted gmail \"publish\" permission on it. For example, \"projects/my-project-identifier/topics/my-topic-name\" (using the Cloud Pub/Sub \"v1\" topic naming format). Note that the \"my-project-identifier\" portion must exactly match your Google developer project id (the one executing this watch request).",
          "type": "string"
        }
      }
    },
    "WatchResponse": {
      "id": "WatchResponse",
      "description": "Push notification watch response.",
      "type": "object",
      "properties": {
        "historyId": {
          "description": "The ID of the mailbox's current history record.",
          "type": "string",
          "format": "uint64"
        },
        "expiration": {
          "description": "When Gmail will stop sending notifications for mailbox updates (epoch millis). Call `watch` again before this time to renew the watch.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "Thread": {
      "id": "Thread",
      "description": "A collection of messages representing a conversation.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique ID of the thread.",
          "type": "string"
        },
        "snippet": {
          "description": "A short part of the message text.",
          "type": "string"
        },
        "historyId": {
          "description": "The ID of the last history record that modified this thread.",
          "type": "string",
          "format": "uint64"
        },
        "messages": {
          "description": "The list of messages in the thread.",
          "type": "array",
          "items": {
            "$ref": "Message"
          }
        }
      }
    },
    "ListThreadsResponse": {
      "id": "ListThreadsResponse",
      "type": "object",
      "properties": {
        "threads": {
          "description": "List of threads. Note that each thread resource does not contain a list of `messages`. The list of `messages` for a given thread can be fetched using the threads.get method.",
          "type": "array",
          "items": {
            "$ref": "Thread"
          }
        },
        "nextPageToken": {
          "description": "Page token to retrieve the next page of results in the list.",
          "type": "string"
        },
        "resultSizeEstimate": {
          "description": "Estimated total number of results.",
          "type": "integer",
          "format": "uint32"
        }
      }
    },
    "ModifyThreadRequest": {
      "id": "ModifyThreadRequest",
      "type": "object",
      "properties": {
        "addLabelIds": {
          "description": "A list of IDs of labels to add to this thread. You can add up to 100 labels with each update.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "removeLabelIds": {
          "description": "A list of IDs of labels to remove from this thread. You can remove up to 100 labels with each update.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ListSendAsResponse": {
      "id": "ListSendAsResponse",
      "description": "Response for the ListSendAs method.",
      "type": "object",
      "properties": {
        "sendAs": {
          "description": "List of send-as aliases.",
          "type": "array",
          "items": {
            "$ref": "SendAs"
          }
        }
      }
    },
    "SendAs": {
      "id": "SendAs",
      "description": "Settings associated with a send-as alias, which can be either the primary login address associated with the account or a custom \"from\" address. Send-as aliases correspond to the \"Send Mail As\" feature in the web interface.",
      "type": "object",
      "properties": {
        "sendAsEmail": {
          "description": "The email address that appears in the \"From:\" header for mail sent using this alias. This is read-only for all operations except create.",
          "type": "string"
        },
        "displayName": {
          "description": "A name that appears in the \"From:\" header for mail sent using this alias. For custom \"from\" addresses, when this is empty, Gmail will populate the \"From:\" header with the name that is used for the primary address associated with the account. If the admin has disabled the ability for users to update their name format, requests to update this field for the primary login will silently fail.",
          "type": "string"
        },
        "replyToAddress": {
          "description": "An optional email address that is included in a \"Reply-To:\" header for mail sent using this alias. If this is empty, Gmail will not generate a \"Reply-To:\" header.",
          "type": "string"
        },
        "signature": {
          "description": "An optional HTML signature that is included in messages composed with this alias in the Gmail web UI. This signature is added to new emails only.",
          "type": "string"
        },
        "isPrimary": {
          "description": "Whether this address is the primary address used to login to the account. Every Gmail account has exactly one primary address, and it cannot be deleted from the collection of send-as aliases. This field is read-only.",
          "type": "boolean"
        },
        "isDefault": {
          "description": "Whether this address is selected as the default \"From:\" address in situations such as composing a new message or sending a vacation auto-reply. Every Gmail account has exactly one default send-as address, so the only legal value that clients may write to this field is `true`. Changing this from `false` to `true` for an address will result in this field becoming `false` for the other previous default address.",
          "type": "boolean"
        },
        "treatAsAlias": {
          "description": "Whether Gmail should treat this address as an alias for the user's primary email address. This setting only applies to custom \"from\" aliases.",
          "type": "boolean"
        },
        "smtpMsa": {
          "description": "An optional SMTP service that will be used as an outbound relay for mail sent using this alias. If this is empty, outbound mail will be sent directly from Gmail's servers to the destination SMTP service. This setting only applies to custom \"from\" aliases.",
          "$ref": "SmtpMsa"
        },
        "verificationStatus": {
          "description": "Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom \"from\" aliases.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified verification status.",
            "The address is ready to use as a send-as alias.",
            "The address is awaiting verification by the owner."
          ],
          "enum": [
            "verificationStatusUnspecified",
            "accepted",
            "pending"
          ]
        }
      }
    },
    "SmtpMsa": {
      "id": "SmtpMsa",
      "description": "Configuration for communication with an SMTP service.",
      "type": "object",
      "properties": {
        "host": {
          "description": "The hostname of the SMTP service. Required.",
          "type": "string"
        },
        "port": {
          "description": "The port of the SMTP service. Required.",
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "description": "The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.",
          "type": "string"
        },
        "password": {
          "description": "The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.",
          "type": "string"
        },
        "securityMode": {
          "description": "The protocol that will be used to secure communication with the SMTP service. Required.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified security mode.",
            "Communication with the remote SMTP service is unsecured. Requires port 25.",
            "Communication with the remote SMTP service is secured using SSL.",
            "Communication with the remote SMTP service is secured using STARTTLS."
          ],
          "enum": [
            "securityModeUnspecified",
            "none",
            "ssl",
            "starttls"
          ]
        }
      }
    },
    "ListSmimeInfoResponse": {
      "id": "ListSmimeInfoResponse",
      "type": "object",
      "properties": {
        "smimeInfo": {
          "description": "List of SmimeInfo.",
          "type": "array",
          "items": {
            "$ref": "SmimeInfo"
          }
        }
      }
    },
    "SmimeInfo": {
      "id": "SmimeInfo",
      "description": "An S/MIME email config.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The immutable ID for the SmimeInfo.",
          "type": "string"
        },
        "issuerCn": {
          "description": "The S/MIME certificate issuer's common name.",
          "type": "string"
        },
        "isDefault": {
          "description": "Whether this SmimeInfo is the default one for this user's send-as address.",
          "type": "boolean"
        },
        "expiration": {
          "description": "When the certificate expires (in milliseconds since epoch).",
          "type": "string",
          "format": "int64"
        },
        "pem": {
          "description": "PEM formatted X509 concatenated certificate string (standard base64 encoding). Format used for returning key, which includes public key as well as certificate chain (not private key).",
          "type": "string"
        },
        "pkcs12": {
          "description": "PKCS#12 format containing a single private/public key pair and certificate chain. This format is only accepted from client for creating a new SmimeInfo and is never returned, because the private key is not intended to be exported. PKCS#12 may be encrypted, in which case encryptedKeyPassword should be set appropriately.",
          "type": "string",
          "format": "byte"
        },
        "encryptedKeyPassword": {
          "description": "Encrypted key password, when key is encrypted.",
          "type": "string"
        }
      }
    },
    "CseIdentity": {
      "id": "CseIdentity",
      "description": "The client-side encryption (CSE) configuration for the email address of an authenticated user. Gmail uses CSE configurations to save drafts of client-side encrypted email messages, and to sign and send encrypted email messages.",
      "type": "object",
      "properties": {
        "emailAddress": {
          "description": "The email address for the sending identity. The email address must be the primary email address of the authenticated user.",
          "type": "string"
        },
        "primaryKeyPairId": {
          "description": "If a key pair is associated, the ID of the key pair, CseKeyPair.",
          "type": "string"
        },
        "signAndEncryptKeyPairs": {
          "description": "The configuration of a CSE identity that uses different key pairs for signing and encryption.",
          "$ref": "SignAndEncryptKeyPairs"
        }
      }
    },
    "SignAndEncryptKeyPairs": {
      "id": "SignAndEncryptKeyPairs",
      "description": "The configuration of a CSE identity that uses different key pairs for signing and encryption.",
      "type": "object",
      "properties": {
        "signingKeyPairId": {
          "description": "The ID of the CseKeyPair that signs outgoing mail.",
          "type": "string"
        },
        "encryptionKeyPairId": {
          "description": "The ID of the CseKeyPair that encrypts signed outgoing mail.",
          "type": "string"
        }
      }
    },
    "CseKeyPair": {
      "id": "CseKeyPair",
      "description": "A client-side encryption S/MIME key pair, which is comprised of a public key, its certificate chain, and metadata for its paired private key. Gmail uses the key pair to complete the following tasks: - Sign outgoing client-side encrypted messages. - Save and reopen drafts of client-side encrypted messages. - Save and reopen sent messages. - Decrypt incoming or archived S/MIME messages.",
      "type": "object",
      "properties": {
        "keyPairId": {
          "description": "Output only. The immutable ID for the client-side encryption S/MIME key pair.",
          "readOnly": true,
          "type": "string"
        },
        "pkcs7": {
          "description": "Input only. The public key and its certificate chain. The chain must be in [PKCS#7](https://en.wikipedia.org/wiki/PKCS_7) format and use PEM encoding and ASCII armor.",
          "type": "string"
        },
        "pem": {
          "description": "Output only. The public key and its certificate chain, in [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) format.",
          "readOnly": true,
          "type": "string"
        },
        "subjectEmailAddresses": {
          "description": "Output only. The email address identities that are specified on the leaf certificate.",
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enablementState": {
          "description": "Output only. The current state of the key pair.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "The current state of the key pair is not set. The key pair is neither turned on nor turned off.",
            "The key pair is turned on. For any email messages that this key pair encrypts, Gmail decrypts the messages and signs any outgoing mail with the private key. To turn on a key pair, use the EnableCseKeyPair method.",
            "The key pair is turned off. Authenticated users cannot decrypt email messages nor sign outgoing messages. If a key pair is turned off for more than 30 days, you can permanently delete it. To turn off a key pair, use the DisableCseKeyPair method."
          ],
          "enum": [
            "stateUnspecified",
            "enabled",
            "disabled"
          ]
        },
        "disableTime": {
          "description": "Output only. If a key pair is set to `DISABLED`, the time that the key pair's state changed from `ENABLED` to `DISABLED`. This field is present only when the key pair is in state `DISABLED`.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "privateKeyMetadata": {
          "description": "Metadata for instances of this key pair's private key.",
          "type": "array",
          "items": {
            "$ref": "CsePrivateKeyMetadata"
          }
        }
      }
    },
    "CsePrivateKeyMetadata": {
      "id": "CsePrivateKeyMetadata",
      "description": "Metadata for a private key instance.",
      "type": "object",
      "properties": {
        "privateKeyMetadataId": {
          "description": "Output only. The immutable ID for the private key metadata instance.",
          "readOnly": true,
          "type": "string"
        },
        "kaclsKeyMetadata": {
          "description": "Metadata for a private key instance managed by an external key access control list service.",
          "$ref": "KaclsKeyMetadata"
        },
        "hardwareKeyMetadata": {
          "description": "Metadata for hardware keys.",
          "$ref": "HardwareKeyMetadata"
        }
      }
    },
    "KaclsKeyMetadata": {
      "id": "KaclsKeyMetadata",
      "description": "Metadata for private keys managed by an external key access control list service. For details about managing key access, see [Google Workspace CSE API Reference](https://developers.google.com/workspace/cse/reference).",
      "type": "object",
      "properties": {
        "kaclsUri": {
          "description": "The URI of the key access control list service that manages the private key.",
          "type": "string"
        },
        "kaclsData": {
          "description": "Opaque data generated and used by the key access control list service. Maximum size: 8 KiB.",
          "type": "string"
        }
      }
    },
    "HardwareKeyMetadata": {
      "id": "HardwareKeyMetadata",
      "description": "Metadata for hardware keys.",
      "type": "object",
      "properties": {
        "description": {
          "description": "Description about the hardware key.",
          "type": "string"
        }
      }
    },
    "DisableCseKeyPairRequest": {
      "id": "DisableCseKeyPairRequest",
      "description": "Requests to turn off a client-side encryption key pair.",
      "type": "object",
      "properties": {}
    },
    "EnableCseKeyPairRequest": {
      "id": "EnableCseKeyPairRequest",
      "description": "Requests to turn on a client-side encryption key pair.",
      "type": "object",
      "properties": {}
    },
    "ListCseIdentitiesResponse": {
      "id": "ListCseIdentitiesResponse",
      "type": "object",
      "properties": {
        "cseIdentities": {
          "description": "One page of the list of CSE identities configured for the user.",
          "type": "array",
          "items": {
            "$ref": "CseIdentity"
          }
        },
        "nextPageToken": {
          "description": "Pagination token to be passed to a subsequent ListCseIdentities call in order to retrieve the next page of identities. If this value is not returned or is the empty string, then no further pages remain.",
          "type": "string"
        }
      }
    },
    "ListCseKeyPairsResponse": {
      "id": "ListCseKeyPairsResponse",
      "type": "object",
      "properties": {
        "cseKeyPairs": {
          "description": "One page of the list of CSE key pairs installed for the user.",
          "type": "array",
          "items": {
            "$ref": "CseKeyPair"
          }
        },
        "nextPageToken": {
          "description": "Pagination token to be passed to a subsequent ListCseKeyPairs call in order to retrieve the next page of key pairs. If this value is not returned, then no further pages remain.",
          "type": "string"
        }
      }
    },
    "ObliterateCseKeyPairRequest": {
      "id": "ObliterateCseKeyPairRequest",
      "description": "Request to obliterate a CSE key pair.",
      "type": "object",
      "properties": {}
    },
    "ListFiltersResponse": {
      "id": "ListFiltersResponse",
      "description": "Response for the ListFilters method.",
      "type": "object",
      "properties": {
        "filter": {
          "description": "List of a user's filters.",
          "type": "array",
          "items": {
            "$ref": "Filter"
          }
        }
      }
    },
    "Filter": {
      "id": "Filter",
      "description": "Resource definition for Gmail filters. Filters apply to specific messages instead of an entire email thread.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The server assigned ID of the filter.",
          "type": "string"
        },
        "criteria": {
          "description": "Matching criteria for the filter.",
          "$ref": "FilterCriteria"
        },
        "action": {
          "description": "Action that the filter performs.",
          "$ref": "FilterAction"
        }
      }
    },
    "FilterCriteria": {
      "id": "FilterCriteria",
      "description": "Message matching criteria.",
      "type": "object",
      "properties": {
        "from": {
          "description": "The sender's display name or email address.",
          "type": "string"
        },
        "to": {
          "description": "The recipient's display name or email address. Includes recipients in the \"to\", \"cc\", and \"bcc\" header fields. You can use simply the local part of the email address. For example, \"example\" and \"example@\" both match \"example@gmail.com\". This field is case-insensitive.",
          "type": "string"
        },
        "subject": {
          "description": "Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be trimmed and adjacent spaces are collapsed.",
          "type": "string"
        },
        "query": {
          "description": "Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`.",
          "type": "string"
        },
        "negatedQuery": {
          "description": "Only return messages not matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`.",
          "type": "string"
        },
        "hasAttachment": {
          "description": "Whether the message has any attachment.",
          "type": "boolean"
        },
        "excludeChats": {
          "description": "Whether the response should exclude chats.",
          "type": "boolean"
        },
        "size": {
          "description": "The size of the entire RFC822 message in bytes, including all headers and attachments.",
          "type": "integer",
          "format": "int32"
        },
        "sizeComparison": {
          "description": "How the message size in bytes should be in relation to the size field.",
          "type": "string",
          "enumDescriptions": [
            "",
            "Find messages smaller than the given size.",
            "Find messages larger than the given size."
          ],
          "enum": [
            "unspecified",
            "smaller",
            "larger"
          ]
        }
      }
    },
    "FilterAction": {
      "id": "FilterAction",
      "description": "A set of actions to perform on a message.",
      "type": "object",
      "properties": {
        "addLabelIds": {
          "description": "List of labels to add to the message.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "removeLabelIds": {
          "description": "List of labels to remove from the message.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "forward": {
          "description": "Email address that the message should be forwarded to.",
          "type": "string"
        }
      }
    },
    "ImapSettings": {
      "id": "ImapSettings",
      "description": "IMAP settings for an account.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Whether IMAP is enabled for the account.",
          "type": "boolean"
        },
        "autoExpunge": {
          "description": "If this value is true, Gmail will immediately expunge a message when it is marked as deleted in IMAP. Otherwise, Gmail will wait for an update from the client before expunging messages marked as deleted.",
          "type": "boolean"
        },
        "expungeBehavior": {
          "description": "The action that will be executed on a message when it is marked as deleted and expunged from the last visible IMAP folder.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified behavior.",
            "Archive messages marked as deleted.",
            "Move messages marked as deleted to the trash.",
            "Immediately and permanently delete messages marked as deleted. The expunged messages cannot be recovered."
          ],
          "enum": [
            "expungeBehaviorUnspecified",
            "archive",
            "trash",
            "deleteForever"
          ]
        },
        "maxFolderSize": {
          "description": "An optional limit on the number of messages that an IMAP folder may contain. Legal values are 0, 1000, 2000, 5000 or 10000. A value of zero is interpreted to mean that there is no limit.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PopSettings": {
      "id": "PopSettings",
      "description": "POP settings for an account.",
      "type": "object",
      "properties": {
        "accessWindow": {
          "description": "The range of messages which are accessible via POP.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified range.",
            "Indicates that no messages are accessible via POP.",
            "Indicates that unfetched messages received after some past point in time are accessible via POP.",
            "Indicates that all unfetched messages are accessible via POP."
          ],
          "enum": [
            "accessWindowUnspecified",
            "disabled",
            "fromNowOn",
            "allMail"
          ]
        },
        "disposition": {
          "description": "The action that will be executed on a message after it has been fetched via POP.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified disposition.",
            "Leave the message in the `INBOX`.",
            "Archive the message.",
            "Move the message to the `TRASH`.",
            "Leave the message in the `INBOX` and mark it as read."
          ],
          "enum": [
            "dispositionUnspecified",
            "leaveInInbox",
            "archive",
            "trash",
            "markRead"
          ]
        }
      }
    },
    "VacationSettings": {
      "id": "VacationSettings",
      "description": "Vacation auto-reply settings for an account. These settings correspond to the \"Vacation responder\" feature in the web interface.",
      "type": "object",
      "properties": {
        "enableAutoReply": {
          "description": "Flag that controls whether Gmail automatically replies to messages.",
          "type": "boolean"
        },
        "responseSubject": {
          "description": "Optional text to prepend to the subject line in vacation responses. In order to enable auto-replies, either the response subject or the response body must be nonempty.",
          "type": "string"
        },
        "responseBodyPlainText": {
          "description": "Response body in plain text format. If both `response_body_plain_text` and `response_body_html` are specified, `response_body_html` will be used.",
          "type": "string"
        },
        "responseBodyHtml": {
          "description": "Response body in HTML format. Gmail will sanitize the HTML before storing it. If both `response_body_plain_text` and `response_body_html` are specified, `response_body_html` will be used.",
          "type": "string"
        },
        "restrictToContacts": {
          "description": "Flag that determines whether responses are sent to recipients who are not in the user's list of contacts.",
          "type": "boolean"
        },
        "restrictToDomain": {
          "description": "Flag that determines whether responses are sent to recipients who are outside of the user's domain. This feature is only available for Google Workspace users.",
          "type": "boolean"
        },
        "startTime": {
          "description": "An optional start time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives after the start time. If both `startTime` and `endTime` are specified, `startTime` must precede `endTime`.",
          "type": "string",
          "format": "int64"
        },
        "endTime": {
          "description": "An optional end time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives before the end time. If both `startTime` and `endTime` are specified, `startTime` must precede `endTime`.",
          "type": "string",
          "format": "int64"
        }
      }
    },
    "LanguageSettings": {
      "id": "LanguageSettings",
      "description": "Language settings for an account. These settings correspond to the \"Language settings\" feature in the web interface.",
      "type": "object",
      "properties": {
        "displayLanguage": {
          "description": "The language to display Gmail in, formatted as an RFC 3066 Language Tag (for example `en-GB`, `fr` or `ja` for British English, French, or Japanese respectively). The set of languages supported by Gmail evolves over time, so please refer to the \"Language\" dropdown in the Gmail settings for all available options, as described in the language settings help article. A table of sample values is also provided in the Managing Language Settings guide Not all Gmail clients can display the same set of languages. In the case that a user's display language is not available for use on a particular client, said client automatically chooses to display in the closest supported variant (or a reasonable default).",
          "type": "string"
        }
      }
    },
    "ListForwardingAddressesResponse": {
      "id": "ListForwardingAddressesResponse",
      "description": "Response for the ListForwardingAddresses method.",
      "type": "object",
      "properties": {
        "forwardingAddresses": {
          "description": "List of addresses that may be used for forwarding.",
          "type": "array",
          "items": {
            "$ref": "ForwardingAddress"
          }
        }
      }
    },
    "ForwardingAddress": {
      "id": "ForwardingAddress",
      "description": "Settings for a forwarding address.",
      "type": "object",
      "properties": {
        "forwardingEmail": {
          "description": "An email address to which messages can be forwarded.",
          "type": "string"
        },
        "verificationStatus": {
          "description": "Indicates whether this address has been verified and is usable for forwarding. Read-only.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified verification status.",
            "The address is ready to use for forwarding.",
            "The address is awaiting verification by the owner."
          ],
          "enum": [
            "verificationStatusUnspecified",
            "accepted",
            "pending"
          ]
        }
      }
    },
    "AutoForwarding": {
      "id": "AutoForwarding",
      "description": "Auto-forwarding settings for an account.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Whether all incoming mail is automatically forwarded to another address.",
          "type": "boolean"
        },
        "emailAddress": {
          "description": "Email address to which all incoming messages are forwarded. This email address must be a verified member of the forwarding addresses.",
          "type": "string"
        },
        "disposition": {
          "description": "The state that a message should be left in after it has been forwarded.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified disposition.",
            "Leave the message in the `INBOX`.",
            "Archive the message.",
            "Move the message to the `TRASH`.",
            "Leave the message in the `INBOX` and mark it as read."
          ],
          "enum": [
            "dispositionUnspecified",
            "leaveInInbox",
            "archive",
            "trash",
            "markRead"
          ]
        }
      }
    },
    "ListDelegatesResponse": {
      "id": "ListDelegatesResponse",
      "description": "Response for the ListDelegates method.",
      "type": "object",
      "properties": {
        "delegates": {
          "description": "List of the user's delegates (with any verification status). If an account doesn't have delegates, this field doesn't appear.",
          "type": "array",
          "items": {
            "$ref": "Delegate"
          }
        }
      }
    },
    "Delegate": {
      "id": "Delegate",
      "description": "Settings for a delegate. Delegates can read, send, and delete messages, as well as view and add contacts, for the delegator's account. See \"Set up mail delegation\" for more information about delegates.",
      "type": "object",
      "properties": {
        "delegateEmail": {
          "description": "The email address of the delegate.",
          "type": "string"
        },
        "verificationStatus": {
          "description": "Indicates whether this address has been verified and can act as a delegate for the account. Read-only.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified verification status.",
            "The address can act a delegate for the account.",
            "A verification request was mailed to the address, and the owner has not yet accepted it.",
            "A verification request was mailed to the address, and the owner rejected it.",
            "A verification request was mailed to the address, and it expired without verification."
          ],
          "enum": [
            "verificationStatusUnspecified",
            "accepted",
            "pending",
            "rejected",
            "expired"
          ]
        }
      }
    }
  },
  "documentationLink": "https://developers.google.com/gmail/api/",
  "kind": "discovery#restDescription",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  }
}]]></parameter>
        </Script>
    
    
    <Script name="SCHEMA class">
            <ModTime>1738237376516</ModTime>
            <parameter name="enabled">true</parameter>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[// 20250121 1145 Change parseOpenAPIschema so the argument openApiSchema can be either JSON or JS object
// 20250128 1552 Updated replaceEmbeddedUID() to accept either an Entry or a string value as the criteria argument
// 20250129 1645 Fixing getChildren so it works (again) - stumbled on "parameters"

function SCHEMA(schema, format) {
	_WHERE = "SCHEMA class";	/* Global variable available for error reporting */
	this.name = "SCHEMA";
	this.schemaObj = {};
	
	/* Main init logic after method definitions

       The name says it all. Returns a JS Obj */
       
    this.parseOpenAPIschema = function(openApiSchema) {
    	if (typeof(openApiSchema) != "string") return openApiSchema;
    	
        openApiSchema = openApiSchema.trim();
        var jsonString = "";

        /* Load Jackson libraries */
        var ObjectMapper = com.fasterxml.jackson.databind.ObjectMapper;
        var objectMapper = new ObjectMapper();

		if (openApiSchema.startsWith("{") && openApiSchema.endsWith("}")) {
			// overriding above arguments - for now
			this.format = "JSON"
		} else {
			this.format = "YAML"
		}

        /* Check if YAML and if so, convert to Json */
        if ("YAML".equalsIgnoreCase(this.format)) {
            /* Use SnakeYAML to convert the YAML to a map that the ObjectMapper can read */
            var Yaml = Packages.org.yaml.snakeyaml.Yaml;
            /* Create instances of Yaml and ObjectMapper */
            var yaml = new Yaml();
            /* Parse YAML into a Java Map */
            var map = yaml.load(openApiSchema);

            /* Convert Java Map to JSON string */
            jsonString = objectMapper.writeValueAsString(map)
        } else {
            jsonString = openApiSchema;
        }

        this.schemaObj = fromJson(jsonString);
        return this.schemaObj
    }

	/*
		Parses the path and returns the name of the embedded UID attribute in the URL
	*/
	this.getEmbeddedUID = function(path) {
		var parts = system.splitString(path, "/");
		
		for (var i = 0; i < parts.length; i++) {
			var part = parts[i].trim();
			if (part.startsWith("{") && part.endsWith("}")) {
				// Found an embedded uid
				return part.substring(1, part.length-1)
			}
		}
		return null
	}

	/*
		Replaces the uid placeholder in the URL path with the uid value passed
 		The criteria argument is either an Entry or a string value
	*/
	this.replaceEmbeddedUID = function(path, criteria) {
		var parts = system.splitString(path, "/");
		var newPath = [parts[0]];
		
		for (var i = 1; i < parts.length; i++) {
			var part = parts[i].trim();
			if (part.startsWith("{") && part.endsWith("}")) {
				// Found an embedded uid
				var embeddedUID = part.substring(1, part.length-1);
				
				// If criteria is an Entry then grab the attribute value, else use the parameter value itself
				var uidValue = (criteria instanceof com.ibm.di.entry.Entry) ? entry[embeddedUID] : criteria;
				
				if (!uidValue) {
					throw new java.lang.Exception("UID attribute not mapped out or is null: " + embeddedUID)
				}	
				newPath.push(uidValue)
			} else {
				newPath.push(part)
			}
		}
		return newPath.join("/")
	}
	
	/*
		Uses .getChildren() to return the parameters array for the chosen path and action.
	*/
	this.getParameters = function(path, action) {
		var params = this.getChildren(["paths", path, action, "parameters"])
		return params
	}
	
    /* Returns the child elements (JS Obj) of the specified path
       Root level if no argument or blank text passed. Always return a JS object
    */
    this.getChildren = function(path) { 
        //var children = {};
        var subtree;
        
        if (!path) {
        	path = []
        }
        else 
        if (!(path instanceof Array)) {
        	path = [path]	
        }
        
        subtree = this.schemaObj[path[0]];
        for (var i = 1; i < path.length && subtree; i++) {
        	if (!subtree[path[i]]) { // This could be an array, so lets look for where we can find path[i]
        		if (subtree instanceof Array) {
	        		for (var j = 0; j < subtree.length; j++) {
	        			if (subtree[j][path[i]]) {
	        				subtree = subtree[j][path[i]];
	        				break
	        			}
	        		}
        		}
        		
        		// subtree does not exist
        		subtree = {}; // return empty
        	} else {
        		subtree = subtree[path[i]]
        	}
        }

        return subtree;
    }
    
    /* Main init logic */
    this.schemaArg = schema;
    this.format = format || "YAML";
    this.schemaObj = this.parseOpenAPIschema(schema)
}]]></parameter>
        </Script>
        
    <Script name="RESTIFY library class">
            <ModTime>1737026508610</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[// 20241127 2024 Created

// Restify script library class

function RESTIFY () {
	this.loadFileToByteArray = function(filepath) {
		var file = new java.io.File(filepath);
		var fis = new java.io.FileInputStream(file);
		var bytes = java.util.Arrays.copyOf("".getBytes(), file.length());
		fis.read(bytes); //read file into bytes[]
		fis.close();
		return bytes;
	}
	
	this.loadFileToString = function(filepath) {
		var sb = new java.lang.StringBuilder();
		var file = system.openFileForInput(filepath);
		var line;
		while ((line = file.readLine()) != null) {
			sb.append(line + "\n");
		}
		return sb.toString();
	}
	
	this.loadFileToArray = function(filepath, delimiter) {
		delimiter = delimiter || "\n";
		
		var sb = new java.lang.StringBuilder();
		var file = system.openFileForInput(filepath);
		var line;
		while ((line = file.readLine()) != null) {
			sb.append(line + "\n");
		}
		var str = sb.toString();
		return system.splitString(str, delimiter)
	}
	
	this.getCertificate = function(url) {
		try {
			var msg = com.ibm.di.security.GetSSLCertificate.installCertificateFrom(url, 443);
		} finally {}
	}
}]]></parameter>
        </Script>
    
        <Script name="OAuth Class">
            <ModTime>1733657022206</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[var OAUTH = null; // Will be instantiated below

// OAUTH is an object (as all js functions are) and is instantiated using this function (another object).
function OAuth2(params) {
	//
	// -- Token this.request parameters
	//
	this.params = params;
	this.debug = params.debug || false;
	this.url = params.url || "* url not specified *";

	//
	// -- Returns form-urlencoded string of an object
	//
	this.urlEncode = function(obj) {
		var arr = [];
		for (var f in obj) {
			arr.push(f + "=" + obj[f]);
		}
		return arr.join("&");
	}

	// 
	// -- Returns an initialized HTTP Client Connector
	//
	this.setupHTTPClient = function(params) {
		if (!this.httpClient) {
			this.httpClient = system.loadConnector("ibmdi.HTTPClient");
			for (var paramName in params) {
				this.httpClient.setParam(paramName, params[paramName])
			}
			this.httpClient.initialize(null);
		}
		return this.httpClient
	}

	//
	// -- Returns the access token if we have an access token that hasn't expired
	//
	this.getToken = function() {
		return this.response ? this.response.access_token : null;
	}

	//
	// -- Sends a this.request to get a new access token
	// -- @return String Access token
	// -- @throws Exception
	//
	this.requestToken = function() {

		// -- If we already have a valid token return that
		if (this.getToken() != null) {
			if (this.debug) {
				task.logmsg("OAuth: returning current token");
			}
			return this.getToken();
		}

		//
		// -- Create this.request entry object
		//
		this.request = system.newEntry();
		this.request["url"] = this.url;
		this.request["http.body"] = this.urlEncode(this.params);
		this.request["http.method"] = "POST";
		this.request["http.content-type"] = "application/x-www-form-urlencoded";
		this.request["grant_type"] = this.params["grant_type"];
		//		this.request["grant_type"] = "client_credentials";
		this.request["scope"] = this.params["scope"];
		//		this.request["scope"] = "gmail.readonly";
		this.request["redirect_uri"] = this.params["redirect_uri"] | "url:itef:wg:oauth:2.0:oob";
		this.request["client_id"] = this.params["client_id"];
		this.request["client_secret"] = this.params["client_secret"];

		if (this.debug) {
			task.logmsg("Requesting AccessToken: url=" + this.url);
			task.logmsg(this.request.toJSON());
		}

		do {
			//
			// -- Send token this.request
			//
			this.setupHTTPClient(this.params);
			var response = this.httpClient.queryReply(this.request);
			var httpCode = response.getString("http.responseCode");

			// Log and check response for errors
			if (this.debug) {
				task.logmsg("this.request Access Token Response");
				task.logmsg("" + this.response);
			}
			if (response && response["http.bodyAsString"] != null) {
				var json = response["http.bodyAsString"].getValue();

				// Try to parse it
				try {
					this.response = fromJson(json);
	 				// See if it's an error
					if (this.response.error) {
						var err = "Error: " + this.response.error + ": " + this.response.error_description;
						this.response = null;
						throw err;
					}					
				} catch (parsingException) {
					// I guess it's not JSON
					this.response = {error: "Return is NOT JSON!"}
				}
			}

			// Check for redirect
			if (httpCode == 302) {
				var location = response.getString("http.Location");
				task.logmsg("Redirecting to: " + location);
				this.httpClient.setParam("url", location);
				this.httpClient.terminate();
				this.httpClient.initialize(null);
			}
		} while (httpCode == 302 && location.toLowerCase().indexOf("error") < 0)

		// Return the token	
		return this.getToken();

	};
}

// Return the OAUTH object itself
function getOAUTH() {
	return OAUTH
}

// Returns the OAuth access token
function getOAuthAccessToken(args) {
	// If this is the first time called, set up the OAuth2 object
	if (OAUTH == null) {
		type = args["grant_type"];
		if (type != "password") {
			args.grant_type = "client_credentials";
		}
		if (args.debug) {
			task.logmsg("Create OAuth2 this.request");
			task.logmsg(work.fromJSON(toJson(args)));
		}
		OAUTH = new OAuth2(args);
	}
	return OAUTH.requestToken();
}

// Returns a delimited string with the full stacktrace for the passed Exception e
function fullStacktrace(e, delimArg) {
	var delim = delimArg || "\n";
	var starry = [];
	// Log the full stack trace
	var stackTrace = e.getStackTrace(); // Get the stack trace as an array
	for (var i = 0; i < stackTrace.length; i++) {
		starry.push(stackTrace[i].toString())
	}
	return starry.join(delim)
}]]></parameter>
        </Script>
    <Script name="itim_swagger.json">
            <ModTime>1733750174652</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[{
    "openapi": "3.0.3",
    "info": {
        "title": "Merged documentation",
        "version": "1.0"
    },
    "servers": [{
        "url": "https://192.168.2.39:30943"
    }],
    "tags": [{
        "name": "Access Administration Batch Submit"
    }, {
        "name": "Access Management"
    }, {
        "name": "Activity Management"
    }, {
        "name": "Delegation Management"
    }, {
        "name": "Entitlement Assignments"
    }, {
        "name": "Entitlement Management"
    }, {
        "name": "Identity Policy Management"
    }, {
        "name": "LifecycleRule Management"
    }, {
        "name": "Organizational Management API"
    }, {
        "name": "Password Management"
    }, {
        "name": "Password Policy Management"
    }, {
        "name": "Person Management"
    }, {
        "name": "Search"
    }, {
        "name": "Service Management"
    }, {
        "name": "System User Management"
    }, {
        "name": "ARC Statistics APIs"
    }, {
        "name": "ARC User APIs"
    }, {
        "name": "Activity Folder APIs"
    }, {
        "name": "Business Activity APIs"
    }, {
        "name": "Business Activity Bulk APIs"
    }, {
        "name": "Business Activity Group Bulk APIs"
    }, {
        "name": "Mitigation APIs"
    }, {
        "name": "Mitigation Bulk APIs"
    }, {
        "name": "Permission Group Bulk APIs"
    }, {
        "name": "Risk APIs"
    }, {
        "name": "Risk Bulk APIs"
    }],
    "paths": {
        "/lifecyclerule/{lifecycleRuleIdentifier}": {
            "get": {
                "tags": ["LifecycleRule Management"],
                "summary": "LifecycleRule Lookup",
                "description": "Returns information about the specified Lifecycle Rule.",
                "parameters": [{
                    "name": "lifecycleRuleIdentifier",
                    "in": "path",
                    "description": "Unique Identifier for a lifecycleRule.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for the LifecycleRule. The specified attributes are returned in the \"_attributes\" section of the response. Specifying a value of \"*\" returns all attributes. By default, all the attributes are returned. Example - ?attributes=filter,decription",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/lifecyclerule/OTA4ODM0OTc2NDIwODE5ODI4MHxudWxsfG51bGw",
                                            "title": "Deletion Lifecycle Rule"
                                        }
                                    },
                                    "_attributes": {
                                        "name": "Deletion Lifecycle Rule",
                                        "operation": "delete"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["LifecycleRule Management"],
                "summary": "LifecycleRule Modify",
                "description": "Modifies information for specified lifecycle Rule. This API modifies attributes of lifecycle rule as well as update schedules. If you add new schedule and do not wish to remove previously set schedules , then provide new schedule along with previous schedules in request body. \r\n\r\n_attributes : JSON representation of the lifecycle attributes to be modified. Following attributes can be specified. \r\n\r\nname : Can be specified to modify the name of the lifecycle rule. \r\n\r\ndescription : Can be specified to modify the description of the lifecycle Rule. \r\n\r\nOperationName : Can be specified to modify the operation to be invoked by the lifecycle Rule. \r\n\r\nFilter : Can be specified to modify the lifecycle rule filter. \r\n\r\nschedules : JSON representation of array of lifecycle schedules to be set. It is an optional attribute. In each schedule you can specify hour, minute, month, day of the week, days of the week, day of the month, quarterly, and semi-annually. Each attribute of the schedule JSON is explained below. \r\n\r\nhour: hour of the schedule. Allowed values are 0-23. To specify hourly schedule set hour = -1. \r\n\r\nminute : minute of the schedule. Allowed values are 0-59. \r\n\r\ndayOfMonth : day of month of the schedule (-1 if every day). This attribute is exclusive with dayOfWeek. To set the dayOfMonth value other than -1(daily), the month value must be set either to specific month or -1(monthly). Allowed values are 1-28, if the schedule is set to monthly, otherwise the allowed value varies according to the month value. \r\n\r\nmonth : month of the schedule (-1 if every month). Allowed values are 1-12 (1 = January, 2 = February, ...). \r\n\r\ndayOfWeek : day of week of the schedule (-1 if every day). This attribute is deprecated for weekly schedule. This attribute is exclusive with dayOfMonth. Allowed values are 1-7 (1 = Sunday, 2 = Monday,...) \r\n\r\ndaysOfWeek : days of week of the weekly schedule. Allowed values are 1-7 (1 = Sunday, 2 = Monday,...) and multiple values are specified in pipe-separated format (1|2 = Sunday and Monday). Value should be the valid String or the null. \r\n\r\ndayOfQuarter : (0 to disable quarterly schedule, otherwise 1-90). dayOfQuarter is exclusive with dayOfMonth, dayOfWeek and dayOfSemiAnnual. Therefore if dayOfQuarter is set then value of dayOfMonth and dayOfWeek is ignored. \r\n\r\ndayOfSemiAnnual : (0 to disable semi-annual schedule, otherwise 1-180). dayOfSemiAnnual is exclusive with dayOfMonth, dayOfWeek and dayOfQuarter. \r\n",
                "parameters": [{
                    "name": "lifecycleRuleIdentifier",
                    "in": "path",
                    "description": "Unique identifier for a LifecycleRule.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModifyLifecycleRuleRequestBeanSwagger"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "severity": "E",
                                    "text": "CTGIMZ052E HTTP POST request data has an invalid data structure for field \" Schedule\".",
                                    "id": "CTGIMZ052",
                                    "inserts": [" Schedule"],
                                    "key": "com.ibm.isim.rest.data.INVALID_DATA_FOR"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["LifecycleRule Management"],
                "summary": "LifecycleRule Remove",
                "description": "Remove the specified LifecycleRule.",
                "parameters": [{
                    "name": "lifecycleRuleIdentifier",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful"
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "severity": "E",
                                    "text": "CTGIMZ052E HTTP POST request data has an invalid data structure for field \"invalid Identifier\".",
                                    "id": "CTGIMZ052",
                                    "inserts": ["invalid Identifier"],
                                    "key": "com.ibm.isim.rest.data.INVALID_DATA_FOR"
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/organizationcontainers/{category}/{orgContainerId}": {
            "get": {
                "tags": ["Search"],
                "summary": "Organization Container Lookup",
                "description": "Returns information about the specified organizational container.",
                "parameters": [{
                    "name": "category",
                    "in": "path",
                    "description": "Specifies the type of organizational container to look up. Valid values are - \"admindomains\", \"bporganizations\", \"organizationunits\", \"locations\", and \"organizations\". The values are case=insensitive.",
                    "required": true,
                    "schema": {
                        "enum": ["admindomains", "bporganizations", "organizationunits", "locations", "organizations"],
                        "type": "string"
                    }
                }, {
                    "name": "orgContainerId",
                    "in": "path",
                    "description": "Unique Identifier for an organizational container.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies comma-separated attributes to return for the organizational container. The specified attributes are returned in the \"_attributes\" section of the response. Specifying a value of \"*\" returns all of the attributes. By default all the attributes are returned. Example - ?attributes=l",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "embedded",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for a reference attribute of an organizational container (eg. ersupervisor). The specified attributes are returned in the \"_embedded\" section of the response. Specifying a value of '*' after reference attribute returns all the properties of the reference attribute. Example - ?embedded=ersupervisor.cn.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/organizationcontainers/locations/ZXJnbG9iYWxpZD02OTczMDEyMjg3MDkyNTUzMTIwLG91PW9yZ0NoYXJ0LGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                            "title": "Raleigh"
                                        }
                                    },
                                    "_embedded": {
                                        "ersupervisor": {
                                            "_links": {
                                                "formTemplate": {
                                                    "href": "/itim/rest/forms?requestee=/itim/rest/people/ZXJnbG9iYWxpZD02ODkyNzY4MDY5NTM2ODU0NTQ2lLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ&filterId=formSearch"
                                                },
                                                "self": {
                                                    "href": "/itim/rest/people/ZXJnbG9iYWxpZD02ODkyNzY4MDY5NTM2ODU0NTQ2LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                                    "title": "Alan Smith"
                                                }
                                            },
                                            "_attributes": {
                                                "cn": "Alan Smith"
                                            }
                                        }
                                    },
                                    "_attributes": {
                                        "l": "Raleigh"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/workitems": {
            "put": {
                "tags": ["Activity Management"],
                "summary": "Batch work items modify",
                "description": "Modifies a batch of work items by either approving or rejecting the activity request.",
                "parameters": [{
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "methodOverride",
                    "in": "header",
                    "description": "Specifies the HTTP method override. The value of this parameter is - \"submit-in-batch\". ",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WorkItemBatchUpdateBeanSwagger"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {}
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/entitlements/assignments/search": {
            "post": {
                "tags": ["Entitlement Assignments"],
                "summary": "Enttilement Assignments Search",
                "description": "Returns all role assignment attributes that match the specified search criteria.",
                "parameters": [{
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items that the search returns.",
                    "required": false,
                    "schema": {
                        "type": "integer"
                    },
                    "example": 1000
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "Specifies the page to retrieve. Specify 1 for the first page.",
                    "required": false,
                    "schema": {
                        "type": "integer"
                    },
                    "example": 1
                }, {
                    "name": "user",
                    "in": "query",
                    "description": "Specifies the user for the search. It is the encoded value that is returned by the people search API",
                    "required": false,
                    "schema": {
                        "type": "string"
                    },
                    "example": "ZXJnbG9iYWxpZD0zMjg2NjA4OTcyMzIxNjYyNDQ4LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9aXN2Z2ltLGRjPWNvbQ=="
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The 'no-cache' \"\r\n\t\t\t\t\t+ \"option performs the search without referencing any cache. The 'delete-cache' option deletes the cache. \"\r\n\t\t\t\t\t+ \"In this case, empty search results are returned",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SearchAssignmentRequestBeanSwagger"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/json": {
                                "example": {
                                    "count": 1,
                                    "limit": 1000,
                                    "resources": [{
                                        "code": {
                                            "href": "/itim/rest/v1.2/entitlements/assignments/MzQwMTgzNjg0OTQ3Mjg3NDE3MA"
                                        },
                                        "assignmentAttributes": [{
                                            "values": ["12/16/2022"],
                                            "name": "enddate"
                                        }, {
                                            "values": ["in-person"],
                                            "name": "method"
                                        }, {
                                            "values": ["08/15/2022"],
                                            "name": "startdate"
                                        }, {
                                            "values": ["chris.miller"],
                                            "name": "instructors"
                                        }],
                                        "entitlement": {
                                            "href": "/itim/rest/roles/ZXJnbG9iYWxpZD0zMjkwMjU2ODQ3MDcwNzgyNzQ5LG91PXJvbGVzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9aXN2Z2ltLGRjPWlzdmdpbSxkYz1pc3Zn",
                                            "title": "Java Programming"
                                        },
                                        "user": {
                                            "href": "/itim/rest/people/ZXJnbG9iYWxpZD0zMjg2NjA4OTcyMzIxNjYyNDQ4LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9aXN2Z2ltLGRjPWlzdmdpbSxkYz1pc3Zn",
                                            "title": "John Doe"
                                        },
                                        "properties": {
                                            "rightsRef": "ZXJnbG9iYWxpZD0zMjkwMjU2ODQ3MDcwNzgyNzQ5LG91PXJvbGVzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9aXN2Z2ltLGRjPWlzdmdpbSxkYz1pc3Zn"
                                        },
                                        "entitlementName": "Java Programming"
                                    }],
                                    "page": 1
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/workitems/userrecert/{workitemId}": {
            "put": {
                "tags": ["Activity Management"],
                "summary": "Work Item Modify for User Re-certification",
                "description": "Modifies a work item by executing an action provided for the activity.",
                "parameters": [{
                    "name": "workitemId",
                    "in": "path",
                    "description": "Unique identifier for a work item.",
                    "required": true,
                    "schema": {
                        "format": "int64",
                        "type": "integer"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecertifyWorkItemSwagger"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK. The request was successful"
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/activities/quicksearches": {
            "get": {
                "tags": ["Activity Management"],
                "summary": "Activities Quick Search",
                "description": "Returns information about quick searches for activities that are sorted by due date.",
                "parameters": [{
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items that the search returns. Example. ?limit=1000",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/activities/quicksearches"
                                        }
                                    },
                                    "_attributes": {
                                        "requesters": [{
                                            "_links": {
                                                "self": {
                                                    "href": "/itim/rest/people/ZXJnbG9iYWxpZD0yNDYwMzAyNzQ2NDgxODM3NDk3LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                                    "title": "James Pearch"
                                                }
                                            },
                                            "_attributes": {
                                                "filter": "requester;x-link=/itim/rest/people/ZXJnbG9iYWxpZD0yNDYwMzQ2NDgxODM3NDk3LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsbb3JnLGRjPWNvbQ"
                                            }
                                        }],
                                        "requestees": [{
                                            "_links": {
                                                "self": {
                                                    "href": "/itim/rest/people/ZXJnbG9iYWxpZD0yNDYwMzAyNDk3OTQ1MjgyODcxLG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                                    "title": "Alan Smith"
                                                }
                                            },
                                            "_attributes": {
                                                "filter": "requestee;x-link=/itim/rest/people/ZXJnbG9iYWxpZD0yNDYwMzAyNDk3OTQ1MjgyODcxLG913U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ"
                                            }
                                        }],
                                        "subjects": [{
                                            "_links": {
                                                "self": {
                                                    "href": "/itim/rest/access/2460300160735116790",
                                                    "title": "GSA"
                                                }
                                            },
                                            "_attributes": {
                                                "filter": "access;x-link=/itim/rest/access/2460300160735116790"
                                            }
                                        }, {
                                            "_links": {
                                                "self": {
                                                    "href": "/itim/rest/access/2460300385874741343",
                                                    "title": "East Region Fileshare"
                                                }
                                            },
                                            "_attributes": {
                                                "filter": "access;x-link=/itim/rest/access/2460300385874741343"
                                            }
                                        }, {
                                            "_links": {
                                                "self": {
                                                    "href": "/itim/rest/access/2460300685064242489",
                                                    "title": "Intranet"
                                                }
                                            },
                                            "_attributes": {
                                                "filter": "access;x-link=/itim/rest/access/2460300685064242489"
                                            }
                                        }, {
                                            "_links": {
                                                "self": {
                                                    "href": "/itim/rest/access/2460300534814505620",
                                                    "title": "Payroll"
                                                }
                                            },
                                            "_attributes": {
                                                "filter": "access;x-link=/itim/rest/access/2460300534814505620"
                                            }
                                        }]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/people/{personId}": {
            "get": {
                "tags": ["Person Management"],
                "summary": "Person Lookup",
                "description": "Returns information about the specified user.",
                "parameters": [{
                    "name": "personId",
                    "in": "path",
                    "description": "Unique Identifier for a user.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for the user. The specified attributes are returned in the \"_attributes\" section of the response. Specifying a value of \"*\" returns all attributes. By default, all the attributes are returned. Example - ?attributes=mail,telephoneNumber",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "embedded",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for reference attributes of a user (eg. manager). The specified attributes are returned in the \"_embedded\" section of the response. Specifying a value of '*' after reference attribute returns all the properties of the reference attribute. Example - ?embedded=manager.name,manager.telephoneNumber",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "forms",
                    "in": "query",
                    "description": "Specifies the boolean. If true, then the form is returned for the user.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "formTemplate": {
                                            "href": "/itim/rest/forms?requestee=/itim/rest/people/ZXJnbG9iYWxpZD0zMjg3NTk3Njg0MDU0MDg0MTYsb3U9MCxvdT1wZW9wbGUsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t&filterId=formSearch"
                                        },
                                        "manager": {
                                            "href": "/itim/rest/people/ZXJnbG9iYWxpZD0zMjg3NTk3NjYzMjY3Njc5MDksb3U9MCxvdT1wZW9wbGUsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t"
                                        },
                                        "self": {
                                            "href": "/itim/rest/people/ZXJnbG9iYWxpZD0zMjg3NTk3Njg0MDU0MDg0MTYsb3U9MCxvdT1wZW9wbGUsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t",
                                            "title": "Alan Smith"
                                        },
                                        "erparent": {
                                            "href": "/itim/rest/organizationcontainers/organizations/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t"
                                        }
                                    },
                                    "_attributes": {
                                        "uid": "asmith",
                                        "ercustomdisplay": "Smith",
                                        "ersupervisor": "erglobalid=328759766326767909,ou=0,ou=people,erglobalid=00000000000000000000,ou=org,dc=com",
                                        "mail": "asmith@ibm.com",
                                        "manager": "erglobalid=328759766326767909,ou=0,ou=people,erglobalid=00000000000000000000,ou=org,dc=com",
                                        "givenname": "Alan",
                                        "erpersonstatus": "ACTIVE",
                                        "name": "Alan Smith",
                                        "sn": "Smith",
                                        "cn": "Alan Smith",
                                        "personType": "Person",
                                        "erparent": "erglobalid=00000000000000000000,ou=org,dc=com"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Person Management"],
                "summary": "Person Modify",
                "description": "Modifies information for the specified user.",
                "parameters": [{
                    "name": "personId",
                    "in": "path",
                    "description": "Unique identifier for a user.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "X-HTTP-Method-Override",
                    "in": "header",
                    "description": "Use 'suspend' to suspend a person. Example - X-HTTP-Method-Override=suspend \n\r\nUse 'restore' to restore a suspended person. Example - X-HTTP-Method-Override=restore \n\r\nThe default if this header is not specified is to send a PUT request",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [{
                                    "$ref": "#/components/schemas/PersonSuspendRestoreBeanSwagger"
                                }, {
                                    "$ref": "#/components/schemas/PersonModifyBeanSwagger"
                                }]
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "The requested was accepted.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "requestId": "2565810057541954463",
                                    "changeComplete": false,
                                    "status": 0
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Person Management"],
                "summary": "Person Delete",
                "description": "Deletes the specified user.",
                "parameters": [{
                    "name": "personId",
                    "in": "path",
                    "description": "Unique identifier for a user.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "The requested was accepted.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonDeleteResponseBean"
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/apisecurity/v1.0/runtime/entitlements": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/passwordpolicy": {
            "get": {
                "tags": ["Password Policy Management"],
                "summary": "Search Password Policy",
                "description": "Returns information about password policies matching the specified search criteria (if any). \r\n\r\nNotes: \r\n\r\nThe \"erpolicyitemname\" of the password policy is returned in the _links.self.title property. \r\n\r\nBy default, no attributes are returned. The client must specify the \"attributes\" query parameter to request the attributes to be returned in the \"_attributes\" property of each service.\r\n",
                "parameters": [{
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for each password policy. The specified attributes are returned in the \"_attributes\" property of each password policy. Specifying a value of \"*\" returns all attributes. Example - ?attributes=rules,erpolicytarget,erenabled",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items that the search returns. Example - ?limit=1000",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "description": "Specifies the attribute and order (\"+\" for ascending, \"-\" for descending) for sorting the returned service. Note: The client is responsible for performing URL encoding if necessary. Example - ?sort=%2Bdescription (%2B is UTF-8 encoding for + sign)",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The 'no-cache' option specifies performs the search without refererencing any cache. The 'delete-cache' option deletes the cache. In this case, empty search results are returned. Example - Cache-Control = no-cache ",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Range",
                    "in": "header",
                    "description": "Specifies the range of items to return. Note: The range uses a zero-based index. Example - items=0-99 ",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/passwordpolicy/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDEwMSxvdT1wb2xpY2llcyxlcmdsb2JhbGlkPTAwMDAwMDAwMDAwMDAwMDAwMDAwLG91PW9yZyxkYz1jb20",
                                            "title": "Default password policy for ITIM service"
                                        }
                                    },
                                    "_attributes": {
                                        "erenabled": "true",
                                        "erscope": "2",
                                        "description": "Disallow empty password for ITIM service"
                                    }
                                }, {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/passwordpolicy/ZXJnbG9iYWxpZD01MTMxOTMxNDM2MDk5NjA2OTEzLG91PXBvbGljaWVzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                            "title": "REST password-Policy"
                                        }
                                    },
                                    "_attributes": {
                                        "erenabled": "true",
                                        "erscope": "2",
                                        "description": "abc-desc"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Password Policy Management"],
                "summary": "Password Policy Create",
                "description": "Creates a new Password Policy with the given attributes. \r\n\r\norgID : The ID of the Organization container in which this Password Policy is to be created. This parameter is required. \r\n\r\nrules : JSON representation of the Password Policy rules to be set. Below are the attributes than can be used. \r\n\r\nminLength(Minimum length) : Minimum length of the password to be generated. Numeric values allowed. By default, -1 is set indicating that the rule is disabled. \r\n\r\nmaxLength(Maximum length) : Maximum length of the password to be generated. Numeric values allowed. By default, -1 is set indicating that the rule is disabled. \r\n\r\nmaxSequentialCharacters(Maximum repeated characters) : Maximum allowed number of sequential characters within the password. Numeric values allowed. By default, -1 is set indicating that the rule is disabled. \r\n\r\nrepeatedHistoryLength(Repeated history length) : Length of the password history used to check for repeating passwords. Numeric values allowed. By default, -1 is set indicating that the rule is disabled. \r\n\r\nreversedHistoryLength(Reversed history length) : length of the password history used to check for repeating passwords spelled backwards. Numeric values allowed. By default, -1 is set indicating that the rule is disabled. \r\n\r\nallowUserID(Allow user ID) : Allow or disallow userID in password. It is case sensitive. Allowed values are true and false. By default, true is set. \r\n\r\nallowUserIDCaseInsensitive(Allow user ID with case insensitivity) : Allow or disallow userID in password regardless of upper and lower cases. Allowed values are true and false. By default, true is set. \r\n\r\nallowUserName(Allow user name) : Allow or disallow user name in password. It is case sensitive. Allowed values are true and false. By default, true is set. \r\n\r\nallowUserNameCaseInsensitive(Allow user name with case insensitivity) : Allow or disallow user name in password regardless of upper and lower cases. Allowed values are true and false. By default, true is set. \r\n\r\nallowInDictionary(Allow in dictionary) : Allow or disallow the use of passwords defined in password dictionary. Allowed values are true and false. By default, true is set. \r\n\r\ninvalidChars(Characters not allowed) : Characters which are not to be used within the password. \r\n\r\nrequiredChars(Required characters) : Characters one of which which must used within the password. \r\n\r\nrestrictedToChars(Restricted to characters) : Characters from which the password must be created. \r\n\r\nstartsWithChars(Starts with characters) : Characters one of which must be the first character set of the generated password. \r\n\r\nminDistinctCharacters(Minimum unique characters) : Minimum required number of distinct characters within the password. Numeric values allowed. By default, -1 is set indicating that the rule is disabled. \r\n\r\nminAlphabeticCharacters(Minimum alphabetic characters) : Minimum required number of alphabetic characters within the password. Numeric values allowed. By default, -1 is set indicating that the rule is disabled. \r\n\r\nminDigitCharacters(Minimum numeric characters) : Minimum required number of numeric characters within the password. Numeric values allowed. By default, -1 is set indicating that the rule is disabled. \r\n\r\npasswordComplexity(Password complexity rule) : Enabled password complexity rule. Allowed value are true and false. By default, false is set. \r\n\r\ncustomRules : JSON representation of custom password rules to be enforced for the policy. The key contains the full qualified name of the rule class as specified in passwordrules.properties. For example, if passwordrule.properties contains a rule name password.rule.examples.passwordrules.RegularExpressionRule, then the key here will be examples.passwordrules.RegularExpressionRule. The value parameter can contain boolean value or any other value as per the property value of the rule in passwordrules.properties. For example, if the value is set to false in the passwordrules.properties, then the user can specify true or false. \"customRules\": { \"examples.passwordrules.RegularExpressionRule\": \"true\" } \r\n\r\npolicyTargets : JSON representation of array of policy targets to be set for the password policy. Allowed values for constant are ALL_SERVICE(the policy will be applicable for all services in the system. In this case if any value is specified, it is ignored), SPECIFIC_SERVICE(the policy will be applicable for a specific service which is specified by the service URI) and SERVICE_TYPE(the policy will be applicable for a specific service type which is specified by the service profile name e.g WinLocalProfile). Please note, for SERVICE_TYPE, only service profiles other than ITIM service, hosted service and HR feed are allowed. Services specified by SPECIFIC_SERVICE must belong to the same org container for which the policy is being created. \r\n\r\n_attributes : JSON representation of the Password Policy attributes to be set. Below are the attributes than can be used. \r\n\r\nerpolicyitemname : Name of the password policy. It is a mandatory parameter. \r\n\r\nerscope : Scope of the password policy. Allowed value are 2(this business unit and sub units) and 1(this business unit only). It is a mandatory parameter. \r\n\r\nerenabled : Specifies whether the password policy will be enabled or disabled as soon as the policy is created. Allowed values are true and false. It is a mandatory parameter. \r\n\r\ndescription : Description of the password policy. It is an optional parameter. \r\n\r\nerlabel : Specifies a caption for the password policy. It is an optional parameter. \r\n\r\nerkeywords : Specifies keywords for the password policy. It is an optional parameter. \r\n",
                "parameters": [{
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreatePasswordPolicyRequestBeanSwagger"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/passwordpolicy/ZXJnbG9iYWxpZD02MzI4NTE2NjQyMTU3MTQzOTIwLG91PXBvbGljaWVzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                            "title": "REST password-Policy new"
                                        },
                                        "erparent": {
                                            "href": "/itim/rest/organizationcontainers/organizations/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t",
                                            "title": "Organization"
                                        }
                                    },
                                    "_attributes": {
                                        "erenabled": "true",
                                        "erglobalid": "6328516642157143920",
                                        "erscope": "1",
                                        "erkeywords": "Policy new",
                                        "description": "test new",
                                        "rules": {
                                            "allowUserIDCaseInsensitive": true,
                                            "minDistinctCharacters": -1,
                                            "reversedHistoryLength": -1,
                                            "minLength": 5,
                                            "repeatedHistoryLength": -1,
                                            "allowInDictionary": true,
                                            "maxValidityPeriod": -1,
                                            "passwordComplexity": false,
                                            "allowUserName": true,
                                            "customRules": {
                                                "examples.passwordrules.RegularExpressionRule": "true"
                                            },
                                            "maxSequentialCharacters": -1,
                                            "allowUserNameCaseInsensitive": true,
                                            "minAlphabeticCharacters": 3,
                                            "allowUserID": true,
                                            "invalidChars": "",
                                            "requiredChars": "",
                                            "restrictedToChars": "",
                                            "minValidityPeriod": -1,
                                            "minDigitCharacters": -1,
                                            "maxLength": 13,
                                            "startsWithChars": ""
                                        },
                                        "erpolicytarget": ["SPECIFIC_TYPE; WinLocalProfile", "SPECIFIC_SERVICE; ZXJnbG9iYWxpZD05MzM3OTgyNzQyNzQxMDUwMzQsb3U9c2VydmljZXMsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t"],
                                        "objectclass": ["top", "erPasswordPolicy", "erManagedItem", "erPolicyBase", "erPolicyItemBase"],
                                        "erpolicyitemname": "REST password-Policy new",
                                        "erparent": "erglobalid=00000000000000000000,ou=org,dc=com"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/requests/cancel/{requestId}": {
            "post": {
                "tags": ["Search"],
                "summary": "Request to Cancel",
                "description": "Request to cancel that is in pending status.",
                "parameters": [{
                    "name": "requestId",
                    "in": "path",
                    "description": "Unique Identifier for a request.",
                    "required": true,
                    "schema": {
                        "format": "int64",
                        "type": "integer"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful."
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/tasks/me/{category}": {
            "get": {
                "tags": ["Search"],
                "summary": "Task Search",
                "description": "Returns a list of tasks that can be performed by the currently logged in user.",
                "parameters": [{
                    "name": "category",
                    "in": "path",
                    "description": "Identifies the application that is currently being accessed by user. Valid values are console, selfservice, and servicecenter.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_id": "SVCENTER_CHANGE_PASSWORD",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }, {
                                    "_id": "SVCENTER_CHANGE_PASSWORD_FOR_MYSELF",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }, {
                                    "_id": "SVCENTER_DELEGATION_SCHEDULE",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }, {
                                    "_id": "SVCENTER_MANAGE_MY_ACCESS",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }, {
                                    "_id": "SVCENTER_MANAGE_MY_ACTIVITY",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }, {
                                    "_id": "SVCENTER_MANAGE_MY_PROFILE",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }, {
                                    "_id": "SVCENTER_MANAGE_OTHERS_ACCESS",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }, {
                                    "_id": "SVCENTER_MANAGE_OTHERS_PROFILE",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }, {
                                    "_id": "SVCENTER_MODIFY_ACCESS",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }, {
                                    "_id": "SVCENTER_MODIFY_ACCESS_FOR_MYSELF",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }, {
                                    "_id": "SVCENTER_MODIFY_PROFILE",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }, {
                                    "_id": "SVCENTER_MODIFY_PROFILE_FOR_MYSELF",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }, {
                                    "_id": "SVCENTER_REQUEST_ACCESS",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }, {
                                    "_id": "SVCENTER_REQUEST_ACCESS_FOR_MYSELF",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }, {
                                    "_id": "SVCENTER_VIEW_ACCESS",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }, {
                                    "_id": "SVCENTER_VIEW_ACCESS_FOR_MYSELF",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }, {
                                    "_id": "SVCENTER_VIEW_PROFILE",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }, {
                                    "_id": "SVCENTER_VIEW_PROFILE_FOR_MYSELF",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }, {
                                    "_id": "SVCENTER_VIEW_REQUEST_STATUS",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }, {
                                    "_id": "SVCENTER_VIEW_TODO_LIST",
                                    "_attributes": {
                                        "isCustom": false,
                                        "category": "servicecenter"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/passwordpolicy/{passwordPolicyId}": {
            "get": {
                "tags": ["Password Policy Management"],
                "summary": "Password Policy Lookup",
                "description": "Returns information about the specified password policy.",
                "parameters": [{
                    "name": "passwordPolicyId",
                    "in": "path",
                    "description": "Unique Identifier for the password policy.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for the password policy. The specified attributes are returned in the \"_attributes\" section of the response. Specifying a value of \"*\" will return all of the attributes. By default all the attributes are returned. Example - ?attributes=erpolicytarget,description,rules",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/passwordpolicy/ZXJnbG9iYWxpZD00MDQ2MDQwOTE4NDI0MDQ3MTAxLG91PXBvbGljaWVzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                            "title": "REST password-Policy new"
                                        }
                                    },
                                    "_attributes": {
                                        "description": "Trial password policy",
                                        "rules": {
                                            "allowUserIDCaseInsensitive": true,
                                            "minDistinctCharacters": -1,
                                            "reversedHistoryLength": -1,
                                            "minLength": 5,
                                            "repeatedHistoryLength": -1,
                                            "allowInDictionary": true,
                                            "maxValidityPeriod": -1,
                                            "passwordComplexity": false,
                                            "allowUserName": false,
                                            "customRules": {
                                                "examples.passwordrules.RegularExpressionRule": "qqq"
                                            },
                                            "maxSequentialCharacters": -1,
                                            "allowUserNameCaseInsensitive": true,
                                            "minAlphabeticCharacters": 3,
                                            "allowUserID": true,
                                            "invalidChars": "",
                                            "requiredChars": "",
                                            "restrictedToChars": "",
                                            "minValidityPeriod": -1,
                                            "minDigitCharacters": -1,
                                            "maxLength": 13,
                                            "startsWithChars": ""
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Password Policy Management"],
                "summary": "Password Policy Modify",
                "description": "Modifies a Password Policy with the given attributes. Please note, at least one of rules, policyTargets or _attributes will need to be specified. \r\n\r\nrules : JSON representation of the Password Policy rules to be set. Below are the attributes than can be used. This is an optional parameter. \r\n\r\nNote : In order to disable an existing rule, the rule name will need to be specified with it's default value e.g \"minLength\" : \"-1\" \r\n\r\nminLength(Minimum length) : Minimum length of the password to be generated. Numeric values allowed. By default, -1 is set indicating that the rule is disabled. \r\n\r\nmaxLength(Maximum length) : Maximum length of the password to be generated. Numeric values allowed. By default, -1 is set indicating that the rule is disabled. \r\n\r\nmaxSequentialCharacters(Maximum Repeated Characters) : Maximum allowed number of sequential characters within the password. Numeric values allowed. By default, -1 is set indicating that the rule is disabled. \r\n\r\nrepeatedHistoryLength(Repeated history length) : Length of the password history used to check for repeating passwords. Numeric values allowed. By default, -1 is set indicating that the rule is disabled. \r\n\r\nreversedHistoryLength(Reversed history length) : length of the password history used to check for repeating passwords spelled backwards. Numeric values allowed. By default, -1 is set indicating that the rule is disabled. \r\n\r\nallowUserID(Allow user ID) : Allow or disallow userID in password. It is case sensitive. Allowed values are true and false. By default, true is set. \r\n\r\nallowUserIDCaseInsensitive(Allow user ID with case insensitivity) : Allow or disallow userID in password regardless of upper and lower cases. Allowed values are true and false. By default, true is set. \r\n\r\nallowUserName(Allow user name) : Allow or disallow user name in password. It is case sensitive. Allowed values are true and false. By default, true is set. \r\n\r\nallowUserNameCaseInsensitive(Allow user name with case insensitivity) : Allow or disallow user name in password regardless of upper and lower cases. Allowed values are true and false. By default, true is set. \r\n\r\nallowInDictionary(Allow in dictionary) : Allow or disallow the use of passwords defined in password dictionary. Allowed values are true and false. By default, true is set. \r\n\r\ninvalidChars(Characters not allowed) : Characters which are not to be used within the password. \r\n\r\nrequiredChars(Required characters) : Characters one of which which must used within the password. \r\n\r\nrestrictedToChars(Restricted to characters) : Characters from which the password must be created. \r\n\r\nstartsWithChars(Starts with characters) : Characters one of which must be the first character set of the generated password. \r\n\r\nminDistinctCharacters(Minimum unique characters) : Minimum required number of distinct characters within the password. Numeric values allowed. By default, -1 is set indicating that the rule is disabled. \r\n\r\nminAlphabeticCharacters(Minimum alphabetic characters) : Minimum required number of alphabetic characters within the password. Numeric values allowed. By default, -1 is set indicating that the rule is disabled. \r\n\r\nminDigitCharacters(Minimum numeric characters) : Minimum required number of numeric characters within the password. Numeric values allowed. By default, -1 is set indicating that the rule is disabled. \r\n\r\npasswordComplexity(Password complexity rule) : Enabled password complexity rule. Allowed value are true and false. By default, false is set. \r\n\r\ncustomRules : JSON representation of custom password rules to be enforced for the policy. The key contains the full qualified name of the rule class as specified in passwordrules.properties. For example, if passwordrule.properties contains a rule name password.rule.examples.passwordrules.RegularExpressionRule, then the key here will be examples.passwordrules.RegularExpressionRule. The value parameter can contain boolean value or any other value as per the property value of the rule in passwordrules.properties. For example, if the value is set to false in the passwordrules.properties, then the user can specify true or false. \"customRules\": { \"examples.passwordrules.RegularExpressionRule\": \"true\" } \r\n\r\npolicyTargets : JSON representation of array of policy targets to be set for the password policy. This is an optional parameter. Assigning new values will remove all existing policy targets. In order to retain previous targets, those targets need to be specified. Allowed values for constant are ALL_SERVICE(the policy will be applicable for all services in the system. In this case if any value is specified, it is ignored), SPECIFIC_SERVICE(the policy will be applicable for a specific service which is specified by the service URI) and SERVICE_TYPE(the policy will be applicable for a specific service type which is specified by the service profile name e.g WinLocalProfile). Please note, for SERVICE_TYPE, only service profiles other than ITIM service, hosted service and HR feed are allowed. Services specified by SPECIFIC_SERVICE must belong to the same org container for which the policy is being created. \r\n\r\n_attributes : JSON representation of the Password Policy attributes to be set. This is an optional parameter. Below are the attributes than can be used. \r\n\r\nerpolicyitemname : Name of the password policy. If this parameter is specified, then a value must be entered. \r\n\r\nerscope : Scope of the password policy. Allowed value are 2(this business unit and sub units) and 1(this business unit only). If this parameter is specified, then a value must be entered. \r\n\r\nerenabled : Specifies whether the password policy will be enabled or disabled as soon as the policy is created. Allowed values are true and false. If this parameter is specified, then a value must be entered. \r\n\r\ndescription : Description of the password policy. It is an optional parameter. \r\n\r\nerlabel : Specifies a caption for the password policy. It is an optional parameter. \r\n\r\nerkeywords : Specifies keywords for the password policy. It is an optional parameter. \r\n",
                "parameters": [{
                    "name": "passwordPolicyId",
                    "in": "path",
                    "description": "Unique identifier for the password policy to be modified.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModifyPasswordPolicyRequestBeanSwagger"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "OK. The request was successful"
                    }
                }
            },
            "delete": {
                "tags": ["Password Policy Management"],
                "summary": "Password Policy Delete",
                "description": "Removes the specified password policy.",
                "parameters": [{
                    "name": "passwordPolicyId",
                    "in": "path",
                    "description": "Unique identifier for the password policy to be deleted.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful"
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/systemusers/{systemUserId}": {
            "get": {
                "tags": ["System User Management"],
                "summary": "System User lookup",
                "description": "Returns information about the specified Identity Manager system account.",
                "parameters": [{
                    "name": "systemUserId",
                    "in": "path",
                    "description": "A unique identifier for a system user.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return the system user. The specified attributes are returned in the \"_attributes\" section of the response. If the excludeAttributeFromResponse property in the rest.properties is set to some attribute value, that attribute is excluded from the response though it is specified in the attribute list. Specifying a value \"*\" returns all of attributes except those that are specified in the excludeAttributeFromResponse property. By default, all attributes other than those that are specified in the excludeAttributeFromResponse property are returned. Example - ?attributes=eruid,eraccountstatus",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "embedded",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return a reference attribute of the system user. For example, owner. The specified attributes are returned in the \"_embedded\" section of the response. Specifying a value \"*\" after a reference attribute returns all properties of the reference attribute. Example - ?embedded=owner.mail,owner.telephoneNumber",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "owner": {
                                            "href": "/itim/rest/people/ZXJnbG9iYWxpZD0yNTM1NzA0Mjg2MzMyMTI1MTk0LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ"
                                        },
                                        "self": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9YXNtaXRoLG91PXN5c3RlbVVzZXIsb3U9aXRpbSxvdT1vcmcsZGM9Y29t",
                                            "title": "asmith"
                                        },
                                        "delegates": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9YXNtaXRoLG91PXN5c3RlbVVzZXIsb3U9aXRpbSxvdT1vcmcsZGM9Y29t/delegations"
                                        },
                                        "constraints": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9YXNtaXRoLG91PXN5c3RlbVVzZXIsb3U9aXRpbSxvdT1vcmcsZGM9Y29t/constraints",
                                            "title": "Constraints"
                                        },
                                        "tasks": [{
                                            "href": "/itim/rest/tasks/me/servicecenter",
                                            "title": "servicecenter"
                                        }, {
                                            "href": "/itim/rest/tasks/me/selfservice",
                                            "title": "selfservice"
                                        }]
                                    },
                                    "_attributes": {
                                        "owner": "erglobalid=25357042863321251,ou=0,ou=people,erglobalid=00000000000000000000,ou=org,dc=com",
                                        "erservice": "erglobalid=000000000000000002,ou=services,erglobalid=00000000000000000000,ou=org,dc=com",
                                        "eraccountcompliance": "1",
                                        "eruid": "asmith",
                                        "eraccountownershiptype": "Individual",
                                        "eraccountstatus": "0"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/access/assignments": {
            "get": {
                "tags": ["Search"],
                "summary": "Access Assignment Search",
                "description": "Returns all Access Assignments for the specified requestee. \nIf Header parameter Access-Categories-List is specified , the complete list of access categories associated with the user assignments are returned.",
                "parameters": [{
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for each access item. Specifying * returns all attributes. Example - ?attributes=accessName,accessCategory,isCommon,entityProfile,tags,description,entityType,badges,additionalInformation,roleAssignmentAttributeValues",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items that the search returns. Example - ?limit=1000",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "description": "Specifies the attribute and its order (\"+\" for ascending, \"-\" for descending) for sorting the \"\r\n\t\t\t\t\t+ \"returned list of accesses. ?sort=%2BaccessName, ?sort=%2BaccessCategory, Example - ?sort=%2Ddescription\"\r\n\t\t\t\t\t+ \"(%2B and %2D is UTF-8 encoding for + and - sign respectively)",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent \"\r\n\t\t\t\t\t+ \"requests by the client that specify the same search criteria are satisfied via the cache. The 'no-cache' \"\r\n\t\t\t\t\t+ \"option specifies performs the search without referencing any cache. The 'delete-cache' option deletes the \"\r\n\t\t\t\t\t+ \"cache. In this case, empty search results are returned. Example - Cache-Control = no-cache ",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Permission-List",
                    "in": "header",
                    "description": "Specifies whether the API returns the list of actions that can be performed on the returned assignments. By default, the permissions list is not returned. Example - Permission-List=get-permissions ",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Range",
                    "in": "header",
                    "description": "Specifies the range of items to return. Note: The range uses a zero-based index. Example - items=0-99",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_embedded": {
                                        "account": {
                                            "_links": {
                                                "self": {
                                                    "href": "/itim/rest/accounts/ZXJnbG9iYWxpZD00NjkzMTIzMjc1NjA3ODQ3MjU2LG91PTAsb3U9YWNjb3VudHMsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t",
                                                    "title": "asmith7"
                                                }
                                            },
                                            "_attributes": {
                                                "eraccountcompliance": "1",
                                                "eruid": "asmith7",
                                                "eraccountstatus": "0"
                                            }
                                        }
                                    },
                                    "_links": {
                                        "access": {
                                            "href": "/itim/rest/access/4693112079467885909"
                                        },
                                        "requestee": {
                                            "href": "/itim/rest/people/ZXJnbG9iYWxpZD00NjkzMTE5OTIxNTI5MzY2OTY5LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ"
                                        },
                                        "icon": {
                                            "href": "custom/ui/images/access/iconApplicationAccess.gif"
                                        },
                                        "self": {
                                            "href": "/itim/rest/access/assignments/ZXJnbG9iYWxpZD00NjkzMTE5OTIxNTI5MzY2OTY5LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbTo0NjkzMTEyMDc5NDY3ODg1OTA5OmVyZ2xvYmFsaWQ9NDY5MzEyMzI3NTYwNzg0NzI1NixvdT0wLG91PWFjY291bnRzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                            "title": "ausintranet(asmith7)"
                                        }
                                    },
                                    "_attributes": {
                                        "badges": [],
                                        "accessName": "ausintranet",
                                        "entityType": 2,
                                        "description": "Austin intranet",
                                        "status": "FULFILLED",
                                        "tags": []
                                    }
                                }, {
                                    "_links": {
                                        "access": {
                                            "href": "/itim/rest/access/4693112079467885909"
                                        },
                                        "requestee": {
                                            "href": "/itim/rest/people/ZXJnbG9iYWxpZD00NjkzMTE5OTIxNTI5MzY2OTY5LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ"
                                        },
                                        "icon": {
                                            "href": "custom/ui/images/access/iconApplicationAccess.gif"
                                        },
                                        "self": {
                                            "href": "/itim/rest/access/assignments/ZXJnbG9iYWxpZD00NjkzMTE5OTIxNTI5MzY2OTY5LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbTo0NjkzMTEyMDc5NDY3ODg1OTA5OmVyZ2xvYmFsaWQ9NDY5MzEyMzI3NTYwNzg0NzI1NixvdT0wLG91PWFjY291bnRzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                            "title": "Manager"
                                        }
                                    },
                                    "_attributes": {
                                        "badges": [],
                                        "roleAssignmentAttributes": [{
                                            "_attributes": {
                                                "definedRole": "/itim/rest/roles/ZXJnbG9iYWxpZD0zMzgzOTU3MzgxOTk2NTA0MTE0LG91PXJvbGVzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWlzaW0",
                                                "assignmentAttributeKey": "StartDate",
                                                "assignmentAttributeLabel": "StartDate",
                                                "assignmentAttributeValue": {
                                                    "values": ["12/21/2020"],
                                                    "name": "startdate"
                                                },
                                                "definedRoleName": "Manager"
                                            }
                                        }, {
                                            "_attributes": {
                                                "definedRole": "/itim/rest/roles/ZXJnbG9iYWxpZD0zMzgzOTU3MzgxOTk2NTA0MTE0LG91PXJvbGVzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWlzaW0",
                                                "assignmentAttributeKey": "EndDate",
                                                "assignmentAttributeLabel": "EndDate",
                                                "assignmentAttributeValue": {
                                                    "values": ["10/21/2020"],
                                                    "name": "enddate"
                                                },
                                                "definedRoleName": "Manager"
                                            }
                                        }],
                                        "accessName": "Manager",
                                        "entityType": 3,
                                        "description": "Allows end user a manager role.",
                                        "accessCategory": "Application",
                                        "status": "FULFILLED",
                                        "tags": [],
                                        "isEditRoleAssignmnetAttributeAllowedForPerson": true,
                                        "isViewRoleAssignmnetAttributeAllowedForPerson": true
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Access Administration Batch Submit"],
                "summary": "Access Assignment Batch Requests",
                "description": "\r\n[Access Assignment Batch Addition](/itim/swaggerdoc/Access_Assignment_Batch_Addition.html) - Add access assignments in a batch. \n\r\n[Access Assignment Batch Deletion](/itim/swaggerdoc/Access_Assignment_Batch_Deletion.html) - Delete access assignments in a batch. \n\r\n[Access Assignment Batch Modify](/itim/swaggerdoc/Access_Assignment_Batch_Modify.html) - Modify access assignments in a batch. \n\r\n[Access Assignment Batch Validation](/itim/swaggerdoc/Access_Assignment_Batch_Validation.html) - Validate access assignments in a batch. \n\r\n[Access Assignment Batch Check Compliance](/itim/swaggerdoc/Access_Assignment_Batch_Check_Compliance.html) - Check the compliance of access assignments in a batch. \r\n\r\nClick link to see more details for each request\n",
                "parameters": [{
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pasns the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "X-HTTP-Method-Override",
                    "in": "header",
                    "description": "Use 'check-compliance' to check a batch of access assignments for compliance. Example - X-HTTP-Method-Override=check-compliance \n\r\nUse 'validate-full' to validate access assignments in a batch. Example - X-HTTP-Method-Override=validate-full \n\r\nUse 'submit-in-batch' to submit access assignments for addition, deletion and modification in a batch. Example - X-HTTP-Method-Override=submit-in-batch",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccessAssignCheckComplianceRequestBeanSwagger"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK. The request was successful"
                    },
                    "202": {
                        "description": "OK. The request was successful"
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/systemusers/me": {
            "get": {
                "tags": ["System User Management"],
                "summary": "Current System User Lookup",
                "description": "Returns information about a user who is logged in to the Identity Manager system account.",
                "parameters": [{
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return the current Identity Manager account. The specified attributes are returned in the \"_attributes\" section of the response. If the excludeAttributeFromResponse property in the rest.properties is set to some attribute value, that attribute is excluded from the response though it is specified in the attribute list. Specifying a value \"*\" returns all of attributes except those that are specified in the excludeAttributeFromResponse property. By default, all attributes other than those that are specified in excludeAttributeFromResponse property are returned. Example - ?attributes=eruid,eraccountstatus",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "embedded",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return a reference attribute of the system user. For example, owner. The specified attributes are returned in the \"_embedded\" section of the response. Specifying a value \"*\" after a reference attribute returns all properties of the reference attribute. Example - ?embedded=owner.mail,owner.telephoneNumber",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "headers": {
                            "CSRFToken": {
                                "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user.",
                                "style": "simple",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "owner": {
                                            "href": "/itim/rest/people/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwNyxvdT0wLG91PXBlb3BsZSxlcmdsb2JhbGlkPTAwMDAwMDAwMDAwMDAwMDAwMDAwLG91PW9yZyxkYz1jb20"
                                        },
                                        "self": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9SVRJTSBNYW5hZ2VyLG91PXN5c3RlbVVzZXIsb3U9aXRpbSxvdT1vcmcsZGM9Y29t",
                                            "title": "ITIM Manager"
                                        },
                                        "delegates": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9SVRJTSBNYW5hZ2VyLG91PXN5c3RlbVVzZXIsb3U9aXRpbSxvdT1vcmcsZGM9Y29t/delegations"
                                        },
                                        "constraints": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9SVRJTSBNYW5hZ2VyLG91PXN5c3RlbVVzZXIsb3U9aXRpbSxvdT1vcmcsZGM9Y29t/constraints",
                                            "title": "Constraints"
                                        },
                                        "tasks": [{
                                            "href": "/itim/rest/tasks/me/console",
                                            "title": "console"
                                        }, {
                                            "href": "/itim/rest/tasks/me/servicecenter",
                                            "title": "servicecenter"
                                        }, {
                                            "href": "/itim/rest/tasks/me/selfservice",
                                            "title": "selfservice"
                                        }]
                                    },
                                    "_attributes": {
                                        "owner": "erglobalid=00000000000000000007,ou=0,ou=people,erglobalid=00000000000000000000,ou=org,dc=com",
                                        "erservice": "erglobalid=00000000000000000002,ou=services,erglobalid=00000000000000000000,ou=org,dc=com",
                                        "eraccountcompliance": "1",
                                        "erobjecttype": "1",
                                        "eruid": "ITIM Manager",
                                        "erroles": "erglobalid=00000000000000000003,ou=sysRoles,erglobalid=00000000000000000000,ou=org,dc=com",
                                        "eraccountstatus": "0"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/systemroles/{systemRoleId}": {
            "get": {
                "tags": ["Search"],
                "summary": "System Role (ITIM Group) Lookup",
                "description": "Returns information about the specified system role (ITIM Group).",
                "parameters": [{
                    "name": "systemRoleId",
                    "in": "path",
                    "description": "Unique Identifier for system role (ITIM Group).",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies comma- separated attributes to return for the system role. The specified attributes are returned in the \"_attributes\" section of the response. Specifying a value of \"*\" returns all attributes. By default all the attributes are returned. Example - ?attributes=errolename,description",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "embedded",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for the reference attributes of system role (eg. erparent). The specified attributes are returned in the \"_embedded\" section of the response. Specifying a value of '*' after reference attribute returns all the properties of the reference attribute. Example - ?embedded=erparent.*",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/systemroles/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDA2MixvdT1zeXNSb2xlcyxlcmdsb2JhbGlkPTAwMDAwMDAwMDAwMDAwMDAwMDAwLG91PW9yZyxkYz1jb20",
                                            "title": "Auditor"
                                        }
                                    },
                                    "_embedded": {
                                        "erparent": {
                                            "_links": {
                                                "self": {
                                                    "href": "/itim/rest/organizationcontainers/organizations/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t",
                                                    "title": "JKEnterprise"
                                                }
                                            },
                                            "_attributes": {
                                                "erorgstatus": "0",
                                                "description": "J K Enterprise",
                                                "o": "JKEnterprise"
                                            }
                                        }
                                    },
                                    "_attributes": {
                                        "errolename": "Auditor"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/systemusers/{systemUserId}/constraints": {
            "get": {
                "tags": ["System User Management"],
                "summary": "System User Contraints Lookup",
                "description": "Returns the constraints for the specified system user \r\n\nThe \"passwordRules\" property is an array listing of each rule for the password. \r\n\nIf there are no password rules, an empty array is returned.",
                "parameters": [{
                    "name": "systemUserId",
                    "in": "path",
                    "description": "The System User ID for which you want to retrieve constraints.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "embedded",
                    "in": "query",
                    "description": "Specifies the comma-separated constraints toe return for the specified link. The specified constraints are returned in the \"_embedded\" property of the constraint object. Example - ?embedded=passwordConstraints",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "passwordConstraints": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9Y3JpZWdsZSxvdT1zeXN0ZW1Vc2VyLG91PWl0aW0sb3U9b3JnLGRjPWNvbQ/constraints/password",
                                            "title": "Password Constraints"
                                        },
                                        "self": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9Y3JpZWdsZSxvdT1zeXN0ZW1Vc2VyLG91PWl0aW0sb3U9b3JnLGRjPWNvbQ/constraints",
                                            "title": "Constraints"
                                        },
                                        "systemuser": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9Y3JpZWdsZSxvdT1zeXN0ZW1Vc2VyLG91PWl0aW0sb3U9b3JnLGRjPWNvbQ",
                                            "title": "criegle"
                                        }
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/access/{accessId}": {
            "get": {
                "tags": ["Access Management"],
                "summary": "Access Lookup",
                "description": "Returns information about the specified access.",
                "parameters": [{
                    "name": "accessId",
                    "in": "path",
                    "description": "Unique identifier for an access.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for an access item. The specified attributes are returned in the \"_attributes\" section of the response. Specifying a value of \"*\" returns all attributes. Example. ?attributes=accessName,accessCategory,isCommon,entityProfile,tags,description,entityType,badges,additionalInformation",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "assignments": {
                                            "href": "/itim/rest/access/assignments"
                                        },
                                        "icon": {
                                            "href": "custom/ui/images/access/iconAccessRoleAccess.gif"
                                        },
                                        "self": {
                                            "href": "/itim/rest/access/6892757478197795306",
                                            "title": "FTP Server"
                                        },
                                        "owners": {
                                            "href": "/itim/rest/access/6892757478197795306/owners"
                                        }
                                    },
                                    "_attributes": {
                                        "badges": [{
                                            "style": "red",
                                            "designation": "Critical"
                                        }, {
                                            "style": "green",
                                            "designation": "JK Enterprise"
                                        }],
                                        "accessName": "FTP Server",
                                        "entityType": 1,
                                        "entityProfile": "PosixLinuxProfile",
                                        "accessCategory": "Application",
                                        "isCommon": true,
                                        "description": "FTP Server"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Access Management"],
                "summary": "Modify Access",
                "description": "\r\nModifies access information for the entity \r\n\r\n Required attributes\r\nenableAccess - Value should be true if access needs to be enabled otherwise false if access needs to be disabled \r\n\r\nentityType - Value should be 3 as currently this API only supports creating access for the role \r\n\r\nProvide list attributes(if any) that needs to be updated e.g. badges, tags, additionalInformation, accessName, accessCategory, description, isCommon, icon\r\n",
                "parameters": [{
                    "name": "accessId",
                    "in": "path",
                    "description": "Unique identifier for an access.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModifyAccessBean"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/entitlements/assignments/{assignmentId}": {
            "get": {
                "tags": ["Entitlement Assignments"],
                "summary": "Assignment Lookup",
                "description": "Returns assignment details of a specified assignment ID.",
                "parameters": [{
                    "name": "assignmentId",
                    "in": "path",
                    "description": "Specifies the assignment ID for a lookup. It is the encoded value that is returned by the /assignments/search API",
                    "required": true,
                    "schema": {
                        "type": "string"
                    },
                    "example": "MTk5OTczMzYyNDk0Mjk2NDcxNw"
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/json": {
                                "example": {
                                    "code": {
                                        "href": "/itim/rest/v1.2/entitlements/assignments/MzQwMTgzNjg0OTQ3Mjg3NDE3MA"
                                    },
                                    "assignmentAttributes": [{
                                        "values": ["12/16/2022"],
                                        "name": "enddate"
                                    }, {
                                        "values": ["in-person"],
                                        "name": "method"
                                    }, {
                                        "values": ["08/15/2022"],
                                        "name": "startdate"
                                    }, {
                                        "values": ["chris.miller"],
                                        "name": "instructors"
                                    }],
                                    "entitlement": {
                                        "href": "/itim/rest/roles/ZXJnbG9iYWxpZD0zMjkwMjU2ODQ3MDcwNzgyNzQ5LG91PXJvbGVzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9aXN2Z2ltLGRjPWlzdmdpbSxkYz1pc3Zn",
                                        "title": "Java Programming"
                                    },
                                    "user": {
                                        "href": "/itim/rest/people/ZXJnbG9iYWxpZD0zMjg2NjA4OTcyMzIxNjYyNDQ4LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9aXN2Z2ltLGRjPWlzdmdpbSxkYz1pc3Zn",
                                        "title": "John Doe"
                                    },
                                    "properties": {
                                        "rightsRef": "ZXJnbG9iYWxpZD0zMjkwMjU2ODQ3MDcwNzgyNzQ5LG91PXJvbGVzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9aXN2Z2ltLGRjPWlzdmdpbSxkYz1pc3Zn"
                                    },
                                    "entitlementName": "Java Programming"
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/people/me": {
            "get": {
                "tags": ["Person Management"],
                "summary": "Current Person Lookup",
                "description": "Returns the information about the currently logged in user.",
                "parameters": [{
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for the current user. The specified attributes are returned in the \"_attributes\" section of the response. Specifying a value of \"*\" returns all attributes. Example - ?attributes=mail,telephoneNumber",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "embedded",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for a reference attribute of a user (eg. manager). The specified attributes are returned in the \"_embedded\" section of the response. Specifying a value of '*' after reference attribute returns all properties of the reference attribute. Example - ?embedded=manager.name,manager.telephoneNumber",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "self": {
                                            "href": "http://localhost:9080/itim/rest/people/ZXJnbG9iYWxpZD01Njg4NjQwOTA5NDk4NTwMDAwMDAsb3U9b3JjPWNvbQ",
                                            "title": "Alan Smith"
                                        }
                                    },
                                    "_embedded": {
                                        "manager": {
                                            "_links": {
                                                "self": {
                                                    "href": "http://localhost:9080/itim/rest/people/ZXJnbG9iYWxpZD01Njg4NjQwOTA5NDk4NTwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                                    "title": "Chuck Riegle"
                                                }
                                            },
                                            "_attributes": {
                                                "name": "Chuck Riegle"
                                            }
                                        }
                                    },
                                    "_attributes": {
                                        "uid": "asmith",
                                        "telephonenumber": "919-224-1234",
                                        "givenname": "Alan",
                                        "erpersonstatus": "ACTIVE",
                                        "name": "Alan Smith",
                                        "mobile": "919-123-4567",
                                        "cn": "Alan Smith",
                                        "sn": "Smith"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/roles/orgroles": {
            "get": {
                "tags": ["Search"],
                "summary": "Organizational Role Search",
                "description": "Returns information about the organizational role that matches the specified search criteria. \nBy default, no attributes are returned. The client must specify the \"attributes\" query parameter to request the attributes to be returned in the \"_attributes\" property of each static role. \nA requested attribute is not returned if the client does not have permission to retrieve the attribute or if the value of the attribute is null. \nIf an attribute has multiple values, the value of the corresponding property is an array of the attribute's values. \n",
                "parameters": [{
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for each static role. The specified attributes are returned in the \"_attributes\" property of each static role. Specifying a value of \"*\" returns all attributes. Example- ?attributes=errolename",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items that the search returns. Example. ?limit=1000",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "description": "Specifies the attribute and order (\"+\" for ascending, \"-\" for descending) for sorting the returned static role. Note: The client is responsible for performing URL encoding if necessary. Example- ?sort=%2Berrolename (%2B is UTF-8 encoding for + sign)",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "type",
                    "in": "query",
                    "description": "Specifies the type of role to search for. Example. ?type=static",
                    "schema": {
                        "default": "static",
                        "enum": ["static", "dynamic", "all"]
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies the caching options. By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The 'no-cache' option performs the search without referencing any cache. The 'delete-cache' option deletes the cache. In this case, empty search results are returned. Example- Cache-Control=no-cache",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Range",
                    "in": "header",
                    "description": "Specifies the range of items to return. Note: The range uses a zero-based index. Example- items=0-99",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/roles/ZXJnbG9iYWxpZD0yNjg3ODk5MTYzNDkxMzAzODMsb3U9cm9sZXMsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t",
                                            "title": "terminator Role"
                                        }
                                    },
                                    "_attributes": {
                                        "errolename": "terminator Role"
                                    }
                                }, {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/roles/ZXJnbG9iYWxpZD0yNjg3ODk3ODQzMTUyNTI5NzUsb3U9cm9sZXMsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t",
                                            "title": "supervisor Role"
                                        }
                                    },
                                    "_attributes": {
                                        "errolename": "supervisor Role"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/people/{personId}/accounts": {
            "get": {
                "tags": ["Person Management"],
                "summary": "Person Account search",
                "description": "Returns the accounts of a specified user.",
                "parameters": [{
                    "name": "personId",
                    "in": "path",
                    "description": "The person ID to retrieve accounts for.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for the account. The specified attributes are returned in the \"_attributes\" section. Specifying a value of \"*\" returns all attributes. Example - ?attributes=owner,eraccountstatus,eruid,eraccountownershiptype",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "embedded",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for reference attributes of the accounts (eg. erservice). The specified attributes are returned in the \"_embedded\" section of the response. Specifying a value of '*' after reference attribute returns all the properties of the reference attribute. Example - ?embedded=erservice.erservicename.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items that the search returns. Example - ?limit=1000",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "description": "Specifies the attribute and order (\"+\" for ascending, \"-\" for descending) by which the returned people are sorted. Note: The client is responsible for performing URL encoding if necessary. Example - ?sort=%2Bcn (%2B is UTF-8 encoding for + sign)",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The 'no-cache' option performs the search without referencing any cache. The 'delete-cache' option deletes the cache. In this case, empty search results are returned. Example - Cache-Control = no-cache ",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Range",
                    "in": "header",
                    "description": "Specifies the range of items to return. Note: The range uses a zero-based index. Example - items=0-99 ",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_embedded": {
                                        "erservice": {
                                            "_links": {
                                                "statusDetails": {
                                                    "href": "/itim/rest/services/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMixvdT1zZXJ2aWNlcyxlcmdsb2JhbGlkPTAwMDAwMDAwMDAwMDAwMDAwMDAwLG91PW9yZyxkYz1jb20/statusdetails",
                                                    "title": "statusDetails"
                                                },
                                                "self": {
                                                    "href": "/itim/rest/services/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMixvdT1zZXJ2aWNlcyxlcmdsb2JhbGlkPTAwMDAwMDAwMDAwMDAwMDAwMDAwLG91PW9yZyxkYz1jb20",
                                                    "title": "ITIM Service"
                                                }
                                            },
                                            "_attributes": {
                                                "erservicename": "ITIM Service"
                                            }
                                        }
                                    },
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/accounts/ZXJ1aWQ9YXNtaXRoLG91PXN5c3RlbVVzZXIsb3U9aXRpbSxvdT1vcmcsZGM9Y29t",
                                            "title": "asmith"
                                        }
                                    },
                                    "_attributes": {
                                        "eruid": "asmith"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/password/configuration": {
            "get": {
                "tags": ["Password Management"],
                "summary": "Password Configuration",
                "description": "Return the Password configuration for Identity Manager.",
                "parameters": [{
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies if the password synch property is returned. Example - ?attributes=isSynchPassword",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/password/configuration",
                                            "title": "Challenge response configuration resource"
                                        }
                                    },
                                    "_attributes": {
                                        "responseMinLength": -1,
                                        "isSSOEnabled": false,
                                        "challengeNumberRequired": 1,
                                        "challengeResponseEnabled": true,
                                        "responseMatchQuestion": false,
                                        "responseDisallowUserID": false,
                                        "isChallengeUserDefined": true,
                                        "responseUniqueAnswer": false,
                                        "isSynchPassword": true,
                                        "isChallengeResponseEnforced": false,
                                        "responseNumberConfigured": 1,
                                        "applicationURL": "/itim/self/Login/ChallengeResponse.do",
                                        "responseMaxRepeatChar": -1
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/activities/count": {
            "get": {
                "tags": ["Activity Management"],
                "summary": "Pending Count of Activities For Current User",
                "description": "Returns the count of pending requests for a user.",
                "parameters": [{
                    "name": "status",
                    "in": "query",
                    "description": "Specifies the status of activities whose count is to be returned. Currently, only the status PENDING is supported.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "count": 30
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/access/assignments/{assignmentId}": {
            "delete": {
                "tags": ["Access Management"],
                "summary": "Access Assignment Delete",
                "description": "Deletes the specified access assignment.",
                "parameters": [{
                    "name": "assignmentId",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccessAssignmentSingleRequestBean"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Accepted. The request was accepted for processing, but the processing is not complete.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "result": {
                                            "href": "/itim/rest/requests/7655357092010861510"
                                        }
                                    },
                                    "requestID": "7655357092010861510",
                                    "results": [{
                                        "_links": {
                                            "requestee": {
                                                "href": "/itim/rest/people/ZXJnbG9iYWxpZD03MTE1MDUwODk3MzEzOTQ2MDM2LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ"
                                            },
                                            "assingment": {
                                                "href": "/itim/rest/access/assignments/ZXJnbG9iYWxpZD03MTE1MDUwODk3MzEzOTQ2MDM2LG91PTAsb3U9cGVv"
                                            }
                                        },
                                        "status": "SUCCESS"
                                    }, {
                                        "_links": {
                                            "requestee": {
                                                "href": "/itim/rest/people/ZXJnbG9iYWxpZD03MTE1MDUwODk3MzEzOTQ2MDM2LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ"
                                            },
                                            "accesses": []
                                        },
                                        "status": "SUCCESS"
                                    }],
                                    "overallStatus": "SUBMITTED"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "results": [{
                                        "_links": {
                                            "requestee": {
                                                "href": "/itim/rest/people/ZXJnbG9iYWxpZD03MTE1MDUwODk3MzEzOTQ2MDM2LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ"
                                            },
                                            "assingment": {
                                                "href": "/itim/rest/access/assignments/ZXJnbG9iYWxpZD03MTE1MDUwODk3MzEzOTQ2MDM2LG91PTAs"
                                            }
                                        },
                                        "messages": [{
                                            "text": "com.ibm.itim.accesscatalog.validation.INVALID_REVOKE_ACCOUNT_ID",
                                            "key": "com.ibm.itim.accesscatalog.validation.INVALID_REVOKE_ACCOUNT_ID"
                                        }],
                                        "status": "ERROR"
                                    }],
                                    "overallStatus": "ERROR"
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/password/challengeresponse": {
            "get": {
                "tags": ["Password Management"],
                "summary": "Forgotten Password Questions Lookup For Current User",
                "description": "Returns the list of forgotten password questions configured for the currently logged in user.",
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/password/challengeresponse"
                                        }
                                    },
                                    "challenge": ["What is the name of your first company?", "What is your favorite color?", "How many siblings do you have?"],
                                    "challengeResponses": [{
                                        "response": "SHA-256:Y2hrdGMzOXBiOTN1:PdLrmAtsfC0u0zluEZ0u6lV0Ev0FmnY2cyuGmYKw/aw=",
                                        "challenge": "What is the name of your first company?"
                                    }, {
                                        "response": "SHA-256:bnhqaXIwaDMxNWl6:TjBvQJnvo4BD3JGPTsGRtwvtIIBjsg/Zmthrdxf4mmM=",
                                        "challenge": "What is your favorite color?"
                                    }, {
                                        "response": "SHA-256:a2I0dm9rOTI5MTI1:oCepu5gwY8YzcLhGJLnGck7XGhsNyJ8nIKIg5onXVEI=",
                                        "challenge": "How many siblings do you have?"
                                    }]
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Password Management"],
                "summary": "Forgotten Password Challenge Response Question Update",
                "description": "Specifies that the currently logged in user can update the forgotten password questions and answers. Users can modify the response for an existing challenge or create a new challenge response. \r\nNote : The 'password' attribute of the request payload must contain the Identity Manager System account password of the current user.",
                "parameters": [{
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must passthe valid CSRF token in the request header. When a new PUT, POST, orDELETE request is created, the request header must contain CSRF tokenthat is received to the authorized user. Authorized users must get thevalid CSRF token in the response header by running the 'Current System User Lookup' REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ForgotPasswordSubmitResponseBeanSwagger"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Challenge response questions are submitted successfully.",
                        "content": {
                            "application/json": {
                                "example": {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/password/challengeresponse/criegle"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. This might happen if challenges are empty, a response is not provided for a challenge, the password is invalid, and et cetera.",
                        "content": {
                            "application/json": {
                                "example": {
                                    "severity": "E",
                                    "text": "CTGIMH066E The value entered for Identity Manager Password field is not correct. Enter the correct password.",
                                    "id": "CTGIMH066",
                                    "key": "com.ibm.itim.apps.ejb.organization.account.PasswordManagerBean.INVALID_ITIM_PASSWORD"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Password Management"],
                "summary": "Forgotten Password Challenge Response Question Submit",
                "description": "Specifies that the currently logged in user can create forgotten passwordquestions and answers. The 'password' attribute of the request payload mustcontain the Identity Manager System account password of the current user.",
                "parameters": [{
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must passthe valid CSRF token in the request header. When a new PUT, POST, orDELETE request is created, the request header must contain CSRF tokenthat is received to the authorized user. Authorized users must get thevalid CSRF token in the response header by running the 'Current System User Lookup' REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ForgotPasswordSubmitResponseBeanSwagger"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Challenge response questions are submitted successfully.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/password/challengeresponse/criegle"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. This might happen if challenges are empty, a response is not provided for a challenge, password is invalid, and et cetera.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "severity": "E",
                                    "text": "CTGIMH066E The value entered for Identity Manager Password field is not correct. Enter the correct password.",
                                    "id": "CTGIMH066",
                                    "key": "com.ibm.itim.apps.ejb.organization.account.PasswordManagerBean.INVALID_ITIM_PASSWORD"
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/people/bpperson": {
            "get": {
                "tags": ["Person Management"],
                "summary": "People Search for Business Partner Person",
                "description": "Returns information for the specified user that belongs to a Business Partner Person category. \r\n\r\nThe \"name\" of the user is returned in the _links.self.title property. \r\n\r\nBy default, no attributes are returned. The client must specify the \"attributes\" query parameter to request the attributes that are returned in the \"_attributes\" property of each user. \r\n\r\nA requested attribute is not returned if the client does not have permission to retrieve the attribute or if the value of the attribute is null. \r\n\r\nIf an attribute has multiple values, the value of the corresponding property is an array of the attribute's values. \r\n",
                "parameters": [{
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for each iser. The specified attributes are returned in the \"_attributes\" property of each person. Specifying a value of \"*\" returns all attributes. Example - ?attributes=cn,sn",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "embedded",
                    "in": "query",
                    "description": "Specifies the comma separated attributes to return for a reference attribute of a user (eg. manager). The specified attributes are returned in the \"_embedded\" section of the response. Specifying a value of '*' after reference attribute returns all the properties of the reference attribute. Example - ?embedded=manager.cn",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items that should be returned by the search. Example - ?limit=1000",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "description": "Specifies the attribute and order (\"+\" for ascending, \"-\" for descending) for sorting the returned result. Note: The client is responsible for performing URL encoding if necessary. Example - ?sort=%2Bcn (%2B is UTF-8 encoding for + sign)",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options . By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The \"no-cache\" option performs the search without referencing any cache. The \"delete-cache\" option deletes the cache. In this case, empty search results are returned. Example - Cache-Control=no-cache ",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Range",
                    "in": "header",
                    "description": "Specifies the range of items to return. Note: The range uses a zero-based index. Example - items=0-99 ",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "formTemplate": {
                                            "href": "/itim/rest/forms?requestee=/itim/rest/people/ZXJnbG9iYWxpZD0zMjg3NTk3Njg0MDU0MDg0MTYsb3U9MCxvdT1wZW9wbGUsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t&filterId=formSearch"
                                        },
                                        "self": {
                                            "href": "/itim/rest/people/ZXJnbG9iYWxpZD0zMjg3NTk3Njg0MDU0MDg0MTYsb3U9MCxvdT1wZW9wbGUsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t",
                                            "title": "Mark Stevens"
                                        }
                                    },
                                    "_attributes": {
                                        "sn": "Stevens",
                                        "cn": "Mark Stevens"
                                    }
                                }, {
                                    "_links": {
                                        "formTemplate": {
                                            "href": "/itim/rest/forms?requestee=/itim/rest/people/ZXJnbG9iYWxpZD0zMjg3NTk3NjYzMjY3Njc5MDksb3U9MCxvdT1wZW9wbGUsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t&filterId=formSearch"
                                        },
                                        "self": {
                                            "href": "/itim/rest/people/ZXJnbG9iYWxpZD0zMjg3NTk3NjYzMjY3Njc5MDksb3U9MCxvdT1wZW9wbGUsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t",
                                            "title": "James Parch"
                                        }
                                    },
                                    "_attributes": {
                                        "sn": "Parch",
                                        "cn": "James Parch"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/entities": {
            "get": {
                "tags": ["Search"],
                "summary": "Widget Filter Search",
                "description": "Returns the search results that are based on the filter configured for a widget . This API is used with the form template REST API. Identity Manager forms consist of some widgets that contain an LDAP search filter that is configured by System Administrator. \r\n\nThis configured search filter is returned by \"form tempalate\" REST API in an encrypted format. The LDAP search API decrypts this filter and returns the search result. \r\n",
                "parameters": [{
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the attribute that must be returned as part of search. Only one attribute can be specified. If you specify a comma-separated list of attributes, then no attributes are returned. Example - ?attributes=cn",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items that the search returns. Example. ?limit=1000",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The 'no-cache' option performs the search without referencing any cache. The 'delete-cache' option deletes the cache. In this case, empty search results are returned. Example - Cache-Control=no-cache ",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Range",
                    "in": "header",
                    "description": "Specifies the range of items to be returned. Note : The range uses a zero-based index. Example - items=0-99 ",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "com.ibm.isim.rest.accesstoken",
                    "in": "header",
                    "description": "This mandatory header parameter contains the encrypted filter on which search is executed. This token is generated by the \"form template\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_id": "ZXJnbG9iYWxpZD0yNDk5MjUzNTY5NjU4OTcxMTg1LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                    "_attributes": {
                                        "cn": "Alan Smith"
                                    }
                                }, {
                                    "_id": "ZXJnbG9iYWxpZD0yNDk5MjUzNTc0NjU3MTkyNzM2LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                    "_attributes": {
                                        "cn": "Chuck Riegle"
                                    }
                                }, {
                                    "_id": "ZXJnbG9iYWxpZD0yNDk5MjU0NjU2NjczNDE2OTMwLG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                    "_attributes": {
                                        "cn": "Dan Gosling"
                                    }
                                }, {
                                    "_id": "ZXJnbG9iYWxpZD0yNDk5MjU0OTg3MjMzOTU0NjEyLG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                    "_attributes": {
                                        "cn": "Danny Guthrie"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/identitypolicy": {
            "get": {
                "tags": ["Search"],
                "summary": "Search All Identity Policies",
                "description": "Returns list of all the Identity Policies.",
                "parameters": [{
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for each identity policy. By default, no attributes are returned. The client must specify the \"attributes\" query parameter to request the attributes to be returned in the \"_attributes\" property of each identity policy. A requested attribute is returned if the client does not have permission to retrieve the attribute or if the value of the attribute is null. Specifying a value of \"*\" will return all of the attributes. Example. ?attributes=l",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items for the search to return. Example - ?limit=1000",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "description": "Specifies the attribute and order (\"+\" for ascending, \"-\" for descending) by which to sort the returned users. Note: The client is responsible for performing URL encoding if necessary. Example - ?sort=%2Berpolicyitemname (%2B is UTF-8 encoding for + sign)",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The 'no-cache' option performs the search without referencing any cache. The 'delete-cache' option deletes the cache. In this case, empty search results are returned. Example - Cache-Control = no-cache ",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Range",
                    "in": "header",
                    "description": "Specifies the range of items to return. Note: The range uses a zero-based index. Example - items=0-99",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/identitypolicy/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwNixvdT1wb2xpY2llcyxlcmdsb2JhbGlkPTAwMDAwMDAwMDAwMDAwMDAwMDAwLG91PW9yZyxkYz1EaXZ5YQ",
                                            "title": "Default identity policy for ITIM (Person)"
                                        }
                                    },
                                    "_attributes": {
                                        "eruserclass": "Person",
                                        "erenabled": "true",
                                        "erglobalid": "00000000000000000006",
                                        "erkeywords": "Person",
                                        "erscope": "2",
                                        "description": "Default identity policy for all services and for Person class.",
                                        "erlabel": "ITIM's default identity policy (Person)",
                                        "erjavascript": "function createIdentity() { \n var EXISTING_CASE=0; \n var UPPER_CASE=1; \n var LOWER_CASE=2; \n var tf = false; \n var identity = \"\"; \n var baseidentity = \"\"; \n var counter = 0; \n var locale = subject.getProperty(\"erlocale\"); \n var fAttrKey = \"uid\"; \n var sAttrKey = \"\"; \n var idx1 = 0; \n var idx2 = 0; \n var fCase = 2; \n var sCase = 2; \n if ((locale != null) && (locale.length > 0)) { \n locale = locale[0]; \n }\n if (locale == null || locale.length == 0)\n locale = \"\"; \n var firstAttribute = \"\"; \n var secondAttribute = \"\"; \n if (((fAttrKey != null) && (fAttrKey.length > 0)) || ((sAttrkey != null) && (sAttrkey.length > 0))) {\n if ((fAttrKey != null) && (fAttrKey.length > 0)) { \n firstAttribute = subject.getProperty(fAttrKey); \n if (((firstAttribute != null) && (firstAttribute.length > 0))) \n firstAttribute = firstAttribute[0]; \n if (firstAttribute == null || firstAttribute.length == 0) \n firstAttribute = \"\"; \n else { \n firstAttribute=IdentityPolicy.resolveAttribute(fAttrKey,firstAttribute); \n if ((idx1>firstAttribute.length) || (idx1==0)) \n idx1=firstAttribute.length; \n firstAttribute = firstAttribute.substring(0,idx1); \n } \n if (fCase == UPPER_CASE) \n firstAttribute = firstAttribute.toUpperCase(locale); \n else if (fCase == LOWER_CASE) \n firstAttribute = firstAttribute.toLowerCase(locale); \n } \n if ((sAttrKey != null) && (sAttrKey.length > 0)) { \n secondAttribute = subject.getProperty(sAttrKey); \n if (((secondAttribute != null) && (secondAttribute.length > 0))) \n secondAttribute = secondAttribute[0]; \n if (secondAttribute == null || secondAttribute.length == 0) \n secondAttribute = \"\"; \n else { \n secondAttribute=IdentityPolicy.resolveAttribute(sAttrKey,secondAttribute); \n if ((idx2>secondAttribute.length) || (idx2==0)) \n idx2=secondAttribute.length; \n secondAttribute = secondAttribute.substring(0,idx2); \n } \n if (sCase == UPPER_CASE) \n secondAttribute = secondAttribute.toUpperCase(locale); \n else if (sCase == LOWER_CASE) \n secondAttribute = secondAttribute.toLowerCase(locale); \n } \n baseidentity = firstAttribute + secondAttribute; \n } \n if ((baseidentity == null) || (baseidentity.length == 0)) { \n var givenname = subject.getProperty(\"givenname\"); \n if (((givenname != null) && (givenname.length > 0))) \n givenname = givenname[0]; \n if(givenname == null || givenname.length == 0) \n givenname = \"\"; \n else \n givenname = givenname.substring(0,1); \n baseidentity = givenname + subject.getProperty(\"sn\")[0]; \n } \n if (baseidentity == null) {\n baseidentity = \"\";\n }\n tf = IdentityPolicy.userIDExists(baseidentity, false, false); \n if (!tf) \n return baseidentity; \n while (tf) { \n counter+=1; \n identity = baseidentity + counter; \n tf = IdentityPolicy.userIDExists(identity, false, false); \n } \n return identity; \n } \n \n return createIdentity();",
                                        "erpolicytarget": "2;*",
                                        "objectclass": ["top", "erIdentityPolicy", "erPolicyBase", "erPolicyItemBase", "erManagedItem"],
                                        "erpolicyitemname": "Default identity policy for ITIM (Person)",
                                        "erparent": "erglobalid=00000000000000000000,ou=org,dc=Kuldeep"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Identity Policy Management"],
                "summary": "Identity Policy Create",
                "description": "Creates a new Identity Policy with the given attributes. \r\norgID : The ID of the Organization container in which this Identity Policy is to be created. This parameter is required. \r\n_attributes : JSON representation of the Identity Policy attributes to be set. \r\n",
                "parameters": [{
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateIdentityPolicyRequestBeanSwagger"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/accesscategories": {
            "get": {
                "tags": ["Access Management"],
                "summary": "Access Categories Search",
                "description": "Returns all access categories defined in Identity Manager.",
                "responses": {
                    "200": {
                        "description": "The request is successfully processed.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/accesscategories/ZXJvYmplY3Rwcm9maWxlbmFtZT1BY2Nlc3NSb2xlLG91PWFjY2Vzc1R5cGUsb3U9aXRpbSxvdT1vcmcsZGM9Y29t",
                                            "title": "Role"
                                        }
                                    },
                                    "_attributes": {
                                        "name": "Role"
                                    }
                                }, {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/accesscategories/ZXJvYmplY3Rwcm9maWxlbmFtZT1NYWlsR3JvdXAsb3U9YWNjZXNzVHlwZSxvdT1pdGltLG91PW9yZyxkYz1jb20",
                                            "title": "E-mail group"
                                        }
                                    },
                                    "_attributes": {
                                        "name": "MailGroup"
                                    }
                                }, {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/accesscategories/ZXJvYmplY3Rwcm9maWxlbmFtZT1TaGFyZWRGb2xkZXIsb3U9YWNjZXNzVHlwZSxvdT1pdGltLG91PW9yZyxkYz1jb20",
                                            "title": "Shared folder"
                                        }
                                    },
                                    "_attributes": {
                                        "name": "SharedFolder"
                                    }
                                }, {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/accesscategories/ZXJvYmplY3Rwcm9maWxlbmFtZT1BcHBsaWNhdGlvbixvdT1hY2Nlc3NUeXBlLG91PWl0aW0sb3U9b3JnLGRjPWNvbQ",
                                            "title": "Application"
                                        }
                                    },
                                    "_attributes": {
                                        "name": "Application"
                                    }
                                }, {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/accesscategories/ZXJvYmplY3Rwcm9maWxlbmFtZT1CdXNpbmVzcyxvdT1hY2Nlc3NUeXBlLG91PWl0aW0sb3U9b3JnLGRjPWNvbQ",
                                            "title": "Business"
                                        }
                                    },
                                    "_attributes": {
                                        "name": "Business"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/systemusers/{systemUserId}/delegations": {
            "get": {
                "tags": ["Delegation Management"],
                "summary": "Delegations Lookup",
                "description": "Returns information about the delegations, if any, for the specified user.",
                "parameters": [{
                    "name": "systemUserId",
                    "in": "path",
                    "description": "Unique Identifier for a system user.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "links": {
                                        "delegatee": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9Y3JpZWdsZSxvdT1zeXN0ZW1Vc2VyLG91PWl0aW0sb3U9b3JnLGRjPWNvbQ",
                                            "title": "Chuck Riegle"
                                        },
                                        "self": {
                                            "href": "itim/rest/systemusers/ZXJ1aWQ9YXNtaXRoLG91PXN5c3RlbVVzZXIsb3U9aXRpbSxvdT1vcmcsZGM9Y29t/delegations/JGVydWlkPWNyaWVnbGUsb3U9c3lzdGVtVXNlcixvdT1pdGltLG91PW9yZyxkYz1jb20kMTQyNDEzNjYwMDAwMCQxNDI0MjIzMDAwMDAw"
                                        }
                                    },
                                    "_attributes": {
                                        "endDate": 1424223000000,
                                        "startDate": 1424136600000
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Delegation Management"],
                "summary": "Delegation Add",
                "description": "Adds delegation for the specified user.",
                "parameters": [{
                    "name": "systemUserId",
                    "in": "path",
                    "description": "Unique Identifier for a system user.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DelegateRequestBean"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The delegation schedule is successfully created."
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/accounts": {
            "get": {
                "tags": ["Search"],
                "summary": "Account Search",
                "description": "Returns information about accounts that match the specified search criteria if there are any. \nBy default, no attributes are returned. The client must specify the \"attributes\" query parameter to request the attributes to be returned in the \"_attributes\" property of each account. \nIf wild-card is used, the list of returned attributes is different for different account profiles. \nIf a particular type is searched, the client knows the exact value to pass so that a profile can be searched(Ex.PosixLinuxAccount, ITIMAccount etc.). \n",
                "parameters": [{
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes that are returned for each account. The specified attributes are returned in the \"_attributes\" property of each account. Specifying a value of \"*\" returns all attributes. Example - ?attributes=owner,eraccountstatus,eruid,eraccountownershiptype",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "embedded",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for reference attributes of accounts (eg. erservice). The specified attributes are returned in the \"_embedded\" section of the response. Specifying a value of '*' after reference attribute returns all the properties of the reference attribute. Example - ?embedded=erservice.erservicename.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items that the search returns. Example - ?limit=1000",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "description": "Specifies the attribute and order (\"+\" for ascending, \"-\" for descending) for sorting the returned account. Note: The client is responsible for performing URL encoding if necessary. Example - ?sort=%2Deruid (%2D is UTF-8 encoding for - sign)",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The 'no-cache' option performs the search without referencing any cache. The 'delete-cache' option deletes the cache. In this case, empty search results are returned. Example - Cache-Control = no-cache",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Range",
                    "in": "header",
                    "description": "Specifies the range of items to return. Note: The range uses a zero-based index. Example - items=0-99",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/accounts/ZXJ1aWQ9Y3JpZWdsZSxvdT1zeXN0ZW1Vc2VyLG91PWl0aW0sb3U9b3JnLGRjPWNvbQ",
                                            "title": "criegle"
                                        }
                                    },
                                    "_attributes": {
                                        "eruid": "criegle"
                                    }
                                }, {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/accounts/ZXJ1aWQ9YWF1c3RpbixvdT1zeXN0ZW1Vc2VyLG91PWl0aW0sb3U9b3JnLGRjPWNvbQ",
                                            "title": "aaustin"
                                        }
                                    },
                                    "_attributes": {
                                        "eruid": "aaustin"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/activities/{activityId}": {
            "get": {
                "tags": ["Activity Management"],
                "summary": "Activity Lookup",
                "description": "Returns information about the specified activity.",
                "parameters": [{
                    "name": "activityId",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "format": "int64",
                        "type": "integer"
                    }
                }, {
                    "name": "participantLimit",
                    "in": "query",
                    "description": "Specifies the maximum number of participants for an activity. Specifying a zero (0) indicates that there is no limit.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "request": {
                                        "id": "2461570965242287130",
                                        "justification": "ghyrh",
                                        "submittedDate": 1428649755392
                                    },
                                    "_links": {
                                        "requester": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9anBlYXJjT1zeXN0ZW1Vc2VyLG91PWl0aW0sb3U9b3JnLGRjPWNvbQ",
                                            "title": "James Pearch"
                                        },
                                        "request": {
                                            "href": "/itim/rest/requests/2461570965242287130"
                                        },
                                        "requestee": {
                                            "href": "/itim/rest/people/ZXJnbG9iYWxpZD0yNDYwMzAyNDk3OTQ1MjgyODcxLG91PTAsb3U9cGVvcGxlLGVyZ2xAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                            "title": "Alan Smith"
                                        },
                                        "workitem": {
                                            "href": "/itim/rest/workitems/2461578203364444755"
                                        },
                                        "self": {
                                            "href": "/itim/rest/activities/2461577992772412588",
                                            "title": "Approval activity"
                                        },
                                        "dependentAccesses": [],
                                        "participants": [{
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9Y3JpZWdsZSxvdT1zeXN0ZW1Vc2VyLG91PWl0aW0sb3U9b3JnLGRjPWNvbQ",
                                            "title": "Chuck Riegle"
                                        }]
                                    },
                                    "subject": {
                                        "_links": {
                                            "icon": {
                                                "href": "custom/ui/images/access/iconApplicationAccess.gif"
                                            },
                                            "self": {
                                                "href": "/itim/rest/access/2460300160735116790",
                                                "title": "GSA"
                                            }
                                        },
                                        "_attributes": {
                                            "name": "GSA",
                                            "accessCategory": "Application",
                                            "description": "GSA repository.",
                                            "serviceName": "GSA",
                                            "type": "ACCESS",
                                            "accountUserId": "asmith"
                                        }
                                    },
                                    "uiProperties": [{
                                        "name": "ui.activities.displayJustification",
                                        "value": true
                                    }, {
                                        "name": "ui.activities.displayUserComments",
                                        "value": true
                                    }],
                                    "_attributes": {
                                        "requesteeName": "Alan Smith",
                                        "workitemId": "2461578203364444755",
                                        "instructions": "Request for Approval",
                                        "totalNumberOfParticipants": 1,
                                        "requesterName": "James Pearch",
                                        "dueDate": 1428736156784,
                                        "escalated": false,
                                        "name": "Approval activity",
                                        "id": "2461577992772412588",
                                        "type": "APPROVAL",
                                        "status": {
                                            "text": "Pending",
                                            "key": "RequestAuditDataActivity.Status.PENDING"
                                        },
                                        "dueDateWarning": true
                                    },
                                    "actions": {
                                        "approve": {
                                            "code": "AA",
                                            "inProgressLabel": {
                                                "text": "Approving",
                                                "key": "AA_inProgress"
                                            },
                                            "label": {
                                                "text": "Approve",
                                                "key": "AA"
                                            }
                                        },
                                        "reject": {
                                            "code": "AR",
                                            "inProgressLabel": {
                                                "text": "Rejecting",
                                                "key": "AR_inProgress"
                                            },
                                            "label": {
                                                "text": "Reject",
                                                "key": "AR"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/access": {
            "get": {
                "tags": ["Search"],
                "summary": "Access Search",
                "description": "Returns all accesses for the specified user.",
                "parameters": [{
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for each access item. The specified attributes are returned in the \"_attributes\" property of each access item. Specifying a value of \"*\" returns all attributes. Example - ?attributes=accessName,accessCategory,isCommon,entityProfile,tags,description,entityType,badges,additionalInformation",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items that the search returns. Example - ?limit=1000",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "searchForCommonAccess",
                    "in": "query",
                    "description": "Decides whether default search for common access should be executed in request access flow.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "description": "Specifies the attribute and its order (\"+\" for ascending, \"-\" for descending) by which the returned list of accesses should be sorted. Sorting is currently supported on the following attributes- accessName, accessCategory, description and additionalInformation. Any other attribute will be ignored and the sorting attribute and order will be chosen by the underlying data store (in the case of access it is RDBMS). Example - ?sort=%2BaccessName, ?sort=%2BaccessCategory, ?sort=%2Ddescription, ?sort=%2DadditionalInformation (%2B and %2D is UTF-8 encoding for + and - sign respectively)",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The 'no-cache' option searches without referencing any cache. The 'delete-cache' option deletes the cache. In this case, empty search results are returned. Example - Cache-Control = no-cache",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Range",
                    "in": "header",
                    "description": "Specifies the range of items to return. Note: The range uses a zero-based index. Example - items=0-99",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "assignments": {
                                            "href": "/itim/rest/access/assignments"
                                        },
                                        "icon": {
                                            "href": "custom/ui/images/access/iconApplications~BusinessApplications~FinanceAccess.gif"
                                        },
                                        "self": {
                                            "href": "/itim/rest/access/376511431976528341",
                                            "title": "Accounting Plus"
                                        },
                                        "owners": {
                                            "href": "/itim/rest/access/376511431976528341/owners"
                                        }
                                    },
                                    "_attributes": {
                                        "badges": [],
                                        "additionalInformation": " ",
                                        "accessName": "Accounting Plus",
                                        "entityType": 2,
                                        "entityProfile": "LdapGroupProfile",
                                        "accessCategory": "Applications:BusinessApplications:Finance",
                                        "isCommon": false,
                                        "description": "Accounts payable, receivable and more...",
                                        "tags": "Require manager approval |testing 1,2,3"
                                    }
                                }, {
                                    "_links": {
                                        "assignments": {
                                            "href": "/itim/rest/access/assignments"
                                        },
                                        "icon": {
                                            "href": "custom/ui/images/access/iconApplications~SupportApplicationsAccess.gif"
                                        },
                                        "self": {
                                            "href": "/itim/rest/access/376511317273827596",
                                            "title": "Business Partner Connect"
                                        },
                                        "owners": {
                                            "href": "/itim/rest/access/376511317273827596/owners"
                                        }
                                    },
                                    "_attributes": {
                                        "badges": [],
                                        "additionalInformation": " ",
                                        "accessName": "Business Partner Connect",
                                        "entityType": 2,
                                        "entityProfile": "LdapGroupProfile",
                                        "accessCategory": "Applications:SupportApplications",
                                        "isCommon": false,
                                        "description": "Allows business partners to access project manuals and support documentation.",
                                        "tags": "Customer data"
                                    }
                                }, {
                                    "_links": {
                                        "assignments": {
                                            "href": "/itim/rest/access/assignments"
                                        },
                                        "icon": {
                                            "href": "custom/ui/images/access/iconApplicationAccess.gif"
                                        },
                                        "self": {
                                            "href": "/itim/rest/access/3383957381996504114",
                                            "title": "Manager"
                                        },
                                        "owners": {
                                            "href": "/itim/rest/access/3383957381996504114/owners"
                                        }
                                    },
                                    "_attributes": {
                                        "badges": [],
                                        "roleAssignmentAttributes": [{
                                            "_attributes": {
                                                "definedRole": "/itim/rest/roles/ZXJnbG9iYWxpZD0zMzgzOTU3MzgxOTk2NTA0MTE0LG91PXJvbGVzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWlzaW0",
                                                "assignmentAttributeKey": "StartDate",
                                                "assignmentAttributeLabel": "StartDate",
                                                "definedRoleName": "Manager"
                                            }
                                        }, {
                                            "_attributes": {
                                                "definedRole": "/itim/rest/roles/ZXJnbG9iYWxpZD0zMzgzOTU3MzgxOTk2NTA0MTE0LG91PXJvbGVzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWlzaW0",
                                                "assignmentAttributeKey": "EndDate",
                                                "assignmentAttributeLabel": "EndDate",
                                                "definedRoleName": "Manager"
                                            }
                                        }],
                                        "additionalInformation": " ",
                                        "accessName": "Manager",
                                        "entityType": 3,
                                        "entityProfile": "Organization role",
                                        "description": "Allows end user a manager role.",
                                        "isCommon": false,
                                        "tags": "Customer data",
                                        "isEditRoleAssignmnetAttributeAllowedForPerson": true
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Access Management"],
                "summary": "Create Access",
                "description": "\r\n\r\nCreates access for the entity \r\n\r\n Required attributes: \r\n\r\nentityType - Value should be 3 as currently this API only supports creating access for the role \r\n\r\nentityRef - Value should be uuid of the role for which access needs to be created. \r\n\r\naccessCategory - \r\n\r\nIn case of providing accessSubtype value for accessCategory hierarchy of accessType should be provided \r\n\r\ne.g. If Application has subtype ApplicationSubtype and ApplicationSubtype has subtype ApplicationSubtypeChild\r\n\r\nthen to add ApplicationSubtypeChild as accessCategory value should be provided as Application:ApplicationSubtype:ApplicationSubtypeChild\r\n\r\nNote: isCommon attribute is only applicable for static roles not for dynamic roles. \r\n",
                "parameters": [{
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateAccessBean"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "accessId": "5065865355324288496"
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/systemusers/{systemUserId}/constraints/password": {
            "get": {
                "tags": ["Password Management"],
                "summary": "System User password constraints Lookup",
                "description": "Returns the password constraints for the specified system user. \r\nThe \"passwordRules\" property is an array listing of each rule for the password. If there are no password rules, an empty array is returned.",
                "parameters": [{
                    "name": "systemUserId",
                    "in": "path",
                    "description": "The System User ID for which you want to retrieve constraints.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "embedded",
                    "in": "query",
                    "description": "Specifies the comma-separated constraints to return for the specified link. The specified constraints are returned in the \"_embedded\" property of the constraint object. Example - ?embedded=passwordConstraints",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9SVRJTSBNYW5hZ2VyLG91PXN5c3RlbVVzZXIsb3U9aXRpbSxvdT1vcmcsZGM9Y29t/constraints/password",
                                            "title": "Password Constraints"
                                        }
                                    },
                                    "passwordRules": [{
                                        "text": "The minimum number of characters in the password is 1.",
                                        "inserts": ["1"],
                                        "key": "com.ibm.isim.rest.passwordrules.MIN_LENGTH"
                                    }]
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/accesscategories/{accessCategoryID}": {
            "get": {
                "tags": ["Access Management"],
                "summary": "Access Category Lookup",
                "description": "Returns information about a specified access category.",
                "parameters": [{
                    "name": "accessCategoryID",
                    "in": "path",
                    "description": "Unique Identifier for an access category.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "The request is successfully processed.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "children": {
                                            "href": "/itim/rest/accesscategories/ZXJvYmplY3Rwcm9maWxlbmFtZT1BcHBsaWNhdGlvbixvdT1hY2Nlc3NUeXBlLG91PWl0aW0sb3U9b3JnLGRjPWNvbQ/childaccesscategories"
                                        },
                                        "self": {
                                            "href": "/itim/rest/accesscategories/ZXJvYmplY3Rwcm9maWxlbmFtZT1BcHBsaWNhdGlvbixvdT1hY2Nlc3NUeXBlLG91PWl0aW0sb3U9b3JnLGRjPWNvbQ"
                                        }
                                    },
                                    "_attributes": {
                                        "name": "Application"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/workitems/{workitemId}": {
            "put": {
                "tags": ["Activity Management"],
                "summary": "WorkItem Modify",
                "description": "Modifies a work item by executing an action provided for the activity.\r\n\r\nRequest Body Parameters:\r\n\r\nA decision based activity eg. approvals, separation of duty violations, simple user recertifications:\r\n\r\nEither of the following action code should be specified in the request body:\r\n\r\nFor an activity approval : AA\r\n\r\nFor an activity rejection : AR\r\n\r\n\r\n\r\nCompleting a work order request:\r\n\r\nEither of the following action code should be specified in the request body:\r\n\r\nFor an activity success : SS  if you complete the work order.\r\n\r\nFor an activity warning : SW  if the work order is only partially complete.\r\n\r\nFor an activity failure : SF  if you cannot complete the work order.\r\n\r\n\r\n\r\nCompleting a global alert policy enforcement:\r\n\r\nThe following action code should be specified in the request body:\r\n\r\nFor an activity success: SS if you want to correct the noncompliance.\r\n\r\nYou must set attribute deferActivity to false.\r\n\r\n\r\n\r\nDeferring a global alert policy enforcement:\r\n\r\nThe action code should be specified as SS in the request body:\r\n\r\nYou must set attribute deferActivity to true.\r\n\r\nYou must specify deferDate, which is in milliseconds since the standard base time known as \"the epoch\", namely January 1, 1970, 00:00:00 GMT.\r\n\r\n\r\n\r\nProviding request for information:\r\n\r\nThe following action code should be specified in the request body:\r\n\r\nFor an activity request submission: RS.\r\n\r\nYou can specify the value for RFI attributes in rfiAttributeValues.\r\n\r\n\r\n\r\n\r\n\r\n[See request examples](/itim/swaggerdoc/workItemModify.html)",
                "parameters": [{
                    "name": "workitemId",
                    "in": "path",
                    "description": "Unique identifier for a work item.",
                    "required": true,
                    "schema": {
                        "format": "int64",
                        "type": "integer"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkItemUpdateBeanSwagger"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK. The request was successful"
                    }
                }
            },
            "post": {
                "tags": ["Activity Management"],
                "summary": "User Re-certification Check Impact",
                "description": "Evaluates the user re-certification impact",
                "parameters": [{
                    "name": "workitemId",
                    "in": "path",
                    "description": "Unique identifier for a work item.",
                    "required": true,
                    "schema": {
                        "format": "int64",
                        "type": "integer"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "X-HTTP-Method-Override",
                    "in": "header",
                    "description": "Specifies the HTTP method override. The value of this parameter is - \"check-recertification\" ",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRecertificationDetailsBean"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "rolesImpactTarget": [{
                                        "ownershipType": "",
                                        "name": "Developers",
                                        "impactedBy": "",
                                        "description": "Developers in Costa Mesa location",
                                        "dependentRecertificationTodoTargets": [],
                                        "dn": "erglobalid=2402438404547081094,ou=roles,erglobalid=00000000000000000000,ou=org,dc=com",
                                        "impactType": ""
                                    }, {
                                        "ownershipType": "",
                                        "name": "Managers",
                                        "impactedBy": "",
                                        "description": "Managers in Costa Mesa location",
                                        "dependentRecertificationTodoTargets": [],
                                        "dn": "erglobalid=2402438404547081111,ou=roles,erglobalid=00000000000000000000,ou=org,dc=com",
                                        "impactType": ""
                                    }],
                                    "accountsImpactTarget": [{
                                        "ownershipType": "Individual",
                                        "name": "vm on linux service",
                                        "impactedBy": "",
                                        "description": "",
                                        "dependentRecertificationTodoTargets": [{
                                            "ownershipType": "",
                                            "name": "apache access",
                                            "impactedBy": "",
                                            "description": "Apache access to xyz application",
                                            "dependentRecertificationTodoTargets": [],
                                            "dn": "erposixgroupname=apache,erglobalid=942064772966405183,ou=services,erglobalid=00000000000000000000,ou=org,dc=com",
                                            "impactType": "explicit"
                                        }],
                                        "dn": "erglobalid=2400238261244324504,ou=0,ou=accounts,erglobalid=00000000000000000000,ou=org,dc=com",
                                        "impactType": ""
                                    }, {
                                        "ownershipType": "Individual",
                                        "name": "vm on aix service",
                                        "impactedBy": "Developers",
                                        "description": "",
                                        "dependentRecertificationTodoTargets": [],
                                        "dn": "erglobalid=5949047696333471469,ou=0,ou=accounts,erglobalid=00000000000000000000,ou=org,dc=com",
                                        "impactType": "implicit"
                                    }]
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/activities": {
            "get": {
                "tags": ["Activity Management"],
                "summary": "Activities Search",
                "description": "Returns information about activities that match the specified search criteria.",
                "parameters": [{
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items that the search returns. Example. ?limit=1000",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "participantLimit",
                    "in": "query",
                    "description": "Specifies the maximum number of participants to return. Example. ?participantLimitParm=10",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "description": "Specifies the attribute and order (\"+\" for ascending, \"-\" for descending) for sorting the returned account.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The 'no-cache' option specifies performs the search without referencing any cache. The 'delete-cache' option deletes the cache. In this case, empty search results are returned. Example - Cache-Control = no-cache ",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Range",
                    "in": "header",
                    "description": "Specifies the range of items to return. Note: The range uses a zero-based index. Example - items=0-99",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "request": {
                                        "id": "2461570965242287130",
                                        "justification": "ghyrh",
                                        "submittedDate": 1428649755392
                                    },
                                    "_links": {
                                        "requester": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9anBlYXJjT1zeXN0ZW1Vc2VyLG91PWl0aW0sb3U9b3JnLGRjPWNvbQ",
                                            "title": "James Pearch"
                                        },
                                        "request": {
                                            "href": "/itim/rest/requests/2461570965242287130"
                                        },
                                        "requestee": {
                                            "href": "/itim/rest/people/ZXJnbG9iYWxpZD0yNDYwMzAyNDk3OTQ1MjgyODcxLG91PTAsb3U9cGVvcGxlLGVyZ2xAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                            "title": "Alan Smith"
                                        },
                                        "workitem": {
                                            "href": "/itim/rest/workitems/2461578203364444755"
                                        },
                                        "self": {
                                            "href": "/itim/rest/activities/2461577992772412588",
                                            "title": "Approval activity"
                                        },
                                        "dependentAccesses": [],
                                        "participants": [{
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9Y3JpZWdsZSxvdT1zeXN0ZW1Vc2VyLG91PWl0aW0sb3U9b3JnLGRjPWNvbQ",
                                            "title": "Chuck Riegle"
                                        }]
                                    },
                                    "subject": {
                                        "_links": {
                                            "icon": {
                                                "href": "custom/ui/images/access/iconApplicationAccess.gif"
                                            },
                                            "self": {
                                                "href": "/itim/rest/access/2460300160735116790",
                                                "title": "GSA"
                                            }
                                        },
                                        "_attributes": {
                                            "name": "GSA",
                                            "accessCategory": "Application",
                                            "description": "GSA repository.",
                                            "serviceName": "GSA",
                                            "type": "ACCESS",
                                            "accountUserId": "asmith"
                                        }
                                    },
                                    "_attributes": {
                                        "requesteeName": "Alan Smith",
                                        "workitemId": "2461578203364444755",
                                        "instructions": "Request for Approval",
                                        "totalNumberOfParticipants": 1,
                                        "requesterName": "James Pearch",
                                        "dueDate": 1428736156784,
                                        "escalated": false,
                                        "name": "Approval activity",
                                        "id": "2461577992772412588",
                                        "type": "APPROVAL",
                                        "status": {
                                            "text": "Pending",
                                            "key": "RequestAuditDataActivity.Status.PENDING"
                                        },
                                        "dueDateWarning": true
                                    },
                                    "actions": {
                                        "approve": {
                                            "code": "AA",
                                            "inProgressLabel": {
                                                "text": "Approving",
                                                "key": "AA_inProgress"
                                            },
                                            "label": {
                                                "text": "Approve",
                                                "key": "AA"
                                            }
                                        },
                                        "reject": {
                                            "code": "AR",
                                            "inProgressLabel": {
                                                "text": "Rejecting",
                                                "key": "AR_inProgress"
                                            },
                                            "label": {
                                                "text": "Reject",
                                                "key": "AR"
                                            }
                                        }
                                    }
                                }, {}, {}]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/requests/{requestId}": {
            "get": {
                "tags": ["Search"],
                "summary": "Request Lookup",
                "description": "Returns information about the specified request.",
                "parameters": [{
                    "name": "requestId",
                    "in": "path",
                    "description": "Unique Identifier for a request.",
                    "required": true,
                    "schema": {
                        "format": "int64",
                        "type": "integer"
                    }
                }, {
                    "name": "activityID",
                    "in": "query",
                    "description": "Specifies the activity ID that requires request information.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "requester": {
                                            "href": "/itim/rest/people/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwNyxvdT0wLG91PXBlb3BsZSxlcmdsb2JhbGlkPTAwMDAwMDAwMDAwMDAwMDAwMDAwLG91PW9yZyxkYz1jb20",
                                            "title": "System Administrator"
                                        },
                                        "self": {
                                            "href": "/itim/rest/requests/9170709815227290417"
                                        }
                                    },
                                    "obligations": [{
                                        "_auditattributes": {},
                                        "action": "MODIFY_PERSON",
                                        "id": "obligation1",
                                        "_attributes": {
                                            "manager": "erglobalid=7641180504304689103,ou=0,ou=people,erglobalid=00000000000000000000,ou=org,dc=com"
                                        }
                                    }],
                                    "requests": [{
                                        "_links": {
                                            "requestee": {
                                                "href": "/itim/rest/people",
                                                "title": "Chuck Riegle"
                                            },
                                            "workitem": {
                                                "href": "/itim/rest/workitems/2958404487582489586"
                                            }
                                        },
                                        "subject": {
                                            "_links": {
                                                "formTemplate": {
                                                    "href": "/itim/rest/forms?requestee=/itim/rest/people/ZXJnbG9iYWxpZD03NjQxMTgwNTA0NjQxMzAwODc2LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ&filterId=formSearch"
                                                },
                                                "self": {
                                                    "href": "/itim/rest/people/ZXJnbG9iYWxpZD03NjQxMTgwNTA0NjQxMzAwODc2LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                                    "title": "Chuck Riegle"
                                                },
                                                "erparent": {
                                                    "href": "/itim/rest/organizationcontainers/locations/ZXJnbG9iYWxpZD04ODE1MzI3OTYxODY1NjE5ODk3LG91PW9yZ0NoYXJ0LGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ"
                                                }
                                            },
                                            "_attributes": {
                                                "mail": "criegle@ibm.com",
                                                "erparent": "erglobalid=8815327961865619897,ou=orgChart,erglobalid=00000000000000000000,ou=org,dc=com"
                                            }
                                        },
                                        "obligations": [{
                                            "$ref": "obligation1"
                                        }],
                                        "_attributes": {
                                            "action": {
                                                "text": "Edit profile",
                                                "key": "RequestAuditData.Action.MODIFY"
                                            },
                                            "status": {
                                                "text": "Fulfilled",
                                                "key": "RequestAuditData.Status.FULFILLED"
                                            }
                                        }
                                    }],
                                    "_attributes": {
                                        "action": {
                                            "text": "Edit profile",
                                            "key": "RequestAuditData.Action.MODIFY"
                                        },
                                        "justification": "Updating manager",
                                        "id": "9170709815227290417",
                                        "submittedDate": 1430211848230,
                                        "completedDate": 1430211859884,
                                        "status": {
                                            "text": "Fulfilled",
                                            "key": "RequestAuditData.Status.FULFILLED"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/organizationcontainers/{category}": {
            "get": {
                "tags": ["Search"],
                "summary": "Organization Container Search",
                "description": "Returns information about the organization container that matches the specified search criteria if any.",
                "parameters": [{
                    "name": "category",
                    "in": "path",
                    "description": "Specifies the type of organization container to look up. Valid values are - \"admindomains\", \"bporganizations\", \"organizationunits\", \"locations\", and \"organizations\". The values are case-insensitive.",
                    "required": true,
                    "schema": {
                        "enum": ["admindomains", "bporganizations", "organizationunits", "locations", "organizations"],
                        "type": "string"
                    }
                }, {
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for each organizational container. By default, no attributes are returned. The client must specify the \"attributes\" query parameter to request the attributes to be returned in the \"_attributes\" property of each person. A requested attribute is returned if the client does not have permission to retrieve the attribute or if the value of the attribute is null. Specifying a value of \"*\" will return all of the attributes. Example. ?attributes=l",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items that search returns. Example. ?limit=1000",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "description": "Specifies the attribute and order (\"+\" for ascending, \"-\" for descending) for sorting the returned location. Note: The client is responsible for performing URL encoding if necessary. Example. ?sort=%2Bl (%2B is UTF-8 encoding for + sign)",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The 'no-cache' option performs the search without referencing any cache. The 'delete-cache' option deletes the cache. In this case, empty search results are returned. Example - Cache-Control = no-cache ",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Range",
                    "in": "header",
                    "description": "Specifies the range of items to return. Note: The range uses a zero-based index. Example - items=0-99",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/organizationcontainers/locations/ZXJnbG9iYWxpZD02MjE5NjY4NDkyODAyNzA0OTU2LG91PW9yZ0NoYXJ0LGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                            "title": "Raleigh"
                                        },
                                        "erparent": {
                                            "href": "/itim/rest/organizationcontainers/organizations/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t"
                                        }
                                    },
                                    "_attributes": {
                                        "l": "Raleigh",
                                        "erparent": "erglobalid=00000000000000000000,ou=org,dc=com"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/services": {
            "get": {
                "tags": ["Service Management"],
                "summary": "Search Service",
                "description": "Returns information about services matching the specified search criteria (if any). \r\n\r\nNotes: \r\n\r\nThe \"name\" of the service is returned in the _links.self.title property. \r\n\r\nThe \"statusDetails\" of the service is returned as the _links.statusDetails.href link. \r\n\r\nBy default, no attributes are returned. The client must specify the \"attributes\" query parameter to request the attributes to be returned in the \"_attributes\" property of each service. \r\n\r\nIf a wild-card is used, the list of attributes returned is different for different service profiles. \r\n\r\nTo search a particular type, the client must know the exact value to pass to search that profile(Ex.PosixLinuxProfile). \r\n",
                "parameters": [{
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for each service. The specified attributes are returned in the \"_attributes\" property of each service. Specifying a value of \"*\" returns all attributes. Example - ?attributes=erservicename,owner,erparent",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items that the search returns. Example - ?limit=1000",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "description": "Specifies the attribute and order (\"+\" for ascending, \"-\" for descending) for sorting the returned service. Note: The client is responsible for performing URL encoding if necessary. Example - ?sort=%2Berservicename (%2B is UTF-8 encoding for + sign)",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The 'no-cache' option specifies performs the search without refererencing any cache. The 'delete-cache' option deletes the cache. In this case, empty search results are returned. Example - Cache-Control = no-cache ",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Range",
                    "in": "header",
                    "description": "Specifies the range of items to return. Note: The range uses a zero-based index. Example - items=0-99",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "statusDetails": {
                                            "href": "/itim/rest/services/ZXJnbG9iYWxpZD00NjkzMTEwNjAxNzQ0Mzk1ODUxLG91PXNlcnZpY2VzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ/statusdetails",
                                            "title": "statusDetails"
                                        },
                                        "self": {
                                            "href": "/itim/rest/services/ZXJnbG9iYWxpZD00NjkzMTEwNjAxNzQ0Mzk1ODUxLG91PXNlcnZpY2VzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                            "title": "GSA"
                                        }
                                    },
                                    "_attributes": {
                                        "description": "GSA hosted on Linux server.",
                                        "erservicename": "GSA"
                                    }
                                }, {
                                    "_links": {
                                        "statusDetails": {
                                            "href": "/itim/rest/services/ZXJnbG9iYWxpZD00NjkzMTExODQwMDg2ODI2MjI0LG91PXNlcnZpY2VzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ/statusdetails",
                                            "title": "statusDetails"
                                        },
                                        "self": {
                                            "href": "/itim/rest/services/ZXJnbG9iYWxpZD00NjkzMTExODQwMDg2ODI2MjI0LG91PXNlcnZpY2VzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                            "title": "Fileshare on solaris"
                                        }
                                    },
                                    "_attributes": {
                                        "description": "Fileshare on solaris.",
                                        "erservicename": "Fileshare on solaris"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Service Management"],
                "summary": "Service Create",
                "description": "Creates a new service with the given attributes. \r\nprofileName: Name of the service profile. This is a required parameter. \r\norgID: The ID of the Organization container in which this service is to be created. This parameter is required. \r\n_attributes : JSON representation of the service attributes to be set. \r\n \r\nOptional request body parameters:\r\n manualWorkOrderRequest: This is applicable only when service is to be created in manual connection mode.\r\n If you request service in manual connection mode and do not provide the details for the manualWorkOrderRequest, then the service will\r\n be created with a default data for manual work order.\r\n The manualWorkOrderRequest should be specified in following format : \r\n\r\n \"manualWorkOrderRequest\": {\r\n\r\n      \"participant\": {\r\n            \t\"type\":\"USER\",\r\n             \t\"id\":\"ZXJnbG9iYWxpZD02MzkwMDg1MDQ2MjczNDI3MjQ1LG91PTAsb3U9cGVvcGxlLGVy\r\n                Z2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ\"\r\n       },\r\n      \"escalationParticipant\": {\r\n            \t\"type\":\"ADMINISTRATOR\"\r\n       },\r\n     \t\"escalationPeriod\":\"10\",\r\n     \t\"defaultNotification\":\"true\"\r\n }\r\n \r\n Supported values for participant and escalationParticipant \"type\":\r\n 1) ADMINISTRATOR, SERVICE_OWNER, MANAGER : id value does not required.\r\n 2) USER, ORGANIZATIONAL_ROLE, GROUP : id value required.\r\n \r\n defaultProvisioningPolicyRequest: Should be specified only when you want a default provisioning policy to be created after\r\n the service is created.\r\n If you request service without providing any details for defaultProvisioningPolicyRequest then request does not create default\r\n provisioning policy for a service.\r\n \r\n This should be specified in the following format :\r\n \"defaultProvisioningPolicyRequest\": {\r\n\r\n \t\t\"enabled\":\"true\",\r\n \t\t\"provisioningMode\":\"Automatic\"\r\n }\r\n \r\n \"provisioningMode\" mode, which specifies the provisioning policy mode, should be Automatic or Manual.\r\n\r\n[See more request examples](/itim/swaggerdoc/serviceCreate.html)",
                "parameters": [{
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRequestBeanSwagger"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK. The request was successful."
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/systemusers/{systemUserId}/password": {
            "put": {
                "tags": ["Password Management"],
                "summary": "Change Password (System Accounts)",
                "description": "Changes password for the Identity Manager System account.",
                "parameters": [{
                    "name": "systemUserId",
                    "in": "path",
                    "description": "The System User ID to retrieve constraints for.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "maxWaitTime",
                    "in": "query",
                    "description": "Maximum time (in milliseconds) after which the call returns if request is not complete. A value less than 0 is not considered. Example - ?maxWaitTime=5000",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "pollingTime",
                    "in": "query",
                    "description": "Frequency (in milliseconds) to check if the request completed. A value less than 0 is not considered. Example - ?pollingTime=1000",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "X-HTTP-Method-Override",
                    "in": "header",
                    "description": "Specifying \"validate\" requests validation of the password. Example - X-HTTP-Method-Override=validate",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChangePasswordSwaggerBean"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "OK. The request was successful"
                    },
                    "400": {
                        "description": "Bad request. This response is returned if the request header or query parameters are not formatted correctly.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "severity": "E",
                                    "text": "CTGIMH001E The password does not meet the requirements of the password rules.",
                                    "id": "CTGIMH001",
                                    "key": "com.ibm.passwordrules.ONE_OR_MORE_RULES_VIOLATED",
                                    "supportingData": {
                                        "_links": {
                                            "self": {
                                                "href": "/itim/rest/systemusers/ZXJ1aWQ9SVRJTSBNYW5hZ2VyLG91PXN5c3RlbVVzZXIsb3U9aXRpbSxvdT1vcmcsZGM9Y29t/password"
                                            },
                                            "systemuser": {
                                                "href": "/itim/rest/systemusers/ZXJ1aWQ9SVRJTSBNYW5hZ2VyLG91PXN5c3RlbVVzZXIsb3U9aXRpbSxvdT1vcmcsZGM9Y29t",
                                                "title": "ITIM Manager"
                                            }
                                        },
                                        "passwordRules": [{
                                            "text": "The minimum number of characters in the password is 1.",
                                            "inserts": ["1"],
                                            "key": "com.ibm.isim.rest.passwordrules.MIN_LENGTH",
                                            "passedValidation": true
                                        }, {
                                            "text": "The maximum number of characters in the password is 5.",
                                            "inserts": ["5"],
                                            "key": "com.ibm.isim.rest.passwordrules.MAX_LENGTH",
                                            "passedValidation": false
                                        }, {
                                            "text": "The maximum repeated characters in the password is 1.",
                                            "inserts": ["1"],
                                            "key": "com.ibm.isim.rest.passwordrules.MAX_SEQUENTIAL",
                                            "passedValidation": true
                                        }, {
                                            "text": "The password must not include the characters \"!@#$\".",
                                            "inserts": ["!@#$"],
                                            "key": "com.ibm.isim.rest.passwordrules.INVALID_CHAR",
                                            "passedValidation": true
                                        }]
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Password Management"],
                "summary": "Validate password (System Account)",
                "description": "Validates password for the Identity Manager System account.",
                "parameters": [{
                    "name": "systemUserId",
                    "in": "path",
                    "description": "The System User ID for which you want to retrieve constraints.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "X-HTTP-Method-Override",
                    "in": "header",
                    "description": "Specifying a value of \"validate\" indicates a request to validate the password. Example - X-HTTP-Method-Override=validate",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ValidatePasswordSwaggerBean"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9SVRJTSBNYW5hZ2VyLG91PXN5c3RlbVVzZXIsb3U9aXRpbSxvdT1vcmcsZGM9Y29t/password "
                                        },
                                        "systemuser": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9SVRJTSBNYW5hZ2VyLG91PXN5c3RlbVVzZXIsb3U9aXRpbSxvdT1vcmcsZGM9Y29t ",
                                            "title": "ITIM Manager"
                                        }
                                    },
                                    "passwordRules": [{
                                        "text": "The minimum number of characters in the password is 1.",
                                        "inserts": ["1"],
                                        "key": "com.ibm.isim.rest.passwordrules.MIN_LENGTH",
                                        "passedValidation": true
                                    }, {
                                        "text": "The maximum number of characters in the password is 5.",
                                        "inserts": ["5"],
                                        "key": "com.ibm.isim.rest.passwordrules.MAX_LENGTH",
                                        "passedValidation": false
                                    }, {
                                        "text": "The maximum repeated characters in the password is 1.",
                                        "inserts": ["1"],
                                        "key": "com.ibm.isim.rest.passwordrules.MAX_SEQUENTIAL",
                                        "passedValidation": false
                                    }, {
                                        "text": "The password must not include the characters \"!@#$\".",
                                        "inserts": ["!@#$"],
                                        "key": "com.ibm.isim.rest.passwordrules.INVALID_CHAR",
                                        "passedValidation": true
                                    }]
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/roles/{roleId}": {
            "get": {
                "tags": ["Search"],
                "summary": "Role Lookup",
                "description": "Returns information about the specified role.",
                "parameters": [{
                    "name": "roleId",
                    "in": "path",
                    "description": "Unique Identifier for a role.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies comma-separated attributes to return for the role. The specified attributes are returned in the \"_attributes\" section of the response. Specifying a value of \"*\" returns all attributes. By default all attributes are returned. Example - ?attributes=owner,errolename,description",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "embedded",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for a reference attribute of role (eg. owner). The specified attributes are returned in the \"_embedded\" section of the response. Specifying a value of '*' after reference attribute returns all the properties of the reference attribute. Example - ?embedded=owner.cn.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "owner": {
                                            "href": "/itim/rest/people/ZXJnbG9iYWxpZD02ODkyNzY4MDY5NTM2ODU0NTQ2LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ"
                                        },
                                        "self": {
                                            "href": "/itim/rest/roles/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMSxvdT1yb2xlcyxlcmdsb2JhbGlkPTAwMDAwMDAwMDAwMDAwMDAwMDAwLG91PW9yZyxkYz1jb20",
                                            "title": "ITIM Administrators"
                                        },
                                        "erparent": {
                                            "href": "/itim/rest/organizationcontainers/organizations/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t"
                                        }
                                    },
                                    "_attributes": {
                                        "owner": "erglobalid=6892768069536854,ou=0,ou=people,erglobalid=00000000000000000000,ou=org,dc=com",
                                        "errolename": "ITIM Administrators",
                                        "description": "Predefined system administrator role",
                                        "eraccessname": "ITIM Administrators",
                                        "erparent": "erglobalid=00000000000000000000,ou=org,dc=com"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/services/enforcepolicy/{serviceId}": {
            "post": {
                "tags": ["Service Management"],
                "summary": "Enforce Policy for Service",
                "description": "Enforce a policy on the specified service. \r\n\r\nscheduledTime is optional. The scheduled time should be specified in following format : MM/dd/yyyy HH:mm \r\n\r\nIf you want to enforce the policy immediately then provide the null or empty contents (i.e. null or {}) in request body.\r\n",
                "parameters": [{
                    "name": "serviceId",
                    "in": "path",
                    "description": "Unique identifier for a service.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnforcePolicyRequestBeanSwagger"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "The requested was accepted.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "requestId": "2565810057541954463",
                                    "changeComplete": false,
                                    "status": 0
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/people/person": {
            "get": {
                "tags": ["Person Management"],
                "summary": "People Search for Person Category",
                "description": "Returns information for the specified user that belongs to a Person category. \r\n\r\nThe \"name\" of the user is returned in the _links.self.title property. \r\n\r\nBy default, no attributes are returned. The client must specify the \"attributes\" query parameter to request the attributes that are returned in the \"_attributes\" property of each user. \r\n\r\nA requested attribute is not returned if the client does not have permission to retrieve the attribute or if the value of the attribute is null. \r\n\r\nIf an attribute has multiple values, the value of the corresponding property is an array of the attribute's values. \r\n",
                "parameters": [{
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma separated attributes that should be returned for each person. The specified attributes are returned in the \"_attributes\" property of each person. Specifying a value of \"*\" will return all of the attributes. Example - ?attributes=cn,sn",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "embedded",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for a reference attribute of a user (eg. manager). The specified attributes are returned in the \"_embedded\" section of the response. Specifying a value of '*' after reference attribute returns all the properties of the reference attribute. Example - ?embedded=manager.cn",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items that the search returns. Example - ?limit=1000",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "description": "Specifies the attribute and order (\"+\" for ascending, \"-\" for descending) for sorting the returned result. Note: The client is responsible for performing URL encoding if necessary. Example - ?sort=%2Bcn (%2B is UTF-8 encoding for + sign)",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The \"no-cache\" option performs the search without referencing any cache. The \"delete-cache\" option deletes the cache. In this case, empty search results are returned. Example - Cache-Control=no-cache ",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Range",
                    "in": "header",
                    "description": "Specifies the range of items to return. Note: The range uses a zero-based index. Example - items=0-99 ",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_embedded": {
                                        "manager": {
                                            "_links": {
                                                "formTemplate": {
                                                    "href": "/itim/rest/forms?requestee=/itim/rest/people/ZXJnbG9iYWxpZD0zMjg3NTk3NjYzMjY3Njc5MDksb3UdT1wZW9wbGUsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t&filterId=formSearch"
                                                },
                                                "self": {
                                                    "href": "/itim/rest/people/ZXJnbG9iYWxpZD0zMjg3NTk3NjYzMjY3Njc5MDksb3U9MCxvdT1wZW9wbGUsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t",
                                                    "title": "Chuck Riegle"
                                                }
                                            },
                                            "_attributes": {
                                                "cn": "Chuck Riegle"
                                            }
                                        }
                                    },
                                    "_links": {
                                        "formTemplate": {
                                            "href": "/itim/rest/forms?requestee=/itim/rest/people/ZXJnbG9iYWxpZD0zMjg3NTk3Njg0MDU0MDg0MTYsb3U9MCxvdT1wZW9wbGUsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t&filterId=formSearch"
                                        },
                                        "self": {
                                            "href": "/itim/rest/people/ZXJnbG9iYWxpZD0zMjg3NTk3Njg0MDU0MDg0MTYsb3U9MCxvdT1wZW9wbGUsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t",
                                            "title": "Alan Smith"
                                        }
                                    },
                                    "_attributes": {
                                        "sn": "Smith",
                                        "cn": "Alan Smith"
                                    }
                                }, {
                                    "_links": {
                                        "formTemplate": {
                                            "href": "/itim/rest/forms?requestee=/itim/rest/people/ZXJnbG9iYWxpZD0zMjg3NTk3NjYzMjY3Njc5MDksb3U9MCxvdT1wZW9wbGUsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t&filterId=formSearch"
                                        },
                                        "self": {
                                            "href": "/itim/rest/people/ZXJnbG9iYWxpZD0zMjg3NTk3NjYzMjY3Njc5MDksb3U9MCxvdT1wZW9wbGUsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t",
                                            "title": "Chuck Riegle"
                                        }
                                    },
                                    "_attributes": {
                                        "sn": "Riegle",
                                        "cn": "Chuck Riegle"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/people/profiles": {
            "get": {
                "tags": ["Person Management"],
                "summary": "Person profile search",
                "description": "Returns all profile types for Person.",
                "responses": {
                    "200": {
                        "description": "OK. The request was successful.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "profiles": ["Person", "BPPerson"]
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/forms/people/{profileName}": {
            "get": {
                "tags": ["Search"],
                "summary": "Form Template Person Profile Lookup",
                "description": "Returns the form of the specified person profile",
                "parameters": [{
                    "name": "profileName",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The 'no-cache' option performs the search without referencing any cache. The 'delete-cache' option deletes the cache. In this case, empty search results are returned. Example - Cache-Control = no-cache ",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "template": {
                                        "page": {
                                            "body": {
                                                "tabbedForm": {
                                                    "tab": [{
                                                        "image": true,
                                                        "formElement": [{
                                                            "input": {
                                                                "size": "50",
                                                                "name": "data.eruid",
                                                                "type": "text"
                                                            },
                                                            "editable": true,
                                                            "name": "data.eruid",
                                                            "constraint": [{
                                                                "parameter": "true",
                                                                "type": "REQUIRED"
                                                            }, {
                                                                "type": "INVALID_CHARS"
                                                            }, {
                                                                "parameter": "true",
                                                                "type": "NO_WHITE_SPACE"
                                                            }],
                                                            "label": "User ID",
                                                            "required": "true"
                                                        }, {
                                                            "input": {
                                                                "size": "50",
                                                                "name": "data.erposixgecos",
                                                                "type": "text"
                                                            },
                                                            "editable": true,
                                                            "name": "data.erposixgecos",
                                                            "label": "Gecos (comments)"
                                                        }, {
                                                            "input": {
                                                                "size": "50",
                                                                "name": "data.erposixuid",
                                                                "type": "text"
                                                            },
                                                            "editable": true,
                                                            "name": "data.erposixuid",
                                                            "constraint": [{
                                                                "parameter": "true",
                                                                "type": "INTEGER_ONLY"
                                                            }, {
                                                                "parameter": "0",
                                                                "type": "MIN_VALUE"
                                                            }],
                                                            "label": "UID number"
                                                        }, {
                                                            "editable": true,
                                                            "checkbox": {
                                                                "name": "checkbox",
                                                                "value": "false"
                                                            },
                                                            "name": "data.erposixdupuid",
                                                            "label": "Allow duplicate UIDs?"
                                                        }, {
                                                            "isHiddenOnModify": "true",
                                                            "editable": true,
                                                            "checkbox": {
                                                                "name": "checkbox",
                                                                "value": "false"
                                                            },
                                                            "name": "data.erposixprivategroup",
                                                            "label": "Do Not Create User Private Group"
                                                        }, {
                                                            "editable": true,
                                                            "name": "data.erposixsudoprivileges",
                                                            "isReadOnlyOnModify": "true",
                                                            "label": "sudo privileges",
                                                            "editableTextList": {
                                                                "comboItem": {
                                                                    "size": true,
                                                                    "width": "300",
                                                                    "name": "data.erposixsudoprivileges",
                                                                    "label": "sudo privileges"
                                                                }
                                                            },
                                                            "direction": "inherit"
                                                        }],
                                                        "index": "0",
                                                        "title": "Account information",
                                                        "selected": "true",
                                                        "url": "javascript:switchTabs (document.forms['body'],0);"
                                                    }, {
                                                        "image": true,
                                                        "formElement": [],
                                                        "index": "1",
                                                        "title": "Access information",
                                                        "selected": "false",
                                                        "url": "javascript:switchTabs (document.forms['body'],1 );"
                                                    }, {
                                                        "image": true,
                                                        "formElement": [],
                                                        "index": "3",
                                                        "title": "Pre Exec and Post Exec Choices",
                                                        "selected": "false",
                                                        "url": "javascript:switchTabs (document.forms['body'],3 );"
                                                    }]
                                                }
                                            }
                                        }
                                    },
                                    "_links": {
                                        "resourcebundle": {
                                            "href": "/itim/rest/forms/resourcebundle"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/accounts/{accountId}": {
            "get": {
                "tags": ["Search"],
                "summary": "Account Lookup",
                "description": "Returns information about the specified account.",
                "parameters": [{
                    "name": "accountId",
                    "in": "path",
                    "description": "Unique Identifier for an account.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for the account. The specified attributes are returned in the \"_attributes\" section of the response. Specifying a value of \"*\" returns all attributes. By default, all the attributes are returned. Example - ?attributes=owner,eraccountstatus,eruid,eraccountownershiptype",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "embedded",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for reference attributes of accounts (eg. erservice). The specified attributes are returned in the \"_embedded\" section of the response. Specifying a value of '*' after reference attribute returns all the properties of the reference attribute. Example - ?embedded=erservice.erservicename.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "owner": {
                                            "href": "/itim/rest/people/ZXJnbG9iYWxpZD02ODkyNzY3NDYwMzI3MDc1MzQ5LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ"
                                        },
                                        "erservice": {
                                            "href": "/itim/rest/services/ZXJnbG9iYWxpZD02ODkyNzU3NDc4MTk3Nzk1MzA2LG91PXNlcnZpY2VzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ"
                                        },
                                        "self": {
                                            "href": "/itim/rest/accounts/ZXJnbG9iYWxpZD02ODkyNzY3NjE1NTUxODgzNjQzLG91PTAsb3U9YWNjb3VudHMsZXJnbG9MDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t",
                                            "title": "asmith"
                                        }
                                    },
                                    "_attributes": {
                                        "owner": "erglobalid=6892767460327075,ou=0,ou=people,erglobalid=00000000000000000000,ou=org,dc=com",
                                        "erservice": "erglobalid=6892757478197795,ou=services,erglobalid=00000000000000000000,ou=org,dc=com",
                                        "eruid": "asmith",
                                        "eraccountstatus": "0"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/activities/complianceDetails/{activityId}": {
            "get": {
                "tags": ["Activity Management"],
                "summary": "Compliance Issues Lookup",
                "description": "Returns compliance issues to be resolved for the specified todo activity.",
                "parameters": [{
                    "name": "activityId",
                    "in": "path",
                    "description": "Unique identifier for a activity.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_attributes": {
                                        "name": "Local Groups",
                                        "label": "Local Groups",
                                        "newValues": "Guest"
                                    }
                                }, {
                                    "_attributes": {
                                        "name": "Description",
                                        "label": "Description",
                                        "oldValues": "Distributed Users"
                                    }
                                }, {
                                    "_attributes": {
                                        "name": "Description",
                                        "label": "Description",
                                        "newValues": "Common Users"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/password/challengeresponse/user": {
            "post": {
                "tags": ["Password Management"],
                "summary": "Forgotten Password Questions Lookup",
                "description": "Returns the list of forgotten password questions configured for the user.",
                "parameters": [{
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must passthe valid CSRF token in the request header. When a new PUT, POST, orDELETE request is created, the request header must contain CSRF tokenthat is received to the authorized user. Authorized users must get thevalid CSRF token in the response header by running the 'Current System User Lookup' REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChallengeRequestUserBean"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/password/challengeresponse/user"
                                        }
                                    },
                                    "challenge": ["What is the name of your first company?", "What is your favorite color?", "How many siblings do you have?"]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. This could happen if the forgotten passwordconfiguration is not enabled or the user has not providedanswers to the forgotten password questions.\r\n",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "severity": "E",
                                    "text": "CTGIMM049E The password challenge response function is disabled. Contact the Identity Manager administrator for more information.",
                                    "id": "CTGIMM049",
                                    "key": "com.ibm.itim.webclient.home.SecretQuestionServlet.CHALLENGE_RESPONSE_DISABLED"
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/access/{accessId}/owners": {
            "get": {
                "tags": ["Access Management"],
                "summary": "Access Owners Search",
                "description": "Returns users who are owners of the specified access.",
                "parameters": [{
                    "name": "accessId",
                    "in": "path",
                    "description": "Unique identifier for an access.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for each user. Example - ?attributes=cn,sn",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "embedded",
                    "in": "query",
                    "description": "Specifies the comma separated attributes to return for a user reference attribute (eg. manager). The specified attributes are returned in the \\\"_embedded\\\" section. Example - ?embedded=manager.name,manager.telephoneNumber.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "description": "Specifies the attribute and its order (\"+\" for ascending, \"-\" for descending) for sorting the returned users. Example - ?sort=+cn",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent \"\r\n\t\t\t\t\t+ \"requests by the client that specify the same search criteria are satisfied via the cache. The 'no-cache' \"\r\n\t\t\t\t\t+ \"option performs the search without referencing any cache. The 'delete-cache' option deletes the cache. \"\r\n\t\t\t\t\t+ \"In this case, empty search results are returned. Example - Cache-Control = no-cache",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Range",
                    "in": "header",
                    "description": "Specifies the range of items to return. Note: The range uses a zero-based index. Example - items=0-99",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "formTemplate": {
                                            "href": "/itim/rest/forms?requestee=/itim/rest/people/ZXJnbG9iYWxpZD02MTk0OTcyODYzNTI3NjE4MDY3LU9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ%26filterId=formSearch"
                                        },
                                        "self": {
                                            "href": "/itim/rest/people/ZXJnbG9iYWxpZD02MTk0OTcyODYzNTI3NjE4MDY3LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                            "title": "Alan Smith"
                                        }
                                    }
                                }, {
                                    "_links": {
                                        "formTemplate": {
                                            "href": "/itim/rest/forms?requestee=/itim/rest/people/ZXJnbG9iYWxpZD02MTk0OTcyNjE5MTQ0OTg5NDk0LG91PTAcGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ%26filterId=formSearch"
                                        },
                                        "self": {
                                            "href": "/itim/rest/people/ZXJnbG9iYWxpZD02MTk0OTcyNjE5MTQ0OTg5NDk0LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                            "title": "Chuck Reigle"
                                        }
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/accesscategories/{accessCategoryID}/childaccesscategories": {
            "get": {
                "tags": ["Access Management"],
                "summary": "Child Access Categories Lookup",
                "description": "Returns all sub-categories of a specified access category.",
                "parameters": [{
                    "name": "accessCategoryID",
                    "in": "path",
                    "description": "Unique Identifier for an access category.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "The request is successfully processed.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/accesscategories/ZXJvYmplY3Rwcm9maWxlbmFtZT1BcHBsaWNhdGlvbkhpZXIxLGVyb2JqZWN0cHJvZmlsZW5hbWU9QXBwbGljYXRpb24sb3U9YWNjZXNzVHlwZSxvdT1pdGltLG91PW9yZyxkYz1jb20",
                                            "title": "Finance"
                                        }
                                    },
                                    "_attributes": {
                                        "name": "Finance"
                                    }
                                }, {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/accesscategories/ZXJvYmplY3Rwcm9maWxlbmFtZT1BcHBsaWNhdGlvbjg3NjY4Um9sZTEsZXJvYmplY3Rwcm9maWxlbmFtZT1BcHBsaWNhdGlvbixvdT1hY2Nlc3NUeXBlLG91PWl0aW0sb3U9b3JnLGRjPWNvbQ",
                                            "title": "HumanResource"
                                        }
                                    },
                                    "_attributes": {
                                        "name": "HumanResource"
                                    }
                                }, {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/accesscategories/ZXJvYmplY3Rwcm9maWxlbmFtZT1zdWJjYXRlZ29yeTEsZXJvYmplY3Rwcm9maWxlbmFtZT1BcHBsaWNhdGlvbixvdT1hY2Nlc3NUeXBlLG91PWl0aW0sb3U9b3JnLGRjPWNvbQ",
                                            "title": "Marketing"
                                        }
                                    },
                                    "_attributes": {
                                        "name": "Marketing"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/forms/resourcebundle": {
            "get": {
                "tags": ["Search"],
                "summary": "Resource Bundle Lookup",
                "description": "Returns resource bundle which contains all the labels for Identity Manager attributes.",
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/forms/resourcebundle"
                                        }
                                    },
                                    "_attributes": {
                                        "0": "Active",
                                        "erservicepassword": "Administrator password",
                                        "1": "Inactive",
                                        "street": "Street",
                                        "reconciliation.monthly": "Monthly",
                                        "eraccessoption": "Access Options",
                                        "erlastoperation": "Last Operation"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/accounts/password": {
            "put": {
                "tags": ["Password Management"],
                "summary": "Get Password Rules/Submit Change Password/Validate Change Password",
                "description": "This endpoint can be used to perform following operations:\n\n[Get Password Rules](/itim/swaggerdoc/Get_Password_Rules.html) - Retrieve password policies that tell users how to create a compliant password. \n[Submit Change Password](/itim/swaggerdoc/Submit_Change_Password.html) - Submit a password to update it. \n[Validate Change Password](/itim/swaggerdoc/Validate_Change_Password.html) - Validate whether the provided password complies with password rules. \n\nClick link to see more details for each request",
                "parameters": [{
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "X-HTTP-Method-Override",
                    "in": "header",
                    "description": "Use 'cumulate' to gather password rules. Example - X-HTTP-Method-Override = cumulate \nUse 'submit-in-batch' to set new password. Example - X-HTTP-Method-Override = submit-in-batch \nUse 'validate-error-check-only' to validate the password against rules. Example - X-HTTP-Method-Override = validate-error-check-only ",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccountUpdateBeanSwagger"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK. The request was successful"
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/organizationcontainers/{orgContainerId}": {
            "put": {
                "tags": ["Organizational Management API"],
                "summary": "Transfer Organization unit",
                "description": "Moves the organization unit from the current parent container to a new parent",
                "parameters": [{
                    "name": "orgContainerId",
                    "in": "path",
                    "description": "Unique identifier for an organization, organization unit, location, admin domain, busines partner unit.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "parentOrg",
                    "in": "query",
                    "description": "Unique identifier of the new parent container",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "schedule",
                    "in": "query",
                    "description": "The scheduled time should be specified in following format: MM/dd/yyyy HH",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "202": {
                        "description": "The requested was accepted.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "requestId": "2531483138088579374",
                                    "changeComplete": false,
                                    "status": 0
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/activities/rfiformdetails/{workitemId}": {
            "get": {
                "tags": ["Activity Management"],
                "summary": "RFI Form Details Lookup",
                "description": "Returns RFI form details to be resolved for the specified todo activity.",
                "parameters": [{
                    "name": "workitemId",
                    "in": "path",
                    "description": "Unique identifier for a activity.",
                    "required": true,
                    "schema": {
                        "format": "int64",
                        "type": "integer"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "template": {
                                        "page": {
                                            "body": {}
                                        }
                                    },
                                    "container": "/itim/rest/organizationcontainers/organizations/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t",
                                    "processName": "Person Add",
                                    "defaultAttrValues": {
                                        "uid": ["Sachin"],
                                        "employeetype": ["empType1"],
                                        "manager": ["erglobalid=7784750119600149440,ou=0,ou=people,erglobalid=00000000000000000000,ou=org,dc=com"],
                                        "givenname": ["Sachin Babar"]
                                    },
                                    "id": "CREATE_PERSON",
                                    "operation": "add"
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/authz/v1.0/entitlements/{entitlement}": {
            "post": {
                "tags": ["Entitlement Management"],
                "summary": "Grant and Revoke an Entitlement to one or multiple users",
                "description": "\r\n\r\nGrant and Revoke an Entitlement to one or multiple users \r\n\r\n Required attributes: \r\n\r\n user - Value should be Person ID \r\n",
                "parameters": [{
                    "name": "entitlement",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkGrantRevokeUserEntitlementGrantUserEntitlementRevoke"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "example": [{
                                    "code": "44e5e3f9-1e6e-4c34-83db-546ddf8cd693",
                                    "success": true,
                                    "operation": "grant"
                                }, {
                                    "code": "44e5e3f9-1e6e-4c34-83db-546ddf8cd693",
                                    "success": true,
                                    "operation": "revoke"
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/people": {
            "get": {
                "tags": ["Person Management"],
                "summary": "Person Search",
                "description": "Returns information about users that match the specified search criteria if any. \r\n\r\nThe \"name\" of the user is returned in the _links.self.title property. \r\n\r\nBy default, no attributes are returned. The client must specify the \"attributes\" query parameter to request the attributes to return in the \"_attributes\" property of each person. \r\n\r\nA requested attribute is not returned if the client does not have permission to retrieve the attribute or if the value of the attribute is null. \r\n\r\nIf an attribute has multiple values, the value of the corresponding property is an array of the attribute's values. \r\n",
                "parameters": [{
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma separated attributes that should be returned for each person. The specified attributes are returned in the \"_attributes\" section. Specifying a value of \"*\" returns all attributes. Example - ?attributes=mail,telephoneNumber",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "embedded",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for a user reference attribute (eg. manager). The specified attributes are returned in the \"_embedded\" section. Example - ?embedded=manager.name,manager.telephoneNumber",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "forms",
                    "in": "query",
                    "description": "Specifies the boolean. If true, then form are returned for the user.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items for the search to return. Example - ?limit=1000",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "description": "Specifies the attribute and order (\"+\" for ascending, \"-\" for descending) by which to sort the returned users. Note: The client is responsible for performing URL encoding if necessary. Example - ?sort=%2Bcn (%2B is UTF-8 encoding for + sign)",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "subordinateFilter",
                    "in": "query",
                    "description": "Specifies the boolean. If true, then the returned users are filtered to narrow the search to a logged in users subordinates.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The 'no-cache' option performs the search without referencing any cache. The 'delete-cache' option deletes the cache. In this case, empty search results are returned. Example - Cache-Control=no-cache ",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Range",
                    "in": "header",
                    "description": "Specifies the range of items to return. Note: The range uses a zero-based index. Example - items=0-99 ",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "self": {
                                            "href": "http://localhost:9080/itim/rest/people/ZXJnbG9iYWxpZD01Njg4NjQwOTA5NDk4NTwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                            "title": "Judith Hall"
                                        }
                                    },
                                    "_attributes": {
                                        "telephoneNumber": ["555-1111", "555-2222"],
                                        "mail": "jhall@jkenterprises.com"
                                    }
                                }, {
                                    "_links": {
                                        "self": {
                                            "href": "http://localhost:9080/itim/rest/people/ABCnbG8iDFxpTR01Ngh4NjQwOTA5NDk4NTwMDAwMDAsb3U9b3JnLGRjWQVdlZ",
                                            "title": "Chuck Riegle"
                                        }
                                    },
                                    "_attributes": {
                                        "telephoneNumber": "555-3333",
                                        "mail": "criegle@jkenterprises.com"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Person Management"],
                "summary": "Person Create",
                "description": "\r\n\r\nCreates a new person with the given attributes \r\n\r\nprofileName, orgID is required . \r\n\r\nscheduledTime is optional. The scheduled time should be specified in following format : MM/dd/yyyy HH:mm \r\n",
                "parameters": [{
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreatePersonRequestBean"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "The requested was accepted.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "requestId": "2565810057541954463",
                                    "changeComplete": false,
                                    "status": 0
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/ui/api/v1.0/user/preferences/customization": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/password/challengeresponse/{userid}": {
            "get": {
                "tags": ["Password Management"],
                "summary": "Forgotten Password Questions Lookup (Deprecated)",
                "description": "Returns the list of forgotten password questions configured for the user. \nThis API has been deprecated to restrict passing userId in a URL. For secure lookup of Forgotten Password Questions, use 'Forgotten Password Questions Lookup' API with POST method.\n",
                "parameters": [{
                    "name": "userid",
                    "in": "path",
                    "description": "Specifies the name of the user's Identity Manager System account.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/password/challengeresponse/itim%20manager"
                                        }
                                    },
                                    "challenge": ["What is the name of your first company?", "What is your favorite color?", "How many siblings do you have?"]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. This could happen if the forgotten passwordconfiguration is not enabled or the user has not providedanswers to the forgotten password questions.\r\n",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "severity": "E",
                                    "text": "CTGIMM049E The password challenge response function is disabled. Contact the Identity Manager administrator for more information.",
                                    "id": "CTGIMM049",
                                    "key": "com.ibm.itim.webclient.home.SecretQuestionServlet.CHALLENGE_RESPONSE_DISABLED"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "put": {
                "tags": ["Password Management"],
                "summary": "Submit Responses for Forgotten Password Questions",
                "description": "Submit responses for forgotten password questions to recover password.",
                "parameters": [{
                    "name": "userid",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must passthe valid CSRF token in the request header. When a new PUT, POST, orDELETE request is created, the request header must contain CSRF tokenthat is received to the authorized user. Authorized users must get thevalid CSRF token in the response header by running the 'Current System User Lookup' REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordSubmitResponseBeanSwagger"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/password/challengeresponse/criegle"
                                        }
                                    },
                                    "_attributes": {
                                        "transactionid": "283367112556274689",
                                        "status": "SUCCESS"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. This might happen if the user providedincorrect responses to forgotten password questions.\r\n",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "severity": "E",
                                    "text": "CTGIMM036E The response is incorrect. Enter correct response.",
                                    "id": "CTGIMM036",
                                    "key": "com.ibm.itim.apps.ejb.home.HomeBean.INVALID_ANSWERS"
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/identitypolicy/{identityPolicyId}": {
            "get": {
                "tags": ["Identity Policy Management"],
                "summary": "Identity Policy Lookup",
                "description": "Returns information about the specified Identity Policy.",
                "parameters": [{
                    "name": "identityPolicyId",
                    "in": "path",
                    "description": "Unique Identifier for a Identity Policy.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for the identity policy. The specified attributes are returned in the \"_attributes\" section of the response. Specifying a value of \"*\" returns all attributes. By default, all the attributes are returned. Example - ?attributes=erscope,erlabel",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/identitypolicy/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwNixvdT1wb2xpY2llcyxlcmdsb2JhbGlkPTAwMDAwMDAwMDAwMDAwMDAwMDAwLG91PW9yZyxkYz1EaXZ5YQ",
                                            "title": "Default identity policy for ITIM (Person)"
                                        },
                                        "erparent": {
                                            "href": "/itim/rest/organizationcontainers/organizations/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9RGl2eWE",
                                            "title": "Organization"
                                        }
                                    },
                                    "_attributes": {
                                        "eruserclass": "Person",
                                        "erpolicytarget": "2;*",
                                        "erpolicyitemname": "Default identity policy for ITIM (Person)"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Identity Policy Management"],
                "summary": "Identity Policy Modify",
                "description": "Modifies information for the specified Identity Policy.",
                "parameters": [{
                    "name": "identityPolicyId",
                    "in": "path",
                    "description": "Unique identifier for a Identity Policy",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModifyIdentityPolicyBeanSwagger"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "OK. The request was successful"
                    }
                }
            },
            "delete": {
                "tags": ["Identity Policy Management"],
                "summary": "Identity Policy Delete",
                "description": "Deletes the specified Identity Policy.",
                "parameters": [{
                    "name": "identityPolicyId",
                    "in": "path",
                    "description": "Unique identifier for a Identity Policy.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "204": {
                        "description": "No Content."
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/forms": {
            "get": {
                "tags": ["Search"],
                "summary": "Form Template Lookup",
                "description": "Returns the form of the specified entity.",
                "parameters": [{
                    "name": "access",
                    "in": "query",
                    "description": "Specifies the unique identifier of the access. Use this attribute with the requestee parameter to return the form of the account.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "embedded",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for reference attributes of forms. The parameter allows user to read the resource bundle details. Example - ?embedded=form.resourcebundle",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "requestee",
                    "in": "query",
                    "description": "Specifies the unique identifier of the person for whom the form must be looked up.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The 'no-cache' option performs the search without referencing any cache. The 'delete-cache' option deletes the cache. In this case, empty search results are returned. Example - Cache-Control = no-cache",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "template": {
                                        "page": {
                                            "body": {
                                                "tabbedForm": {
                                                    "tab": [{
                                                        "image": true,
                                                        "formElement": [{
                                                            "input": {
                                                                "size": "50",
                                                                "name": "data.eruid",
                                                                "type": "text"
                                                            },
                                                            "editable": true,
                                                            "name": "data.eruid",
                                                            "constraint": [{
                                                                "parameter": "true",
                                                                "type": "REQUIRED"
                                                            }, {
                                                                "type": "INVALID_CHARS"
                                                            }, {
                                                                "parameter": "true",
                                                                "type": "NO_WHITE_SPACE"
                                                            }],
                                                            "label": "User ID",
                                                            "required": "true"
                                                        }, {
                                                            "input": {
                                                                "size": "50",
                                                                "name": "data.erposixgecos",
                                                                "type": "text"
                                                            },
                                                            "editable": true,
                                                            "name": "data.erposixgecos",
                                                            "label": "Gecos (comments)"
                                                        }, {
                                                            "input": {
                                                                "size": "50",
                                                                "name": "data.erposixuid",
                                                                "type": "text"
                                                            },
                                                            "editable": true,
                                                            "name": "data.erposixuid",
                                                            "constraint": [{
                                                                "parameter": "true",
                                                                "type": "INTEGER_ONLY"
                                                            }, {
                                                                "parameter": "0",
                                                                "type": "MIN_VALUE"
                                                            }],
                                                            "label": "UID number"
                                                        }, {
                                                            "editable": true,
                                                            "checkbox": {
                                                                "name": "checkbox",
                                                                "value": "false"
                                                            },
                                                            "name": "data.erposixdupuid",
                                                            "label": "Allow duplicate UIDs?"
                                                        }, {
                                                            "isHiddenOnModify": "true",
                                                            "editable": true,
                                                            "checkbox": {
                                                                "name": "checkbox",
                                                                "value": "false"
                                                            },
                                                            "name": "data.erposixprivategroup",
                                                            "label": "Do Not Create User Private Group"
                                                        }, {
                                                            "editable": true,
                                                            "name": "data.erposixsudoprivileges",
                                                            "isReadOnlyOnModify": "true",
                                                            "label": "sudo privileges",
                                                            "editableTextList": {
                                                                "comboItem": {
                                                                    "size": true,
                                                                    "width": "300",
                                                                    "name": "data.erposixsudoprivileges",
                                                                    "label": "sudo privileges"
                                                                }
                                                            },
                                                            "direction": "inherit"
                                                        }],
                                                        "index": "0",
                                                        "title": "Account information",
                                                        "selected": "true",
                                                        "url": "javascript:switchTabs (document.forms['body'],0);"
                                                    }, {
                                                        "image": true,
                                                        "formElement": [],
                                                        "index": "1",
                                                        "title": "Access information",
                                                        "selected": "false",
                                                        "url": "javascript:switchTabs (document.forms['body'],1 );"
                                                    }, {
                                                        "image": true,
                                                        "formElement": [],
                                                        "index": "3",
                                                        "title": "Pre Exec and Post Exec Choices",
                                                        "selected": "false",
                                                        "url": "javascript:switchTabs (document.forms['body'],3 );"
                                                    }]
                                                }
                                            }
                                        }
                                    },
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/forms?access=/itim/rest/access/6892757478197795306&filterId=formSearch"
                                        },
                                        "resourcebundle": {
                                            "href": "/itim/rest/forms/resourcebundle"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Search"],
                "summary": "Label Lookup",
                "description": "Returns label information about an attribute. For example - label of attribute \"cn\" is \"Full Name\".",
                "parameters": [{
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "description": "Default value : cn,sn,mail",
                    "content": {
                        "*/*": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": ["Full name", "Last name", "E-mail address"]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/lifecyclerule": {
            "get": {
                "tags": ["Search"],
                "summary": "Search All LifecycleRules",
                "description": "Returns information about the lifecycle Rule that match the specified search criteria.",
                "parameters": [{
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for the LifecycleRule. The specified attributes are returned in the \"_attributes\" section of the response. Specifying a value of \"*\" returns all attributes.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "ruleType",
                    "in": "query",
                    "description": "Specifies the rule type to be searched.",
                    "required": true,
                    "schema": {
                        "enum": ["PROFILE_TYPE", "CATEGORY_TYPE", "RECERT_POLICY_TYPE"],
                        "type": "string"
                    }
                }, {
                    "name": "typeInfo",
                    "in": "query",
                    "description": " String representing the type info to be searched. The values that can be specified for typeInfo depends on ruleType and is summarized below.To search rules at Global or other entity type level specify ruleType=CATEGORY_TYPE and typeInfo = Global, Account, Person or BPPerson. To search rules for a specific entity specify ruleType=PROFILE_TYPE and typeInfo = the profile name of the entity, like ADProfile, ITIMAccount, Person etc. To search rules for a specific recertification policy, specify ruleType=RECERT_POLICY_TYPE and typeInfo = the DN of the recertification policy.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/lifecyclerule/OTA4ODM0OTc2NDIwODE5ODI4MHxDQVRFR09SWV9UWVBFfEFjY291bnQ",
                                            "title": "Delete Person LCR"
                                        }
                                    },
                                    "_attributes": {
                                        "filter": "",
                                        "name": "Delete Person LCR",
                                        "description": "Lifecycle Rule to delete terminated person",
                                        "ruleid": 9088349764208198280,
                                        "operation": "delete"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["LifecycleRule Management"],
                "summary": "Add LifecylceRule",
                "description": "Create a new LifecylceRule with the given attributes. Following is the description of attributes that are supported. \r\n\r\nruleType : Mandatory Parameter in request body. Specifies the rule type. Allowed values for different rule types are PROFILE_TYPE, CATEGORY_TYPE and RECERT_POLICY_TYPE. \r\n\r\ntypeInfo : Mandatory Parameter in request body. String representing the type info for different rule types. The values that can be specified for typeInfo depends on ruleType and is summarized below. \r\n\r\nTo add a rule at Global or other entity type level specify ruleType=CATEGORY_TYPE and typeInfo = Global, Account, Person or BPPerson \r\n\r\nTo add a rule for a specific entity specify ruleType=PROFILE_TYPE and typeInfo = the profile name of the entity, like ADProfile, ITIMAccount, Person etc. \r\n\r\n_attributes : JSON representation of the lifecycle attributes to be set. Following attributes can be specified. \r\n\r\nname : It is a mandatory attribute and specifies the name of the lifecycle rule to be created. \r\n\r\ndescription : It is an optional attribute that can be used to set the description of the lifecycle Rule. \r\n\r\nOperationName : It is mandatory attribute that specifies the name of the operation to be invoked by the lifecycle Rule. \r\n\r\nFilter : It is an optional attribute and can be used to set the lifecycle rule filter. Filter is not set for typeInfo (Global). \r\n\r\nschedules : JSON representation of array of lifecycle schedules to be set. It is an optional attribute. In each schedule you can specify hour, minute, month, day of the week, days of the week, day of the month, quarterly, and semi-annually. Each attribute of the schedule JSON is explained below. \r\n\r\nhour: hour of the schedule. Allowed values are 0-23. To specify hourly schedule set hour = -1. \r\n\r\nminute : minute of the schedule. Allowed values are 0-59. \r\n\r\ndayOfMonth : day of month of the schedule (-1 if every day). This attribute is exclusive with dayOfWeek. To set the dayOfMonth value other than -1(daily), the month value must be set either to specific month or -1(monthly). Allowed values are 1-28, if the schedule is set to monthly, otherwise the allowed value varies according to the month value. \r\n\r\nmonth : month of the schedule (-1 if every month). Allowed values are 1-12 (1 = January, 2 = February, ...). \r\n\r\ndayOfWeek : day of week of the schedule (-1 if every day). This attribute is deprecated for weekly schedule. This attribute is exclusive with dayOfMonth. Allowed values are 1-7 (1 = Sunday, 2 = Monday,...) \r\n\r\ndaysOfWeek : days of week of the weekly schedule. Allowed values are 1-7 (1 = Sunday, 2 = Monday,...) and multiple values are specified in pipe-separated format (1|2 = Sunday and Monday). Value should be the valid String or the null. \r\n\r\ndayOfQuarter : (0 to disable quarterly schedule, otherwise 1-90). dayOfQuarter is exclusive with dayOfMonth, dayOfWeek and dayOfSemiAnnual. Therefore if dayOfQuarter is set then value of dayOfMonth and dayOfWeek is ignored. \r\n\r\ndayOfSemiAnnual : (0 to disable semi-annual schedule, otherwise 1-180). dayOfSemiAnnual is exclusive with dayOfMonth, dayOfWeek and dayOfQuarter. \r\n",
                "parameters": [{
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateLifecycleRuleRequestBeanSwagger"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/lifecyclerule/MTI3NzcwMDUxODgxOTE5ODYwNnxDQVRFR09SWV9UWVBFfEFjY291bnQ",
                                            "title": "Suspend Dormant Account LCR"
                                        }
                                    },
                                    "_attributes": {
                                        "Filter": "(cn=*)",
                                        "schedules": {
                                            "dayOfWeek": 0,
                                            "hour": 12,
                                            "month": 0,
                                            "dayOfMonth": -1,
                                            "minute": 0
                                        },
                                        "name": "Suspend Dormant Account LCR",
                                        "description": "LCR to suspend dormant accounts",
                                        "ruleid": 1277700518819198606,
                                        "operation": "suspend"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "severity": "E",
                                    "text": "CTGIMZ052E HTTP POST request data has a missing data for required field \"name\".",
                                    "id": "CTGIMZ052",
                                    "inserts": ["name"],
                                    "key": "com.ibm.isim.rest.data.MISSING_DATA_FOR"
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/organizationcontainers": {
            "get": {
                "tags": ["Search"],
                "summary": "Search All Organization Containers",
                "description": "Returns list of all the organization containers.",
                "parameters": [{
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for each organizational container. By default, no attributes are returned. The client must specify the \"attributes\" query parameter to request the attributes to be returned in the \"_attributes\" property of each organizational container. A requested attribute is returned if the client does not have permission to retrieve the attribute or if the value of the attribute is null. Specifying a value of \"*\" will return all of the attributes. Example. ?attributes=l",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The 'no-cache' option performs the search without referencing any cache. The 'delete-cache' option deletes the cache. In this case, empty search results are returned. Example - Cache-Control = no-cache ",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/organizationcontainers/locations/ZXJnbG9iYWxpZD02MjE5NjY4NDkyODAyNzA0OTU2LG91PW9yZ0NoYXJ0LGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                            "title": "Raleigh"
                                        },
                                        "erparent": {
                                            "href": "/itim/rest/organizationcontainers/organizations/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t"
                                        }
                                    },
                                    "_attributes": {
                                        "l": "Raleigh",
                                        "erparent": "erglobalid=00000000000000000000,ou=org,dc=com"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/activities/userrecertdetails/{workitemId}": {
            "get": {
                "tags": ["Activity Management"],
                "summary": "User Re-certification Details Lookup",
                "description": "Returns User re-certification details for the specified todo activity.",
                "parameters": [{
                    "name": "workitemId",
                    "in": "path",
                    "description": "Unique identifier for a work item.",
                    "required": true,
                    "schema": {
                        "format": "int64",
                        "type": "integer"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "accountsToCertify": [{
                                        "ownershipType": "Individual",
                                        "decision": true,
                                        "name": "vm on linux service",
                                        "description": "",
                                        "dependentRecertificationTodoTargets": [{
                                            "ownershipType": "",
                                            "decision": true,
                                            "name": "apache access",
                                            "description": "Apache access to xyz application",
                                            "dependentRecertificationTodoTargets": [],
                                            "dn": "erposixgroupname=apache,erglobalid=942064772966405183,ou=services,erglobalid=00000000000000000000,ou=org,dc=com"
                                        }],
                                        "dn": "erglobalid=2400238261244324504,ou=0,ou=accounts,erglobalid=00000000000000000000,ou=org,dc=com"
                                    }, {
                                        "ownershipType": "Individual",
                                        "decision": true,
                                        "name": "vm on aix service",
                                        "description": "",
                                        "dependentRecertificationTodoTargets": [],
                                        "dn": "erglobalid=5949047696333471469,ou=0,ou=accounts,erglobalid=00000000000000000000,ou=org,dc=com"
                                    }],
                                    "comment": "",
                                    "justification": "",
                                    "rolesToCertify": [{
                                        "ownershipType": "",
                                        "decision": true,
                                        "name": "Developers",
                                        "description": "Developers in Costa Mesa location",
                                        "dependentRecertificationTodoTargets": [],
                                        "dn": "erglobalid=2402438404547081094,ou=roles,erglobalid=00000000000000000000,ou=org,dc=com"
                                    }, {
                                        "ownershipType": "",
                                        "decision": true,
                                        "name": "Managers",
                                        "description": "Managers in Costa Mesa location",
                                        "dependentRecertificationTodoTargets": [],
                                        "dn": "erglobalid=2402438404547081111,ou=roles,erglobalid=00000000000000000000,ou=org,dc=com"
                                    }]
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/people/selfregister": {
            "post": {
                "tags": ["Person Management"],
                "summary": "Person Self Register",
                "description": "Creates a person in the provisioning platform without accessing the system with an Identity Manager account login and password. \r\n\r\nprofileName, orgID is required.\r\n",
                "parameters": [{
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SelfRegisterPersonRequestBean"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "Accepted."
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/requests": {
            "get": {
                "tags": ["Search"],
                "summary": "Requests Search",
                "description": "Returns information about requests matching the specified search criteria, if any. \r\nBy default, all information is returned for each entry in the array, which makes each search entry identical to a Request Lookup API. \r\nA request is not returned if the client does not have permission to access it. \r\n",
                "parameters": [{
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items that the search returns. Example - ?limit=1000",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "description": "Specifies the order (\"+\" for ascending, \"-\" for descending) for sorting the returned requests. Note: The client is responsible for performing URL encoding if necessary. The valid attributes used in the sort are - requestee, status, date. By default, the entries are sorted by date in descending order. Example - ?sort=%2Brequestee (%2B is UTF-8 encoding for + sign)",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The \"no-cache\" option performs the search without referencing any cache. The \"delete-cache\" option deletes the cache. In this case, empty search results are returned. Example - Cache-Control=no-cache ",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Range",
                    "in": "header",
                    "description": "Specifies the range of items to return. Note: The range uses a zero-based index. Example - items=0-99 ",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful\r\n\r\n[Please click here to view more details of the status code description ](/itim/swaggerdoc/Status_Info.html)",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "requester": {
                                            "href": "/itim/rest/people/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwNyxvdT0wLG91PXBlb3BsZSxlcmdsb2JhbGlkPTAwMDAwMDAwMDAwMDAwMDAwMDAwLG91PW9yZyxkYz1jb20",
                                            "title": "System Administrator"
                                        },
                                        "self": {
                                            "href": "/itim/rest/requests/2186821305970425066"
                                        }
                                    },
                                    "obligations": [{
                                        "form": {
                                            "page": {
                                                "body": {
                                                    "form": {
                                                        "formElement": [{
                                                            "input": {
                                                                "size": "50",
                                                                "name": "data.eruid",
                                                                "type": "text"
                                                            },
                                                            "editable": true,
                                                            "name": "data.eruid",
                                                            "constraint": {
                                                                "parameter": "true",
                                                                "type": "REQUIRED"
                                                            },
                                                            "label": "User ID",
                                                            "required": "true",
                                                            "direction": "inherit"
                                                        }, {
                                                            "input": {
                                                                "size": "50",
                                                                "name": "data.cn",
                                                                "type": "text"
                                                            },
                                                            "editable": true,
                                                            "name": "data.cn",
                                                            "constraint": {
                                                                "parameter": "true",
                                                                "type": "REQUIRED"
                                                            },
                                                            "label": "Full name",
                                                            "required": "true",
                                                            "direction": "inherit"
                                                        }, {
                                                            "input": {
                                                                "size": "50",
                                                                "name": "data.sn",
                                                                "type": "text"
                                                            },
                                                            "editable": true,
                                                            "name": "data.sn",
                                                            "constraint": {
                                                                "parameter": "true",
                                                                "type": "REQUIRED"
                                                            },
                                                            "label": "Last name",
                                                            "required": "true",
                                                            "direction": "inherit"
                                                        }, {
                                                            "editable": true,
                                                            "name": "data.description",
                                                            "loginHours": {
                                                                "orientation": "landscape",
                                                                "interval": "onehour"
                                                            },
                                                            "label": "Authorized hours",
                                                            "direction": "inherit"
                                                        }],
                                                        "action": "formvalidator0"
                                                    }
                                                }
                                            }
                                        },
                                        "action": "CREATE_ACCOUNT",
                                        "id": "obligation1",
                                        "_attributes": {
                                            "employeenumber": "Z456123",
                                            "mail": "criegle@jke.test",
                                            "telephonenumber": "1-512-456-3451",
                                            "givenname": "Chuck",
                                            "initials": "",
                                            "eruid": "criegle",
                                            "cn": "Chuck Riegle",
                                            "sn": "Riegle",
                                            "title": "Senior Manager Accounting",
                                            "erldappwdreset": "true"
                                        }
                                    }],
                                    "requests": [{
                                        "_links": {
                                            "requestee": {
                                                "href": "/itim/rest/people/ZXJnbG9iYWxpZD0zNzY0OTc5NjgzODMzODA1NTEsb3U9MCxvdT1wZW9wbGUsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t",
                                                "title": "Chuck Riegle"
                                            },
                                            "workitem": {
                                                "href": "/itim/rest/workitems/2958404487582489586"
                                            }
                                        },
                                        "subject": {
                                            "_links": {
                                                "icon": {
                                                    "href": "custom/ui/images/access/iconApplications~SupportApplicationsAccess.gif"
                                                },
                                                "self": {
                                                    "href": "/itim/rest/access/376511317273827596"
                                                }
                                            },
                                            "_attributes": {
                                                "accessName": "Business Partner Connect",
                                                "description": "Allows business partners to access project manuals and support documentation.",
                                                "serviceName": "Application Server"
                                            }
                                        },
                                        "obligations": [{
                                            "$ref": "obligation1"
                                        }],
                                        "_attributes": {
                                            "action": {
                                                "text": "New access request",
                                                "key": "AccessRequestAuditDataAccess.Action.ADD"
                                            },
                                            "status": {
                                                "text": "Pending",
                                                "key": "AccessRequestAuditDataAccess.Status.PENDING"
                                            }
                                        }
                                    }, {
                                        "_links": {
                                            "requestee": {
                                                "href": "/itim/rest/people/ZXJnbG9iYWxpZD0zNzY0OTc5NjgzODMzODA1NTEsb3U9MCxvdT1wZW9wbGUsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t",
                                                "title": "Chuck Riegle"
                                            },
                                            "workitem": {
                                                "href": "/itim/rest/workitems/2958404487582489586"
                                            }
                                        },
                                        "subject": {
                                            "_links": {
                                                "icon": {
                                                    "href": "custom/ui/images/access/iconFilesharesAccess.gif"
                                                },
                                                "self": {
                                                    "href": "/itim/rest/access/376511866909527916"
                                                }
                                            },
                                            "_attributes": {
                                                "accessName": "North Region File Share",
                                                "description": "File share containing region project files including confidential data.",
                                                "serviceName": "GSA"
                                            }
                                        },
                                        "obligations": [],
                                        "_attributes": {
                                            "action": {
                                                "text": "New access request",
                                                "key": "AccessRequestAuditDataAccess.Action.ADD"
                                            },
                                            "status": {
                                                "text": "Pending",
                                                "key": "AccessRequestAuditDataAccess.Status.PENDING"
                                            }
                                        }
                                    }],
                                    "_attributes": {
                                        "action": {
                                            "text": "Manage Access",
                                            "key": "RequestAuditData.Action.ACCESS_BATCH_REQUEST"
                                        },
                                        "justification": "User Need access",
                                        "id": "2186821305970425066",
                                        "submittedDate": 1430733268995,
                                        "status": {
                                            "text": "Pending",
                                            "key": "RequestAuditData.Status.PENDING"
                                        }
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/services/{serviceId}/statusdetails": {
            "get": {
                "tags": ["Service Management"],
                "summary": "Lookup Service Status",
                "description": "Returns information about the status of the service. Service status can be : \r\n\r\nALIVE - Last attempt to contact the service was successful. \r\n\r\nFAILED - Last attemp to contact the service failed. \r\n\r\nLOCKED_RECON_IN_PROGRESS - System is currently reconciling the service. \r\n\r\nATTEMPTING_RECOVERY - System is trying to recover the service. \r\n\r\nUNKNOWN - Status is unknown. \r\n",
                "parameters": [{
                    "name": "serviceId",
                    "in": "path",
                    "description": "Unique Identifier for a service.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_attributes": {
                                        "status": "ALIVE"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/systemusers/{systemUserId}/delegations/{delegateId}": {
            "put": {
                "tags": ["Delegation Management"],
                "summary": "Delegation Modify",
                "description": "Modifies the delegations for the specified user.",
                "parameters": [{
                    "name": "delegateId",
                    "in": "path",
                    "description": "Unique identifier for a delegation.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "systemUserId",
                    "in": "path",
                    "description": "Unique identifier for a system user.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DelegateRequestBean"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Delegation Management"],
                "summary": "Delegation Delete",
                "description": "Deletes the delegation for the specified user.",
                "parameters": [{
                    "name": "delegateId",
                    "in": "path",
                    "description": "Unique identifier for a delegation.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "systemUserId",
                    "in": "path",
                    "description": "Unique identifier for a system user.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful."
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/entities/attributeslist": {
            "get": {
                "tags": ["Search"],
                "summary": "Attribute Names Lookup",
                "description": "Returns the list of attributes configured for an objectclass . This API is used in conjunction with form template REST API. ISIM forms contains widgets in which the object class is configured by System Administrator. \r\nThis object class is returned by \"form tempalate\" REST API in an encrypted format. The API decrypts this object class and returns the list of attributes.\r\n",
                "parameters": [{
                    "name": "com.ibm.isim.rest.accesstoken",
                    "in": "header",
                    "description": "This mandatory header parameter contains the encrypted object class whose attributes are to be listed. This token will be generated by the \"form template\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful.",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "attributeLabel": "Administrative assistant",
                                    "_attributes": {
                                        "name": "secretary",
                                        "label": "Administrative assistant"
                                    }
                                }, {
                                    "attributeLabel": "Business category",
                                    "_attributes": {
                                        "name": "businesscategory",
                                        "label": "Business category"
                                    }
                                }, {
                                    "attributeLabel": "E-mail address",
                                    "_attributes": {
                                        "name": "mail",
                                        "label": "E-mail address"
                                    }
                                }, {
                                    "attributeLabel": "Employee number",
                                    "_attributes": {
                                        "name": "employeenumber",
                                        "label": "Employee number"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/systemusers": {
            "get": {
                "tags": ["System User Management"],
                "summary": "System User Search",
                "description": "Returns information about any system user that matches the specified search criteria. \r\n\nThe \"name\" of the system user is returned in the _links.self.title property. \r\n\nBy default, no attributes are returned. The client must specify the \"attributes\" query parameter to request the attributes that are returned in the \"_attributes\" property of each system user. \r\n\nA requested attribute is not returned if the client does not have permission to retrieve the attribute or if the value of the attribute is null. \r\n\nIf an attribute has multiple values, the value of the corresponding property is an array of the attribute's values. \r\n",
                "parameters": [{
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return each system user. The specified attributes are returned in the \"_attributes\" section of the response. If the excludeAttributeFromResponse property in the rest.properties is set to some attribute value, that attribute is excluded from the response though it is specified in the attribute list. Specifying a value \"*\" returns all of attributes except those that are specified in the excludeAttributeFromResponse property. By default, all attributes other than those that are specified in the excludeAttributeFromResponse property are returned. Example - ?attributes=eruid",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items that the search operation returns. Example - ?limit=1000",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "description": "Specifies the attribute and order for sorting the returned system users. \"+\" represents ascending order while \"-\" represents descending order. Note: The client is responsible to perform URL encoding if necessary. Example - ?sort=%2Beruid (%2B is UTF-8 encoding for + sign)",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The \"no-cache\" option performs the search without referencing any cache. The \"delete-cache\" option deletes the cache. In this case, empty search results are returned. Example - Cache-Control=no-cache ",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Range",
                    "in": "header",
                    "description": "Specifies the range of items to return. Note: The range uses a zero-based index. Example - items=0-99",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9SVRJTSBNYW5hZ2VyLG91PXN5c3RlbVVzZXIsb3U9aXRpbSxvdT1vcmcsZGM9Y29t",
                                            "title": "ITIM Manager"
                                        },
                                        "delegates": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9SVRJTSBNYW5hZ2VyLG91PXN5c3RlbVVzZXIsb3U9aXRpbSxvdT1vcmcsZGM9Y29t/delegations"
                                        },
                                        "constraints": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9SVRJTSBNYW5hZ2VyLG91PXN5c3RlbVVzZXIsb3U9aXRpbSxvdT1vcmcsZGM9Y29t/constraints",
                                            "title": "Constraints"
                                        }
                                    },
                                    "_attributes": {
                                        "eruid": "ITIM Manager"
                                    }
                                }, {
                                    "_links": {
                                        "expiredPassword": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9a3VtYXIsb3U9c3lzdGVtVXNlcixvdT1pdGltLG91PW9yZyxkYz1jb20/password",
                                            "title": "Expired Password"
                                        },
                                        "self": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9a3VtYXIsb3U9c3lzdGVtVXNlcixvdT1pdGltLG91PW9yZyxkYz1jb20",
                                            "title": "chuck"
                                        },
                                        "delegates": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9a3VtYXIsb3U9c3lzdGVtVXNlcixvdT1pdGltLG91PW9yZyxkYz1jb20/delegations"
                                        },
                                        "constraints": {
                                            "href": "/itim/rest/systemusers/ZXJ1aWQ9a3VtYXIsb3U9c3lzdGVtVXNlcixvdT1pdGltLG91PW9yZyxkYz1jb20/constraints",
                                            "title": "Constraints"
                                        }
                                    },
                                    "_attributes": {
                                        "eruid": "chuck"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/services/{serviceId}": {
            "get": {
                "tags": ["Service Management"],
                "summary": "Lookup Service",
                "description": "Returns information about the specified service.",
                "parameters": [{
                    "name": "serviceId",
                    "in": "path",
                    "description": "Unique Identifier for a service.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for the service. The specified attributes are returned in the \"_attributes\" section of the response. Specifying a value of \"*\" will return all of the attributes. By default all the attributes are returned. Example - ?attributes=erservicename,description",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "embedded",
                    "in": "query",
                    "description": "Specifies the comma separated attributes that should be returned for a reference attribute of service (eg. owner). The specified attributes are returned in the \"_embedded\" section of the response. Specifying a value of '*' after reference attribute returns all the properties of the reference attribute. Example - ?embedded=owner.cn",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": {
                                    "_links": {
                                        "statusDetails": {
                                            "href": "/itim/rest/services/ZXJnbG9iYWxpZD02ODkyNzU3OTU5MDMzNjk0MjkyLG91PXNlcnZpY2VzLG/statusdetails",
                                            "title": "statusDetails"
                                        },
                                        "self": {
                                            "href": "/itim/rest/services/ZXJnbG9iYWxpZD02ODkyNzU3OTU5MDMzNjk0MjkyLG91PXNlcnZpY2VzLG",
                                            "title": "GSA"
                                        }
                                    },
                                    "_embedded": {
                                        "owner": {
                                            "_links": {
                                                "formTemplate": {
                                                    "href": "/itim/rest/forms?requestee=/itim/rest/people/ZXJnbG9iYWxpZD02ODkyNzY4MDY5NTM2ODU0NTQ2LG91PTAU9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwwMDAwMDAsb3U9b3JnLGRjPWNvbQ&filterId=formSearch"
                                                },
                                                "self": {
                                                    "href": "/itim/rest/people/ZXJnbG9iYWxpZD02ODkyNzY4MDY5NTM2ODU0NTQ2LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                                    "title": "Judith Hill"
                                                }
                                            },
                                            "_attributes": {
                                                "cn": "Judith Hill"
                                            }
                                        }
                                    },
                                    "_attributes": {
                                        "erservicename": "GSA"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Service Management"],
                "summary": "Service Modify",
                "description": "Modifies information for the specified service.\r\n\r\nBy using this rest API you can perform following different operations along with modification\r\nof the service information.\r\n1) Switch the connection mode of the existing service from Automatic to Manual and vice versa.\r\n2) Modify information for the manual work order details.\r\n3) If you trying to switch the existing service from Automatic to Manual and do not provide the\r\ndetails for the manualWorkOrderRequest then request adds the default data for manual work order.\r\n",
                "parameters": [{
                    "name": "serviceId",
                    "in": "path",
                    "description": "Unique identifier for a service.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModifyServiceRequestBeanSwagger"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK. The request was successful."
                    }
                }
            },
            "delete": {
                "tags": ["Service Management"],
                "summary": "Service Delete",
                "description": "Deletes the specified service.",
                "parameters": [{
                    "name": "serviceId",
                    "in": "path",
                    "description": "Unique identifier for a service.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must pass the valid CSRF token in the request header. When a new PUT, POST, or DELETE request is created, the request header must contain CSRF token that is received to the authorized user. Authorized users must get the valid CSRF token in the response header by running the \"Current System User Lookup\" REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful."
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/systemroles": {
            "get": {
                "tags": ["Search"],
                "summary": "System Role (ITIM Group) Search",
                "description": "Returns information about any system roles that match the specified search criteria. \r\nThe \"name\" of the system role is returned in the _links.self.title property. \r\nBy default, no attributes are returned. The client must specify the \"attributes\" query parameter to request the attributes to return in the \"_attributes\" property of each system role. \r\nA requested attribute is not returned if the client does not have permission to retrieve the attribute or if the value of the attribute is null. \r\nIf an attribute has multiple values, the value of the corresponding property is an array of the attribute's values.\r\n",
                "parameters": [{
                    "name": "attributes",
                    "in": "query",
                    "description": "Specifies the comma-separated attributes to return for each system role. The specified attributes are returned in the \"_attributes\" property of each system role. Specifying a value of \"*\" returns all attributes. Example - ?attributes=errolename",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items that should be returned by the search. Example - ?limit=1000",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "description": "Specifies the attribute and order (\"+\" for ascending, \"-\" for descending) for sorting the returned system roles. Note: The client is responsible for performing URL encoding if necessary. Example - ?sort=%2Berrolename (%2B is UTF-8 encoding for + sign)",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Cache-Control",
                    "in": "header",
                    "description": "Specifies caching options. By default, search results are cached for each client so that subsequent requests by the client that specify the same search criteria are satisfied via the cache. The \"no-cache\" option performs the search without referencing cache. The \"delete-cache\" option deletes the cache. In this case, empty search results are returned. Example - Cache-Control = no-cache ",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "Range",
                    "in": "header",
                    "description": "Specifies the range of items to return. Note: The range uses a zero-based index. Example - items=0-99",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/systemroles/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAzNCxvdT1zeXNSb2xlcyxlcmdsb2JhbGlkPTAwMDAwMDAwMDAwMDAwMDAwMDAwLG91PW9yZyxkYz1jb20",
                                            "title": "Help Desk Assistant"
                                        }
                                    },
                                    "_attributes": {
                                        "errolename": "Help Desk Assistant"
                                    }
                                }, {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/systemroles/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDA0OCxvdT1zeXNSb2xlcyxlcmdsb2JhbGlkPTAwMDAwMDAwMDAwMDAwMDAwMDAwLG91PW9yZyxkYz1jb20",
                                            "title": "Manager"
                                        }
                                    },
                                    "_attributes": {
                                        "errolename": "Manager"
                                    }
                                }, {
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/systemroles/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMyxvdT1zeXNSb2xlcyxlcmdsb2JhbGlkPTAwMDAwMDAwMDAwMDAwMDAwMDAwLG91PW9yZyxkYz1jb20",
                                            "title": "System Administrator"
                                        }
                                    },
                                    "_attributes": {
                                        "errolename": "System Administrator"
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/password/retrieve": {
            "put": {
                "tags": ["Password Management"],
                "summary": "Retrieve Password",
                "description": "Retrieves the password of an account if the enrole.workflow.notifypasswordproperty is set to false. This API needs the transaction ID to retrieve password.To return the account password to the user, the shared secret has been validated.",
                "parameters": [{
                    "name": "transactionid",
                    "in": "query",
                    "description": "Specifies the transaction ID that is required to retrieve the password retrieval info.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "CSRFToken",
                    "in": "header",
                    "description": "To prevent cross-site request forgery (CSRF) attacks, a user must passthe valid CSRF token in the request header. When a new PUT, POST, orDELETE request is created, the request header must contain CSRF tokenthat is received to the authorized user. Authorized users must get thevalid CSRF token in the response header by running the 'Current System User Lookup' REST API.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RetrievePasswordSwagger"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK. The request was successful",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_embedded": {
                                        "accounts": [{
                                            "_embedded": {
                                                "service": {
                                                    "_attributes": {
                                                        "description": "",
                                                        "erservicename": "ITIM Service"
                                                    }
                                                }
                                            },
                                            "_links": {
                                                "self": {
                                                    "href": "/itim/rest/accounts/ZXJ1aWQ9YXNtaXRoLG91PXN5c3RlbVVzZXIsb3U9aXRpbSxvdT1vcmcsZGM9Y29t"
                                                }
                                            },
                                            "_attributes": {
                                                "erUid": "person1"
                                            }
                                        }]
                                    },
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/password/retrieve?transactionid=7347766403446710787"
                                        }
                                    },
                                    "_attributes": {
                                        "password": "password"
                                    }
                                }]
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request. Invalid Transaction ID",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "severity": "E",
                                    "text": "CTGIMZ058E The transaction identifier that is referred in the URI is invalid or expired.",
                                    "id": "CTGIMZ058",
                                    "key": "com.ibm.isim.rest.server.INVALID_TRANSACTION_ID"
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/requests/quicksearches": {
            "get": {
                "tags": ["Search"],
                "summary": "Request Quick Searches",
                "description": "Quick search categories help you to narrow the scope of your search so that you can locate the request that you want to view.\r\nReturns limited results based on search query.",
                "parameters": [{
                    "name": "limit",
                    "in": "query",
                    "description": "Specifies the maximum number of items per category to return. If unspecified, the limit is system defined. A value of 0 means unlimited, which is constrained by a system limit. Example - ?limit=5",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "OK. The request was successful \r\n\r\n[Please click here to view more details of the status code description ](/itim/swaggerdoc/Status_Info.html)",
                        "content": {
                            "application/vnd.ibm.isim-v1+json": {
                                "example": [{
                                    "_links": {
                                        "self": {
                                            "href": "/itim/rest/requests/quicksearches?limit=5"
                                        }
                                    },
                                    "_attributes": {
                                        "requestees": [{
                                            "_links": {
                                                "self": {
                                                    "href": "/itim/rest/people/ZXJnbG9iYWxpZD0zNzY0OTc5NjgzODMzODA1NTEsb3U9MCxvdT1wZW9wbGUsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t",
                                                    "title": "Chuck Riegle"
                                                }
                                            }
                                        }],
                                        "statuses": [{
                                            "text": "Pending",
                                            "value": "PENDING",
                                            "key": "RequestAuditData.Status.PENDING"
                                        }],
                                        "accesses": [{
                                            "_links": {
                                                "self": {
                                                    "href": "/itim/rest/access/376511317273827596",
                                                    "title": "Business Partner Connect"
                                                }
                                            }
                                        }, {
                                            "_links": {
                                                "self": {
                                                    "href": "/itim/rest/access/376511866909527916",
                                                    "title": "North Region File Share"
                                                }
                                            }
                                        }],
                                        "actions": [{
                                            "text": "Manage Access",
                                            "value": "ACCESS_BATCH_REQUEST",
                                            "key": "RequestAuditData.Action.ACCESS_BATCH_REQUEST"
                                        }]
                                    }
                                }]
                            }
                        }
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/v2.0/Me": {
            "get": {
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "servers": [{
                "url": "/itim/rest"
            }, {
                "url": "/itim/rest/v1.2"
            }]
        },
        "/itim/arc/v2.0/activities": {
            "post": {
                "tags": ["Business Activity APIs"],
                "summary": "Creates Activity or Bulk Delete Activities",
                "parameters": [{
                    "name": "X-HTTP-Method-Override",
                    "in": "header",
                    "description": "Override http method for Bulk Delete operation eg: X-HTTP-Method-Override=DELETE",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Activity11"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/activityfolders/{id}": {
            "get": {
                "tags": ["Activity Folder APIs"],
                "summary": "Get the details of Activity Folder",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Activity Folder APIs"],
                "summary": "Deletes the Activity Folder",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "removeChildren",
                    "in": "query",
                    "schema": {
                        "default": "false",
                        "type": "boolean"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "204": {
                        "description": "Deleted",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Activity Folder APIs"],
                "summary": "Updates the Activity Folder details",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Activity8"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/permissiongroup/bulk/upload": {
            "post": {
                "tags": ["Permission Group Bulk APIs"],
                "summary": "Creates Permission Groups using File Bulk Upload or by Json Request body",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerPermissionGroup"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerPermissionGroup"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Permission Group Bulk APIs"],
                "summary": "Deletes the Permission Groups using File Bulk Upload or by Json Request body",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/activitygroup/risk/bulk/upload": {
            "post": {
                "tags": ["Business Activity Group Bulk APIs"],
                "summary": "Association of Activity Groups with Risk using File Bulk Upload or by Json Request body",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerActivityGroupToEntity"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerActivityGroupToEntity"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/users/{userId}/risks/{riskId}/mitigations": {
            "post": {
                "tags": ["ARC User APIs"],
                "summary": "Apply mitigation to the risk of a user",
                "parameters": [{
                    "name": "riskId",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "userId",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Mitigation2"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Multi-Status",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/activitygroup/search": {
            "post": {
                "tags": ["Business Activity Group Bulk APIs"],
                "parameters": [{
                    "name": "condition",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "filter",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "parent",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "type",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Activity Group Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/users/{id}/risks": {
            "get": {
                "tags": ["ARC User APIs"],
                "summary": "Fetches Risk associated to the User",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/users": {
            "get": {
                "tags": ["ARC User APIs"],
                "summary": "Get users for a provided entity",
                "parameters": [{
                    "name": "entityId",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "entityType",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "filter",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sortDesc",
                    "in": "query",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/risk/search": {
            "post": {
                "tags": ["Risk Bulk APIs"],
                "summary": "Search for Risks based on the provided filters",
                "parameters": [{
                    "name": "filter",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "level",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sortDesc",
                    "in": "query",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "status",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "type",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Risk Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/mitigation/bulk/upload": {
            "post": {
                "tags": ["Mitigation Bulk APIs"],
                "summary": "Creates Mitigations using File Bulk Upload or by Json Request body",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerMitigation"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerMitigation"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Mitigation Bulk APIs"],
                "summary": "Deletes the Mitigations using File Bulk Upload or by Json Request body",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/activitygroup/bulk/upload": {
            "post": {
                "tags": ["Business Activity Group Bulk APIs"],
                "summary": "Create new activity groups using File Bulk Upload or by Json Request body",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerActivityGroup"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerActivityGroup"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Business Activity Group Bulk APIs"],
                "summary": "Deletes the Activity Groups using File Bulk Upload or by Json Request body",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/activities/{id}/permissions": {
            "get": {
                "tags": ["Business Activity APIs"],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "filter",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sortDesc",
                    "in": "query",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            },
            "post": {
                "tags": ["Business Activity APIs"],
                "summary": "Activity and Permission relation v2",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Activity10"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/entity/search": {
            "post": {
                "summary": "Search for Entities based on the provided filters",
                "parameters": [{
                    "name": "filter",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "folderId",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sortDesc",
                    "in": "query",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "type",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/risks": {
            "post": {
                "tags": ["Risk APIs"],
                "summary": "Creates Risk or Bulk Delete Risks",
                "parameters": [{
                    "name": "X-HTTP-Method-Override",
                    "in": "header",
                    "description": "Override http method for Bulk Delete operation eg: X-HTTP-Method-Override=DELETE",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Risk4"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/activity/permission/bulk/upload": {
            "post": {
                "tags": ["Business Activity Bulk APIs"],
                "summary": "Association of Activities with Permissions using File Bulk Upload or by Json Request body",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerActivityToPermission"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerActivityToPermission"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/activity/permissiongroup/bulk/upload": {
            "post": {
                "tags": ["Business Activity Bulk APIs"],
                "summary": "Association of Activities with Permission Groups using File Bulk Upload or by Json Request body",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerActivityToPermissionGroup"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerActivityToPermissionGroup"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Activity Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/users/{id}/risks/analysis": {
            "post": {
                "tags": ["ARC User APIs"],
                "summary": "Check impact of adding permissions to the User",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/V1SwaggerUserRiskAnalysis"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/users/risks/preview/bulk": {
            "post": {
                "tags": ["ARC User APIs"],
                "summary": "Return the Analysis of User and added Access",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/risks/search": {
            "post": {
                "tags": ["Risk APIs"],
                "summary": "Search for Risks based on the provided filters",
                "parameters": [{
                    "name": "filter",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "level",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sortDesc",
                    "in": "query",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "status",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "type",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/mitigations": {
            "post": {
                "tags": ["Mitigation APIs"],
                "summary": "Creates Mitigation or Bulk Delete Mitigations",
                "parameters": [{
                    "name": "X-HTTP-Method-Override",
                    "in": "header",
                    "description": "Override http method for Bulk Delete operation eg: X-HTTP-Method-Override=DELETE",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Mitigation3"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/activity/search": {
            "post": {
                "tags": ["Business Activity Bulk APIs"],
                "summary": "Search for Business Activities based on the provided filters",
                "parameters": [{
                    "name": "filter",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "parentId",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sortDesc",
                    "in": "query",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "type",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Activity Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/risks/{id}": {
            "get": {
                "tags": ["Risk APIs"],
                "summary": "Get the Risk details",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Risk APIs"],
                "summary": "Deletes the Risk",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Risk APIs"],
                "summary": "Updates the Risk details",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Risk3"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/activitygroup/activity/bulk": {
            "post": {
                "tags": ["Business Activity Group Bulk APIs"],
                "summary": "Map/unmap activity groups with activities",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerActivityGroupToEntity"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/activityfolders/search": {
            "post": {
                "tags": ["Activity Folder APIs"],
                "summary": "Search for Activity Folders based on the provided filters",
                "parameters": [{
                    "name": "filter",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sortDesc",
                    "in": "query",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/mitigation/bulk": {
            "patch": {
                "tags": ["Mitigation Bulk APIs"],
                "summary": "Update the Mitigation details",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerMitigationUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/risk/activitygroup/bulk": {
            "post": {
                "tags": ["Risk Bulk APIs"],
                "summary": "Association of Activity Group with Risk",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerRiskToMitigation"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/activities/{id}/risks": {
            "get": {
                "tags": ["Business Activity APIs"],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "filter",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sortDesc",
                    "in": "query",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/risks/{id}/activities": {
            "get": {
                "tags": ["Risk APIs"],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "filter",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sortDesc",
                    "in": "query",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            },
            "post": {
                "tags": ["Risk APIs"],
                "summary": "Risk and Activity relation v2",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Risk1"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/activity/bulk/upload": {
            "post": {
                "tags": ["Business Activity Bulk APIs"],
                "summary": "Create new activities using File Bulk Upload or by Json Request body",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerActivity"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerActivity"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Business Activity Bulk APIs"],
                "summary": "Delete the activities using File Bulk Upload or by Json Request body",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerActivityDelete"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerActivityDelete"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/activity/risk/bulk/upload": {
            "post": {
                "tags": ["Business Activity Bulk APIs"],
                "summary": "Association of Activities with Risks using File Bulk Upload or by Json Request body",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerActivityToRisk"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerActivityToRisk"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/mitigation/search": {
            "post": {
                "tags": ["Mitigation Bulk APIs"],
                "summary": "Search for Mitigations based on the provided filters",
                "parameters": [{
                    "name": "filter",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sortDesc",
                    "in": "query",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Mitigation Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/stats": {
            "get": {
                "tags": ["ARC Statistics APIs"],
                "summary": "Get the statistics of an entity",
                "parameters": [{
                    "name": "limit",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "resourceType",
                    "in": "query",
                    "description": "Define the resource type to apply",
                    "required": true,
                    "schema": {
                        "enum": ["Business Activity", "Mitigation", "Risk", "All"],
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/risk/mitigation/bulk/upload": {
            "post": {
                "tags": ["Risk Bulk APIs"],
                "summary": "Association of Risks with Mitigations using File Bulk Upload or by Json Request body",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerRiskToMitigation"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerRiskToMitigation"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/risks/{id}/mitigations": {
            "get": {
                "tags": ["Risk APIs"],
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "filter",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sortDesc",
                    "in": "query",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            },
            "post": {
                "tags": ["Risk APIs"],
                "summary": "Risk and Mitigation relation",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Risk2"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/permissiongroup/permission/bulk/upload": {
            "post": {
                "tags": ["Permission Group Bulk APIs"],
                "summary": "Map/Unmap Permission Groups with Permissions using File Bulk Upload or by Json Request body",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerPermissionToPermissionGroup"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerPermissionToPermissionGroup"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/activities/{id}": {
            "get": {
                "tags": ["Business Activity APIs"],
                "summary": "Get the details of activity v2",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Business Activity APIs"],
                "summary": "Deletes the Activity v2",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Business Activity APIs"],
                "summary": "Updates the Activities details v2",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Activity12"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/mitigations/{id}": {
            "get": {
                "tags": ["Mitigation APIs"],
                "summary": "Get the Mitigation details",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Mitigation APIs"],
                "summary": "Deletes the Mitigation",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "204": {
                        "description": "Deleted",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Mitigation APIs"],
                "summary": "Update the Mitigation details",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Mitigation4"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/activity/bulk": {
            "patch": {
                "tags": ["Business Activity Bulk APIs"],
                "summary": "Updates the Activities details",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerActivityUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/risk/bulk": {
            "patch": {
                "tags": ["Risk Bulk APIs"],
                "summary": "Updates the Risk details",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerRiskUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/activitygroup/bulk": {
            "patch": {
                "tags": ["Business Activity Group Bulk APIs"],
                "summary": "Updates the Activity Group details",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerActivityGroupUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/activities/search": {
            "post": {
                "tags": ["Business Activity APIs"],
                "summary": "Search for Business Activities based on the provided filters",
                "parameters": [{
                    "name": "filter",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "folderId",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sortDesc",
                    "in": "query",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/users/{id}/risks/preview": {
            "post": {
                "tags": ["ARC User APIs"],
                "summary": "Check impact of adding permissions to the User",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "groupBy",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/V1SwaggerUserRiskPreview"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/permissiongroup/bulk": {
            "patch": {
                "tags": ["Permission Group Bulk APIs"],
                "summary": "Updates the Permission Groups details",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerPermissionGroupUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v1.0/risk/bulk/upload": {
            "post": {
                "tags": ["Risk Bulk APIs"],
                "summary": "Creates Risks using File Bulk Upload or by Json Request body",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerRisk"
                            }
                        },
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SwaggerRisk"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            },
            "delete": {
                "tags": ["Risk Bulk APIs"],
                "summary": "Deletes the Risks using File Bulk Upload or by Json Request body",
                "parameters": [{
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/octet-stream": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Json",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "207": {
                        "description": "Partial Execution",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/activityfolders/{id}/children": {
            "get": {
                "tags": ["Activity Folder APIs"],
                "summary": "Get the Activities in Activity Folder",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "filter",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sortDesc",
                    "in": "query",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            },
            "post": {
                "tags": ["Activity Folder APIs"],
                "summary": "Updates the relation between Activity Folder and other Activities or Folders",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Activity7"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "204": {
                        "description": "No Content",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/mitigations/{id}/risks": {
            "get": {
                "tags": ["Mitigation APIs"],
                "summary": "Show the details of Risks mapped to a Mitigation",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "filter",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sortDesc",
                    "in": "query",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/mitigations/search": {
            "post": {
                "tags": ["Mitigation APIs"],
                "summary": "Search for Mitigations based on the provided filters",
                "parameters": [{
                    "name": "filter",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "limit",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "schema": {
                        "format": "int32",
                        "type": "integer"
                    }
                }, {
                    "name": "sort",
                    "in": "query",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "sortDesc",
                    "in": "query",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        },
        "/itim/arc/v2.0/activityfolders": {
            "post": {
                "tags": ["Activity Folder APIs"],
                "summary": "Create new Activity Folder using Json Request body",
                "parameters": [{
                    "name": "X-HTTP-Method-Override",
                    "in": "header",
                    "description": "Override http method for Bulk Delete operation eg: X-HTTP-Method-Override=DELETE",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-admin-invocation",
                    "in": "header",
                    "description": "Is a admin call",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "x-forwarded-host",
                    "in": "header",
                    "description": "Tenant",
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Activity6"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "DelegateRequestBean": {
                "type": "object",
                "properties": {
                    "delegate": {
                        "allOf": [{
                            "$ref": "#/components/schemas/EntityBean"
                        }, {
                            "example": {
                                "_links": {
                                    "self": {
                                        "href": "/itim/rest/systemusers/ZXJ1aWQ9YXNtaXRoLG91PXN5c3RlbVVzZXIsb3U9aXRpbSxvdT1vcmcsZGM9Y29t"
                                    }
                                }
                            }
                        }]
                    },
                    "endDate": {
                        "type": "string",
                        "example": "1432603800000"
                    },
                    "startDate": {
                        "type": "string",
                        "example": "1432603800000"
                    }
                }
            },
            "UserEntitlementGrant": {
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserToEntitlementGrant"
                        }
                    }
                }
            },
            "BulkGrantRevokeUserEntitlementGrantUserEntitlementRevoke": {
                "type": "object",
                "properties": {
                    "revoke": {
                        "$ref": "#/components/schemas/UserEntitlementRevoke"
                    },
                    "grant": {
                        "$ref": "#/components/schemas/UserEntitlementGrant"
                    }
                }
            },
            "ModifyServiceRequestBeanSwagger": {
                "type": "object",
                "properties": {
                    "profileName": {
                        "type": "string",
                        "example": "manualService"
                    },
                    "manualWorkOrderRequest": {
                        "allOf": [{
                            "$ref": "#/components/schemas/ManualWorkOrderRequestBean"
                        }, {
                            "example": {
                                "participant": {
                                    "type": "ADMINISTRATOR"
                                }
                            }
                        }]
                    },
                    "_attributes": {
                        "type": "object",
                        "example": {
                            "erservicename": "ManualService",
                            "erconnectionmode": "MANUAL"
                        }
                    },
                    "orgID": {
                        "type": "string",
                        "example": "ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t"
                    }
                }
            },
            "Form": {
                "type": "object",
                "properties": {
                    "_inputs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FormInput"
                        }
                    }
                }
            },
            "PersonModifyBeanSwagger": {
                "type": "object",
                "properties": {
                    "justification": {
                        "type": "string",
                        "example": "Department Change"
                    },
                    "_attributes": {
                        "type": "object",
                        "example": {
                            "manager": ["erglobalid=328765385581670887,ou=0,ou=people,erglobalid=00000000000000000000,ou=org,dc=com"],
                            "title": "Marketing Manager"
                        }
                    }
                }
            },
            "AccountUpdateBeanSwagger": {
                "type": "object",
                "properties": {
                    "requestee": {
                        "allOf": [{
                            "$ref": "#/components/schemas/HALLink"
                        }, {
                            "example": {
                                "href": "/itim/rest/people/ZXJnbG9iYWxpZD03MjQyNDYxMTI1MTM0MTE0ODM5LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ"
                            }
                        }]
                    },
                    "_forms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Form"
                        },
                        "example": [{
                            "_inputs": [{
                                "attribute": "erPassword",
                                "value": "secret"
                            }, {
                                "property": "itimPassword",
                                "value": "secret"
                            }]
                        }]
                    }
                }
            },
            "ChallengeRequestUserBean": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string"
                    }
                }
            },
            "CreateAccessBean": {
                "type": "object",
                "properties": {
                    "_attributes": {
                        "type": "object",
                        "example": {
                            "badges": [{
                                "style": "blue",
                                "designation": "approle"
                            }],
                            "additionalInformation": "Access created for the ApplicationRole",
                            "accessName": "ApplicationRole",
                            "entityType": 3,
                            "accessCategory": "Application",
                            "description": "ApplicationRole Access",
                            "isCommon": true,
                            "entityRef": "410a7b56-37c8-4b1d-9ca7-e96680d8a7eb",
                            "tags": ["tag1", "tag2"]
                        }
                    }
                }
            },
            "UserToEntitlementGrant": {
                "type": "object",
                "properties": {
                    "rights": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": []
                    },
                    "user": {
                        "type": "string",
                        "example": "ZXJnbG9iYWxpZD02NTU1NjcyMjcxMDI1NDM5MDMwLG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9aXN2Z2ltLGRjPWlzdmdpbQ"
                    },
                    "group": {
                        "type": "string",
                        "example": ""
                    }
                }
            },
            "ManualWorkOrderRequestBean": {
                "type": "object",
                "properties": {
                    "defaultNotification": {
                        "type": "boolean"
                    },
                    "escalationPeriod": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "escalationParticipant": {
                        "$ref": "#/components/schemas/ParticipantBean"
                    },
                    "_attributes": {
                        "type": "object",
                        "example": {
                            "sn": "Doe",
                            "cn": "john"
                        }
                    },
                    "participant": {
                        "$ref": "#/components/schemas/ParticipantBean"
                    }
                }
            },
            "ParticipantBean": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "_attributes": {
                        "type": "object",
                        "example": {
                            "sn": "Doe",
                            "cn": "john"
                        }
                    }
                }
            },
            "ServiceRequestBeanSwagger": {
                "type": "object",
                "properties": {
                    "profileName": {
                        "type": "string",
                        "example": "manualService"
                    },
                    "defaultProvisioningPolicyRequest": {
                        "allOf": [{
                            "$ref": "#/components/schemas/ProvisioningPolicyRequestBean"
                        }, {
                            "example": {
                                "enabled": "true",
                                "provisioningMode": "Manual"
                            }
                        }]
                    },
                    "manualWorkOrderRequest": {
                        "allOf": [{
                            "$ref": "#/components/schemas/ManualWorkOrderRequestBean"
                        }, {
                            "example": {
                                "profileName": "manualService",
                                "defaultProvisioningPolicyRequest": {
                                    "enabled": "true",
                                    "provisioningMode": "Manual"
                                },
                                "manualWorkOrderRequest": {
                                    "defaultNotification": "true",
                                    "escalationPeriod": "10",
                                    "escalationParticipant": {
                                        "id": "ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAzNSxvdT1zeXNSb2xlcyxlcmdsb2JhbGlkPTAwMDAwMDAwMDAwMDAwMDAwMDAwLG91PW9yZyxkYz1jb20",
                                        "type": "GROUP"
                                    },
                                    "participant": {
                                        "id": "ZXJnbG9iYWxpZD02MzkwMDg1MDQ2MjczNDI3MjQ1LG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ",
                                        "type": "USER"
                                    }
                                },
                                "_attributes": {
                                    "erservicename": "ManualService",
                                    "erconnectionmode": "MANUAL"
                                },
                                "orgID": "ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t"
                            }
                        }]
                    },
                    "_attributes": {
                        "type": "object",
                        "example": {
                            "erservicename": "ManualService",
                            "erconnectionmode": "MANUAL"
                        }
                    },
                    "orgID": {
                        "type": "string",
                        "example": "ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t"
                    }
                }
            },
            "RecertifyWorkItemSwagger": {
                "type": "object",
                "properties": {
                    "userComment": {
                        "type": "string",
                        "example": ""
                    },
                    "userRecertificationData": {
                        "type": "object",
                        "example": {
                            "accountsToCertify": [{
                                "ownershipType": "Individual",
                                "decision": true,
                                "name": "vm on linux service",
                                "description": "",
                                "dependentRecertificationTodoTargets": [{
                                    "ownershipType": "",
                                    "decision": false,
                                    "name": "apache access",
                                    "description": "Apache access to xyz application",
                                    "dependentRecertificationTodoTargets": [],
                                    "dn": "erposixgroupname=apache,erglobalid=942064772966405183,ou=services,erglobalid=00000000000000000000,ou=org,dc=com"
                                }],
                                "dn": "erglobalid=2400238261244324504,ou=0,ou=accounts,erglobalid=00000000000000000000,ou=org,dc=com"
                            }, {
                                "ownershipType": "Individual",
                                "decision": false,
                                "name": "vm on aix service",
                                "description": "",
                                "dependentRecertificationTodoTargets": [],
                                "dn": "erglobalid=5949047696333471469,ou=0,ou=accounts,erglobalid=00000000000000000000,ou=org,dc=com"
                            }],
                            "rolesToCertify": [{
                                "ownershipType": "",
                                "decision": false,
                                "name": "Developers",
                                "description": "Developers in Costa Mesa location",
                                "dependentRecertificationTodoTargets": [],
                                "dn": "erglobalid=2402438404547081094,ou=roles,erglobalid=00000000000000000000,ou=org,dc=com"
                            }, {
                                "ownershipType": "",
                                "decision": true,
                                "name": "Managers",
                                "description": "Managers in Costa Mesa location",
                                "dependentRecertificationTodoTargets": [],
                                "dn": "erglobalid=2402438404547081111,ou=roles,erglobalid=00000000000000000000,ou=org,dc=com"
                            }]
                        }
                    },
                    "justification": {
                        "type": "string",
                        "example": "The user requires the role and accesses to do the job"
                    }
                }
            },
            "WorkItemUpdateBeanSwagger": {
                "type": "object",
                "properties": {
                    "action": {
                        "allOf": [{
                            "$ref": "#/components/schemas/WorkItemActionBean"
                        }, {
                            "example": {
                                "code": "RS"
                            }
                        }]
                    },
                    "justification": {
                        "type": "string",
                        "example": "Provided requested information"
                    },
                    "label": {
                        "type": "string",
                        "example": "RFIAccountAdd"
                    },
                    "rfiAttributeValues": {
                        "type": "object",
                        "example": [{
                            "name": "cn",
                            "value": ["Marco Lounton"]
                        }, {
                            "name": "erntlocalgroups",
                            "value": ["Backup Operators", "ConfigMgr Remote Control Users"]
                        }]
                    }
                }
            },
            "CreatePersonRequestBean": {
                "type": "object",
                "properties": {
                    "profileName": {
                        "type": "string",
                        "example": "Person"
                    },
                    "scheduledTime": {
                        "type": "string",
                        "example": "01/01/2017 12:30"
                    },
                    "justification": {
                        "type": "string"
                    },
                    "_attributes": {
                        "type": "object",
                        "example": {
                            "sn": "Doe",
                            "cn": "john"
                        }
                    },
                    "orgID": {
                        "type": "string",
                        "example": "ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t"
                    }
                }
            },
            "SelfRegisterPersonRequestBean": {
                "type": "object",
                "properties": {
                    "profileName": {
                        "type": "string",
                        "example": "Person"
                    },
                    "tenantID": {
                        "type": "string",
                        "example": "org"
                    },
                    "justification": {
                        "type": "string"
                    },
                    "_attributes": {
                        "type": "object",
                        "example": {
                            "sn": "Doe",
                            "cn": "john"
                        }
                    }
                }
            },
            "WorkItemBatchUpdateBeanSwagger": {
                "type": "object",
                "properties": {
                    "_links": {
                        "type": "object",
                        "example": {
                            "self": {
                                "href": "/itim/rest/workitems/2461578322863485336"
                            }
                        }
                    },
                    "action": {
                        "allOf": [{
                            "$ref": "#/components/schemas/WorkItemActionBean"
                        }, {
                            "example": {
                                "code": "AR"
                            }
                        }]
                    },
                    "justification": {
                        "type": "string",
                        "example": "Rejecting request due to policy violations"
                    },
                    "label": {
                        "type": "string",
                        "example": "Manager Approval"
                    }
                }
            },
            "ChangePasswordSwaggerBean": {
                "type": "object",
                "properties": {
                    "_forms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Form"
                        },
                        "example": [{
                            "_inputs": [{
                                "property": "oldPassword",
                                "value": "myoldpassword"
                            }, {
                                "attribute": "erPassword",
                                "value": "mypassword"
                            }]
                        }]
                    }
                }
            },
            "FormInput": {
                "type": "object",
                "properties": {
                    "attribute": {
                        "type": "string",
                        "example": "sharedSecret"
                    },
                    "value": {
                        "type": "object",
                        "example": "sharedSecret"
                    }
                }
            },
            "PersonSuspendRestoreBeanSwagger": {
                "type": "object",
                "properties": {
                    "justification": {
                        "type": "string",
                        "example": "The person is on a long leave"
                    }
                }
            },
            "AccessAssignmentSingleRequestBean": {
                "type": "object",
                "properties": {
                    "justification": {
                        "type": "string",
                        "example": "Deleting the access assignment due to change of role"
                    }
                }
            },
            "LabelBean": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string"
                    },
                    "inserts": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "key": {
                        "type": "string"
                    }
                }
            },
            "ModifyAccessBean": {
                "type": "object",
                "properties": {
                    "enableAccess": {
                        "type": "boolean",
                        "example": false
                    },
                    "_attributes": {
                        "type": "object",
                        "example": {
                            "entityType": 3
                        }
                    }
                }
            },
            "RetrievePasswordSwagger": {
                "type": "object",
                "properties": {
                    "_forms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Form"
                        }
                    }
                }
            },
            "ValidatePasswordSwaggerBean": {
                "type": "object",
                "properties": {
                    "_forms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Form"
                        },
                        "example": [{
                            "_inputs": [{
                                "attribute": "erPassword",
                                "value": "mypassword"
                            }]
                        }]
                    }
                }
            },
            "SearchAssignmentRequestBeanSwagger": {
                "type": "object",
                "properties": {
                    "rightsFilter": {
                        "type": "string",
                        "example": "name eq \"Elite Plumbing\" AND city eq \"New York\""
                    },
                    "entitlement": {
                        "type": "string",
                        "example": "ZXJnbG9iYWxpZD0zMjkwMjU2ODQ3MDcwNzgyNzQ5LG91PXJvbGVzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9aXN2Z2ltLGRjPWNvbQ"
                    }
                }
            },
            "ModifyPasswordPolicyRequestBeanSwagger": {
                "type": "object",
                "properties": {
                    "policyTargets": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        },
                        "example": [{
                            "constant": "SPECIFIC_SERVICE",
                            "service": "ZXJnbG9iYWxpZD05MzM3OTgyNzQyNzQxMDUwMzQsb3U9c2VydmljZXMsZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t"
                        }]
                    },
                    "rules": {
                        "type": "object",
                        "example": {
                            "minLength": "1",
                            "maxLength": "10"
                        }
                    },
                    "_attributes": {
                        "type": "object",
                        "example": {
                            "erenabled": "false",
                            "erscope": "2"
                        }
                    }
                }
            },
            "EnforcePolicyRequestBeanSwagger": {
                "type": "object",
                "properties": {
                    "scheduledTime": {
                        "type": "string",
                        "example": "01/01/2017 12:30"
                    }
                }
            },
            "ModifyIdentityPolicyBeanSwagger": {
                "type": "object",
                "properties": {
                    "_attributes": {
                        "type": "object",
                        "example": {
                            "erenabled": "true"
                        }
                    }
                }
            },
            "ProvisioningPolicyRequestBean": {
                "type": "object",
                "properties": {
                    "_attributes": {
                        "type": "object",
                        "example": {
                            "sn": "Doe",
                            "cn": "john"
                        }
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "provisioningMode": {
                        "type": "string"
                    }
                }
            },
            "UserRecertificationDetailsBean": {
                "type": "object",
                "properties": {
                    "accountsToCertify": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RecertificationTodoTarget"
                        },
                        "example": [{
                            "ownershipType": "Individual",
                            "decision": true,
                            "name": "vm on linux service",
                            "description": "",
                            "dependentRecertificationTodoTargets": [{
                                "ownershipType": "",
                                "decision": false,
                                "name": "apache access",
                                "description": "Apache access to xyz application",
                                "dependentRecertificationTodoTargets": [],
                                "dn": "erposixgroupname=apache,erglobalid=942064772966405183,ou=services,erglobalid=00000000000000000000,ou=org,dc=com"
                            }],
                            "dn": "erglobalid=2400238261244324504,ou=0,ou=accounts,erglobalid=00000000000000000000,ou=org,dc=com"
                        }, {
                            "ownershipType": "Individual",
                            "decision": false,
                            "name": "vm on aix service",
                            "description": "",
                            "dependentRecertificationTodoTargets": [],
                            "dn": "erglobalid=5949047696333471469,ou=0,ou=accounts,erglobalid=00000000000000000000,ou=org,dc=com"
                        }]
                    },
                    "comment": {
                        "type": "string",
                        "example": "string"
                    },
                    "justification": {
                        "type": "string",
                        "example": "string"
                    },
                    "rolesToCertify": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RecertificationTodoTarget"
                        },
                        "example": [{
                            "ownershipType": "",
                            "decision": false,
                            "name": "Developers",
                            "description": "Developers in Costa Mesa location",
                            "dependentRecertificationTodoTargets": [],
                            "dn": "erglobalid=2402438404547081094,ou=roles,erglobalid=00000000000000000000,ou=org,dc=com"
                        }, {
                            "ownershipType": "",
                            "decision": true,
                            "name": "Managers",
                            "description": "Managers in Costa Mesa location",
                            "dependentRecertificationTodoTargets": [],
                            "dn": "erglobalid=2402438404547081111,ou=roles,erglobalid=00000000000000000000,ou=org,dc=com"
                        }]
                    }
                }
            },
            "CreateLifecycleRuleRequestBeanSwagger": {
                "type": "object",
                "properties": {
                    "typeInfo": {
                        "type": "string",
                        "example": "Account"
                    },
                    "ruleType": {
                        "type": "string",
                        "example": "CATEGORY_TYPE"
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        },
                        "example": [{
                            "dayOfWeek": 0,
                            "hour": 12,
                            "month": 0,
                            "dayOfMonth": -1,
                            "minute": 0
                        }]
                    },
                    "_attributes": {
                        "type": "object",
                        "example": {
                            "OperationName": "suspend",
                            "Filter": "(cn=*)",
                            "name": "Suspend Dormant Account LCR",
                            "description": "LCR to suspend dormant accounts"
                        }
                    }
                }
            },
            "WorkItemActionBean": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "inProgressLabel": {
                        "$ref": "#/components/schemas/LabelBean"
                    },
                    "label": {
                        "$ref": "#/components/schemas/LabelBean"
                    }
                }
            },
            "CreateIdentityPolicyRequestBeanSwagger": {
                "type": "object",
                "properties": {
                    "_attributes": {
                        "type": "object",
                        "example": {
                            "eruserclass": "Person",
                            "erenabled": "true",
                            "erscope": "2",
                            "erkeywords": "Person",
                            "description": "abc-desc",
                            "erjavascript": "<Javascript code here>",
                            "erpolicytarget": "1;erglobalid=6995527626792419564,ou=services,erglobalid=00000000000000000000,ou=org,dc=Kuldeep",
                            "erpolicyitemname": "Identity-Policy"
                        }
                    },
                    "orgID": {
                        "type": "string",
                        "example": "ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwghMDAwMCxvdT1vcmcsZGM9RGl2eWE"
                    }
                }
            },
            "ChallengeResponseBean": {
                "type": "object",
                "properties": {
                    "response": {
                        "type": "string"
                    },
                    "challenge": {
                        "type": "string"
                    }
                }
            },
            "AccessAssignCheckComplianceRequestBeanSwagger": {
                "type": "object",
                "properties": {
                    "newAccount": {
                        "allOf": [{
                            "$ref": "#/components/schemas/ExtendedHALBean"
                        }, {
                            "example": {
                                "_links": {
                                    "requestee": {
                                        "href": "/itim/rest/people/ZXJnbG9iYWxpZD03NjQxMTgwNTA0MzA0Njg5MTAzLG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ"
                                    },
                                    "service": {
                                        "href": "/itim/rest/services/ZXJnbG9iYWxpZD03NjQxMTc2MjkxOTU5MDI1OTU0LG91PXNlcnZpY2VzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ"
                                    }
                                },
                                "_forms": [{
                                    "_inputs": [{
                                        "attribute": "eruid",
                                        "value": "userid"
                                    }, {
                                        "attribute": "erposixgecos",
                                        "value": ["aValue"]
                                    }]
                                }]
                            }
                        }]
                    }
                }
            },
            "RecertificationTodoTarget": {
                "type": "object",
                "properties": {
                    "ownershipType": {
                        "type": "string"
                    },
                    "decision": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "dependentRecertificationTodoTargets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RecertificationTodoTarget"
                        }
                    },
                    "dN": {
                        "type": "string"
                    }
                }
            },
            "PasswordSubmitResponseBeanSwagger": {
                "type": "object",
                "properties": {
                    "challengeResponses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChallengeResponseBean"
                        },
                        "example": [{
                            "response": "IBM",
                            "challenge": "What is the name of your first company?"
                        }, {
                            "response": "Red",
                            "challenge": "What is your favorite color?"
                        }, {
                            "response": "4",
                            "challenge": "How many siblings does your father have?"
                        }]
                    }
                }
            },
            "CreatePasswordPolicyRequestBeanSwagger": {
                "type": "object",
                "properties": {
                    "policyTargets": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        },
                        "example": [{
                            "constant": "SPECIFIC_SERVICE",
                            "service": "ZXJnbG9iYWxpZD02NTgxNDM4MDU4NjI3Njg3NjI1LG91PXNlcnZpY2VzLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9b3JnLGRjPWNvbQ"
                        }, {
                            "constant": "SERVICE_TYPE",
                            "service": "WinLocalProfile"
                        }]
                    },
                    "rules": {
                        "type": "object",
                        "example": {
                            "customRules": {
                                "examples.passwordrules.RegularExpressionRule": "true"
                            },
                            "minAlphabeticCharacters": "3",
                            "minLength": "5",
                            "maxLength": "13"
                        }
                    },
                    "_attributes": {
                        "type": "object",
                        "example": {
                            "erenabled": "true",
                            "erscope": "1",
                            "erkeywords": "Policy new",
                            "description": "test new",
                            "erpolicyitemname": "REST password-Policy new"
                        }
                    },
                    "orgID": {
                        "type": "string",
                        "example": "ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMCxvdT1vcmcsZGM9Y29t"
                    }
                }
            },
            "HALLink": {
                "type": "object",
                "properties": {
                    "hreflang": {
                        "type": "string"
                    },
                    "templated": {
                        "type": "boolean"
                    },
                    "profile": {
                        "format": "uri",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "href": {
                        "format": "uri",
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "UserEntitlementRevoke": {
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/UserToEntitlementRevoke"
                        }
                    }
                }
            },
            "EntityBean": {
                "type": "object",
                "properties": {
                    "_attributes": {
                        "type": "object",
                        "example": {
                            "sn": "Doe",
                            "cn": "john"
                        }
                    }
                }
            },
            "ExtendedHALBean": {
                "type": "object",
                "properties": {
                    "_attributes": {
                        "type": "object",
                        "example": {
                            "sn": "Doe",
                            "cn": "john"
                        }
                    }
                }
            },
            "ForgotPasswordSubmitResponseBeanSwagger": {
                "type": "object",
                "properties": {
                    "password": {
                        "type": "string",
                        "example": "itimPassword"
                    },
                    "challengeResponses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChallengeResponseBean"
                        },
                        "example": [{
                            "response": "IBM",
                            "challenge": "What is the name of your first company?"
                        }, {
                            "response": "Red",
                            "challenge": "What is your favorite color?"
                        }, {
                            "response": "4",
                            "challenge": "How many siblings does your father have?"
                        }]
                    }
                }
            },
            "ModifyLifecycleRuleRequestBeanSwagger": {
                "type": "object",
                "properties": {
                    "_attributes": {
                        "type": "object",
                        "example": {
                            "name": "Suspend Unused Account LCR"
                        }
                    }
                }
            },
            "UserToEntitlementRevoke": {
                "type": "object",
                "properties": {
                    "assignmentOrigin": {
                        "type": "string",
                        "example": ""
                    },
                    "user": {
                        "type": "string",
                        "example": "ZXJnbG9iYWxpZD02NTU1NjcyMjcxMDI1NDM5MDMwLG91PTAsb3U9cGVvcGxlLGVyZ2xvYmFsaWQ9MDAwMDAwMDAwMDAwMDAwMDAwMDAsb3U9aXN2Z2ltLGRjPWlzdmdpbQ"
                    },
                    "group": {
                        "type": "string",
                        "example": ""
                    }
                }
            },
            "PersonDeleteResponseBean": {
                "type": "object",
                "properties": {
                    "requestId": {
                        "type": "string"
                    },
                    "status": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "SwaggerRiskToMitigation": {
                "type": "object",
                "properties": {
                    "risks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Risk5"
                        }
                    }
                }
            },
            "SwaggerActivityToPermission": {
                "type": "object",
                "properties": {
                    "activities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Activity2"
                        }
                    }
                }
            },
            "Activity": {
                "type": "object",
                "properties": {
                    "owner": {
                        "$ref": "#/components/schemas/User"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                }
            },
            "Risk3": {
                "type": "object",
                "properties": {
                    "likelihood": {
                        "type": "string"
                    },
                    "level": {
                        "type": "string"
                    },
                    "trend": {
                        "type": "string"
                    },
                    "acceptRational": {
                        "type": "string"
                    },
                    "impact": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "tolerance": {
                        "type": "string"
                    }
                }
            },
            "ActivityGroup1": {
                "type": "object",
                "properties": {
                    "owner": {
                        "type": "string"
                    },
                    "condition": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "string"
                    }
                }
            },
            "Risk4": {
                "type": "object",
                "properties": {
                    "likelihood": {
                        "type": "string"
                    },
                    "level": {
                        "type": "string"
                    },
                    "trend": {
                        "type": "string"
                    },
                    "acceptRational": {
                        "type": "string"
                    },
                    "impact": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "tolerance": {
                        "type": "string"
                    }
                }
            },
            "Risk5": {
                "type": "object",
                "properties": {
                    "add": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "remove": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Risk6": {
                "type": "object",
                "properties": {
                    "owner": {
                        "$ref": "#/components/schemas/User2"
                    },
                    "likelihood": {
                        "type": "string"
                    },
                    "level": {
                        "type": "string"
                    },
                    "trend": {
                        "type": "string"
                    },
                    "acceptRational": {
                        "type": "string"
                    },
                    "impact": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "tolerance": {
                        "type": "string"
                    }
                }
            },
            "Risk1": {
                "type": "object",
                "properties": {
                    "add": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Activity9"
                        }
                    },
                    "remove": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Risk2": {
                "type": "object",
                "properties": {
                    "add": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "remove": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Permission": {
                "type": "object",
                "properties": {
                    "condition": {
                        "type": "string"
                    },
                    "children": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Permission"
                        }
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "ActivityGroup": {
                "type": "object",
                "properties": {
                    "condition": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                }
            },
            "Risk7": {
                "type": "object",
                "properties": {
                    "owner": {
                        "$ref": "#/components/schemas/User3"
                    },
                    "likelihood": {
                        "type": "string"
                    },
                    "level": {
                        "type": "string"
                    },
                    "trend": {
                        "type": "string"
                    },
                    "acceptRational": {
                        "type": "string"
                    },
                    "impact": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "tolerance": {
                        "type": "string"
                    }
                }
            },
            "SwaggerMitigation": {
                "type": "object",
                "properties": {
                    "mitigations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Mitigation1"
                        }
                    }
                }
            },
            "SwaggerActivityGroupUpdate": {
                "type": "object",
                "properties": {
                    "activityGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ActivityGroup"
                        }
                    }
                }
            },
            "SwaggerActivityDelete": {
                "type": "object",
                "properties": {
                    "activities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Activity5"
                        }
                    }
                }
            },
            "Mitigation": {
                "type": "object",
                "properties": {
                    "extraDescription": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "link": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                }
            },
            "Mitigation1": {
                "type": "object",
                "properties": {
                    "extraDescription": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "link": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                }
            },
            "Mitigation2": {
                "type": "object",
                "properties": {
                    "add": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "processId": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "remove": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Mitigation3": {
                "type": "object",
                "properties": {
                    "extraDescription": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "link": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string"
                    }
                }
            },
            "SwaggerActivityToRisk": {
                "type": "object",
                "properties": {
                    "activities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Activity4"
                        }
                    }
                }
            },
            "Mitigation4": {
                "type": "object",
                "properties": {
                    "extraDescription": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "link": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string"
                    }
                }
            },
            "SwaggerActivityGroup": {
                "type": "object",
                "properties": {
                    "activityGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ActivityGroup1"
                        }
                    }
                }
            },
            "SwaggerPermissionGroup": {
                "type": "object",
                "properties": {
                    "permissionGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PermissionGroup1"
                        }
                    }
                }
            },
            "Activity3": {
                "type": "object",
                "properties": {
                    "add": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "remove": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Activity4": {
                "type": "object",
                "properties": {
                    "add": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "remove": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Activity5": {
                "type": "object",
                "properties": {
                    "removeChildren": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    }
                }
            },
            "V1SwaggerUserRiskAnalysis": {
                "type": "object",
                "properties": {
                    "risks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Risk"
                        }
                    },
                    "processId": {
                        "format": "int64",
                        "type": "integer"
                    }
                }
            },
            "Activity6": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "folderId": {
                        "type": "string"
                    }
                }
            },
            "User": {
                "type": "object",
                "properties": {
                    "businessUnit": {
                        "type": "string"
                    },
                    "givenName": {
                        "type": "string"
                    },
                    "familyName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    }
                }
            },
            "SwaggerActivityToPermissionGroup": {
                "type": "object",
                "properties": {
                    "activities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Activity3"
                        }
                    }
                }
            },
            "User2": {
                "type": "object",
                "properties": {
                    "businessUnit": {
                        "type": "string"
                    },
                    "givenName": {
                        "type": "string"
                    },
                    "familyName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    }
                }
            },
            "User1": {
                "type": "object",
                "properties": {
                    "businessUnit": {
                        "type": "string"
                    },
                    "givenName": {
                        "type": "string"
                    },
                    "familyName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    }
                }
            },
            "Activity1": {
                "type": "object",
                "properties": {
                    "owner": {
                        "$ref": "#/components/schemas/User1"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "folderId": {
                        "type": "string"
                    }
                }
            },
            "SwaggerRiskUpdate": {
                "type": "object",
                "properties": {
                    "risks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Risk6"
                        }
                    }
                }
            },
            "Activity2": {
                "type": "object",
                "properties": {
                    "add": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "remove": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "PermissionGroup": {
                "type": "object",
                "properties": {
                    "condition": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                }
            },
            "Risk": {
                "type": "object",
                "properties": {
                    "mitigationIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "riskId": {
                        "type": "string"
                    }
                }
            },
            "User3": {
                "type": "object",
                "properties": {
                    "businessUnit": {
                        "type": "string"
                    },
                    "givenName": {
                        "type": "string"
                    },
                    "familyName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    }
                }
            },
            "Activity7": {
                "type": "object",
                "properties": {
                    "add": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "remove": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Activity8": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "Activity9": {
                "type": "object",
                "properties": {
                    "condition": {
                        "type": "string"
                    },
                    "children": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Activity9"
                        }
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "SwaggerPermissionGroupUpdate": {
                "type": "object",
                "properties": {
                    "permissionGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PermissionGroup"
                        }
                    }
                }
            },
            "SwaggerRisk": {
                "type": "object",
                "properties": {
                    "risks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Risk7"
                        }
                    }
                }
            },
            "SwaggerActivity": {
                "type": "object",
                "properties": {
                    "activities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Activity1"
                        }
                    }
                }
            },
            "Activity11": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string"
                    },
                    "folderId": {
                        "type": "string"
                    }
                }
            },
            "SwaggerActivityUpdate": {
                "type": "object",
                "properties": {
                    "activities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Activity"
                        }
                    }
                }
            },
            "Activity10": {
                "type": "object",
                "properties": {
                    "add": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Permission"
                        }
                    },
                    "remove": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "SwaggerPermissionToPermissionGroup": {
                "type": "object",
                "properties": {
                    "permissionGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PermissionGroup2"
                        }
                    }
                }
            },
            "SwaggerMitigationUpdate": {
                "type": "object",
                "properties": {
                    "mitigations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Mitigation"
                        }
                    }
                }
            },
            "PermissionGroup2": {
                "type": "object",
                "properties": {
                    "add": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "remove": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "SwaggerActivityGroupToEntity": {
                "type": "object"
            },
            "PermissionGroup1": {
                "type": "object",
                "properties": {
                    "condition": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "string"
                    }
                }
            },
            "V1SwaggerUserRiskPreview": {
                "type": "object",
                "properties": {
                    "add": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Activity12": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "ownerId": {
                        "type": "string"
                    }
                }
            }
        }
    }
}]]></parameter>
        </Script>
    
    
        
    
    
    
    
    
    
        <Script name="HTTPCLIENT class 20250116 1233 backup after almost working">
            <ModTime>1737027144217</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[// 20250116 1116 Created

// This is the class that provides methods for making HTTP requests

function HTTPCLIENT(args) {
	this.baseUrl = args.baseUrl || throwException("HTTPClient constructor requires the baseUrl argument");
	this.schemaUrl = args.schemaUrl || throwException("HTTPClient constructor requires the schemaUrl argument");
	this.authUrl = args.authUrl || "";
	this.apikey = args.apikey || "";
	this.username = args.username || "";
	this.password = args.password || "";
	this.debug = args.debug || true;
	
	// The HTTP Client Connector to use
	this.http = system.getConnector("ibmdi.HTTPClient");
	
	// Member variables
	this.requestEntry = system.newEntry();
	this.token = null;
	this.sessionId = null;
	
	// HTTP Client call method. The first lines of code show you the parameters you can send
	this.makeRequest = function(params) {
		var verb = params.verb || "GET";
		var url = params.url || this.throwException("makeRequest called with no URL");
		var body = params.body || null;
		var ctype = params.ctype || "application/json";
		var where = params.where || "";
		var headers = params.headers || {};
		var gettingToken = params.token || false;
		var username = params.username || "";
		var password = params.password || "";
		
		this.requestEntry.removeAllAttributes();
		
		// Get token if necessary
		if (!this.token && !gettingToken) {
			this.getToken();
		} 
			
		// Add auth artifacts
		if (!gettingToken) {
			this.requestEntry["http.X-CSRV-TOKEN"] = this.token;
			if (this.sessionId) this.requestEntry["http.sessionId"] = this.sessionId;
		}
		
		// Prepend the host (baseURL) if not already there
		if (url.toLowerCase().indexOf(this.baseUrl.toLowerCase()) < 0) {
			url = this.baseUrl + "/" + url;
		}
		
		// If a body is passed, this must be a POST (I think)
		if (typeof body !== "undefined" && body !== null) {
			verb = "POST";
	
			if (typeof body != "string") {
				this.requestEntry["http.body"] = toJson(body);
			} else {
				this.requestEntry["http.body"] = body;
			}
		}	
		
		// Set up the global HTTP Connector
		this.http.setParam("method", verb.toUpperCase());
		this.http.setParam("url", url);
		this.http.setParam("username", username);
		this.http.setParam("password", password);
	
		// Now set up the request entry
		this.requestEntry["http.url"] = url;
		this.requestEntry["http.method"] = verb.toUpperCase();
		this.requestEntry["http.Content-Type"] = ctype;
		this.requestEntry["http.remote_user"] = username;
		this.requestEntry["http.remote_password"] = password;
		
		for (var hdr in headers) {
			this.requestEntry["http." + hdr] = headers[hdr]
		}
		
		if (this.debug) {
			this.logDetails({msg : "Request to itim", 
						obj : this.httpEntry(this.requestEntry, true), 
						url : url, 
						verb : verb, 
						ctype : ctype, 
						where : where,
						sent: true});
		}
	
		// Reinitialize the HTTP Client connector so the updated parameters are applied
		this.http.terminate();
		this.http.initialize(null);
	
		// Make the call
		do {
			var retry = false;
			try {	
				var retEntry = this.http.queryReply(this.requestEntry);
				var reply = this.parseReply(retEntry);
			} catch (ex) {
				// If the token has expired, get a new one
				if (ex.toString().indexOf("Unauthorized") >= 0) {
					this.getToken();
					retry = true
				} else
				// Else if we first must import the client cert, then do so. The Server must be restarted after.
				if (ex instanceof javax.net.ssl.SSLHandshakeException) {
					if (ex.toString().indexOf("Certificate chaining error") >= 0) {
						this.throwException("You must restart the SDI server in order for the imported certificate to be trusted.")
					}
					this.getCertificate();
					retry = true;
				} else {
					throw ex;
				}	
			}
		} while (retry);
		
		if (this.debug) {
			this.logDetails({msg : "Response from itim", 
						obj : this.httpEntry(retEntry),
					    entry : retEntry});
		}
		
		return reply;
	}
	
	// Get the client certificate from the server and import it to the TDI keystore
	this.getCertificate = function() {
		var msg = com.ibm.di.security.GetSSLCertificate.installCertificateFrom(baseurl, 443);
	}
	
	// Get the authentication token
	this.getToken = function() {
		var reply = this.makeRequest({
				token: true, // Getting a token
				verb: "POST",
				url: this.authUrl,
				ctype: "application/json",
				where: "getToken()",
				headers: {
					Authorization: "Bearer " + this.apikey
				},
				body: {
					username: this.username,
					password: this.password
				}
		});
		
		this.token = reply.csrftoken || "";
		this.sessionId = reply.sessionId || ""
	}

	this.logDetails = function(params, sent) {
		sent = sent || false;
		var msg = params.msg;
		var obj = params.obj; 
		var url = params.url;
		var verb = params.verb;
		var ctype = params.ctype; 
		var where = params.where;
		
		if (msg == null) {
			msg = "*unknown entry*";
		}
	
		var s = new java.lang.StringBuffer();
		
		if (where != null) {
			s.append("\n@@@------> (" + where + ") " + msg);
		} else {
			s.append("\n---------> " + msg);
		}
		
		
		if (verb != null) { s.append("   " + verb.toUpperCase()); } 
		if (ctype != null) { s.append("   " + ctype); } 
		if (url != null) { s.append("   " + url); } 
		s.append("\n");
	
		if (obj != null) {
			if (obj instanceof com.ibm.di.entry.Entry) {	
				s.append(this.httpEntry(obj, sent))	
			} else {
				s.append(obj.toString());
			}
		}	
	
		this.logmsg(s.toString());
	}

	this.logmsg = function(lvl, msg) {
		if (typeof(lvl) == "undefined") {
			msg = ""
			lvl = "INFO"
		} else
		if (typeof(msg) == "undefined") {
			msg = lvl
			lvl = "INFO"
		}
		
		if (lvl.toLowerCase().startsWith("console")) {
			java.lang.System.out.println(msg)
			lvl = "INFO"
			msg = "(CONSOLE) " + msg
		}	
		task.logmsg(lvl, msg)
	}
	
	this.throwException = function(msg) {
		throw new java.lang.IllegalArgumentException(msg);
	}

	// Checks the validity of the reply and sets up for Iteration
	this.parseReply = function(replyEntry) {
		if (replyEntry === null) { return } 
		
		var status = replyEntry.getString("http.responseCode");
	
		// Check the return status
		if (status == "401") { // Unauthorized - time to renew the token
			throwException("Unauthorized")
		}
		if (!status.startsWith("2")) {
			throwException("Error response from ITIM. Response code: " 
								+ status
								+ "    Message: " + replyEntry.getString("http.responseMsg"));
		}
		
		// Now parse the body
		var body = replyEntry.getString("http.bodyAsString");
	
		try {
			var reply = fromJson(body);
		} catch (ex) {
			throwException("Error parsing return payload from itim: " + ex.toString()
							+ "\n*** dump of reply ***\n" 
							+ replyEntry)
		}
			
		return reply;
	}
	
	// Left justified text
	this.LJ = function(txt, len) {
		txt = txt || "";
		len = len || txt.length;
		return (txt + "                                                       ").substring(0, len)
	}
	
	this.httpEntry = function(entry, sent) {
		sent = sent || false;
		var txt = sent ? "--->>>> Request:\n" : "<<<<--- Response:\n";
	
		for (var att in entry) {
			var name = att.getName();
			var val = att.getValue();
			if (val && name.indexOf("tcp.") < 0 
				&& typeof val != "object" && typeof val !=  "com.ibm.di.entry.Attribute" 
				&& !(val instanceof Array) && !val.startsWith("[B@")) {
				txt += "  " + this.LJ(name + ": ", 25) + val + "\n"
			}
		}
		
		return txt
	}
}]]></parameter>
        </Script>
    <Script name="HTTPCLIENT class 20250119 2013 renaming to RESTCLIENT">
            <ModTime>1737313648267</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[// 20250116 1116 Created

// This is the class that provides methods for making HTTP requests

function RESTCLIENT(args) {
	this.baseUrl = args.baseUrl || throwException("HTTPClient constructor requires the baseUrl argument");
	this.schemaUrl = args.schemaUrl || throwException("HTTPClient constructor requires the schemaUrl argument");
	this.authUrl = args.authUrl || "";
	this.apikey = args.apikey || "";
	this.username = args.username || "";
	this.password = args.password || "";
	this.debug = args.debug || true;
	
	// The HTTP Client Connector to use
	this.http = system.getConnector("ibmdi.HTTPClient");
	
	// Member variables
	this.requestEntry = system.newEntry();
	this.token = null;
	this.sessionId = null;
	
	// HTTP Client call method. The first lines of code show you the parameters you can send
	this.makeRequest = function(params) {
		var verb = params.verb || "GET";
		var url = params.url || this.throwException("makeRequest called with no URL");
		var body = params.body || null;
		var ctype = params.ctype || "application/json";
		var where = params.where || "";
		var headers = params.headers || {};
		var gettingToken = params.token || false;
		var username = params.username || "";
		var password = params.password || "";
		
		this.requestEntry.removeAllAttributes();
		
		// Get token if necessary
		if (!this.token && !gettingToken) {
			this.getToken();
		} 
			
		// Add auth artifacts
		if (!gettingToken) {
			this.requestEntry["http.X-CSRV-TOKEN"] = this.token;
			if (this.sessionId) this.requestEntry["http.sessionId"] = this.sessionId;
		}
		
		// Prepend the host (baseURL) if not already there
		if (url.toLowerCase().indexOf(this.baseUrl.toLowerCase()) < 0) {
			url = this.baseUrl + "/" + url;
		}
		
		// If a body is passed, this must be a POST (I think)
		if (typeof body !== "undefined" && body !== null) {
			verb = "POST";
	
			if (typeof body != "string") {
				this.requestEntry["http.body"] = toJson(body);
			} else {
				this.requestEntry["http.body"] = body;
			}
		}	
		
		// Set up the global HTTP Connector
		this.http.setParam("method", verb.toUpperCase());
		this.http.setParam("url", url);
		this.http.setParam("username", username);
		this.http.setParam("password", password);
	
		// Now set up the request entry
		this.requestEntry["http.url"] = url;
		this.requestEntry["http.method"] = verb.toUpperCase();
		this.requestEntry["http.Content-Type"] = ctype;
		this.requestEntry["http.remote_user"] = username;
		this.requestEntry["http.remote_password"] = password;
		
		for (var hdr in headers) {
			this.requestEntry["http." + hdr] = headers[hdr]
		}
		
		if (this.debug) {
			this.logDetails({msg : "Request to itim", 
						obj : this.httpEntry(this.requestEntry, true), 
						url : url, 
						verb : verb, 
						ctype : ctype, 
						where : where,
						sent: true});
		}
	
		// Reinitialize the HTTP Client connector so the updated parameters are applied
		this.http.terminate();
		this.http.initialize(null);
	
		// Make the call
		do {
			var retry = false;
			try {	
				var retEntry = this.http.queryReply(this.requestEntry);
				var reply = this.parseReply(retEntry);
			} catch (ex) {
				// If the token has expired, get a new one
				if (ex.toString().indexOf("Unauthorized") >= 0) {
					this.getToken();
					retry = true
				} else
				// Else if we first must import the client cert, then do so. The Server must be restarted after.
				if (ex instanceof javax.net.ssl.SSLHandshakeException) {
					if (ex.toString().indexOf("Certificate chaining error") >= 0) {
						this.throwException("You must restart the SDI server in order for the imported certificate to be trusted.")
					}
					this.getCertificate();
					retry = true;
				} else {
					throw ex;
				}	
			}
		} while (retry);
		
		if (this.debug) {
			this.logDetails({msg : "Response from itim", 
						obj : this.httpEntry(retEntry),
					    entry : retEntry});
		}
		
		return reply;
	}
	
	// Get the client certificate from the server and import it to the TDI keystore
	this.getCertificate = function() {
		var msg = com.ibm.di.security.GetSSLCertificate.installCertificateFrom(baseurl, 443);
	}
	
	// Get the authentication token
	this.getToken = function() {
		var reply = this.makeRequest({
				token: true, // Getting a token
				verb: "POST",
				url: this.authUrl,
				ctype: "application/json",
				where: "getToken()",
				headers: {
					Authorization: "Bearer " + this.apikey
				},
				body: {
					username: this.username,
					password: this.password
				}
		});
		
		this.token = reply.csrftoken || "";
		this.sessionId = reply.sessionId || ""
	}

	this.logDetails = function(params, sent) {
		sent = sent || false;
		var msg = params.msg;
		var obj = params.obj; 
		var url = params.url;
		var verb = params.verb;
		var ctype = params.ctype; 
		var where = params.where;
		
		if (msg == null) {
			msg = "*unknown entry*";
		}
	
		var s = new java.lang.StringBuffer();
		
		if (where != null) {
			s.append("\n@@@------> (" + where + ") " + msg);
		} else {
			s.append("\n---------> " + msg);
		}
		
		
		if (verb != null) { s.append("   " + verb.toUpperCase()); } 
		if (ctype != null) { s.append("   " + ctype); } 
		if (url != null) { s.append("   " + url); } 
		s.append("\n");
	
		if (obj != null) {
			if (obj instanceof com.ibm.di.entry.Entry) {	
				s.append(this.httpEntry(obj, sent))	
			} else {
				s.append(obj.toString());
			}
		}	
	
		this.logmsg(s.toString());
	}

	this.logmsg = function(lvl, msg) {
		if (typeof(lvl) == "undefined") {
			msg = ""
			lvl = "INFO"
		} else
		if (typeof(msg) == "undefined") {
			msg = lvl
			lvl = "INFO"
		}
		
		if (lvl.toLowerCase().startsWith("console")) {
			java.lang.System.out.println(msg)
			lvl = "INFO"
			msg = "(CONSOLE) " + msg
		}	
		task.logmsg(lvl, msg)
	}
	
	this.throwException = function(msg) {
		throw new java.lang.IllegalArgumentException(msg);
	}

	// Checks the validity of the reply and sets up for Iteration
	this.parseReply = function(replyEntry) {
		if (replyEntry === null) { return } 
		
		var status = replyEntry.getString("http.responseCode");
	
		// Check the return status
		if (status == "401") { // Unauthorized - time to renew the token
			throwException("Unauthorized")
		}
		if (!status.startsWith("2")) {
			throwException("Error response from ITIM. Response code: " 
								+ status
								+ "    Message: " + replyEntry.getString("http.responseMsg"));
		}
		
		// Now parse the body
		var body = replyEntry.getString("http.bodyAsString");
	
		try {
			var reply = fromJson(body);
		} catch (ex) {
			throwException("Error parsing return payload from itim: " + ex.toString()
							+ "\n*** dump of reply ***\n" 
							+ replyEntry)
		}
			
		return reply;
	}
	
	// Left justified text
	this.LJ = function(txt, len) {
		txt = txt || "";
		len = len || txt.length;
		return (txt + "                                                       ").substring(0, len)
	}
	
	this.httpEntry = function(entry, sent) {
		sent = sent || false;
		var txt = sent ? "--->>>> Request:\n" : "<<<<--- Response:\n";
	
		for (var att in entry) {
			var name = att.getName();
			var val = att.getValue();
			if (val && name.indexOf("tcp.") < 0 
				&& typeof val != "object" && typeof val !=  "com.ibm.di.entry.Attribute" 
				&& !(val instanceof Array) && !val.startsWith("[B@")) {
				txt += "  " + this.LJ(name + ": ", 25) + val + "\n"
			}
		}
		
		return txt
	}
}]]></parameter>
        </Script>
        
    
    
    
    <Script name="__testService_getReturn">
            <ModTime>1735932935073</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[[
  {
    "_embedded": {
      "erservice": {
        "_links": {
          "statusDetails": {
            "href": "/itim/rest/services/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMixvdT1zZXJ2aWNlcyxlcmdsb2JhbGlkPTAwMDAwMDAwMDAwMDAwMDAwMDAwLG91PW9yZyxkYz1jb20/statusdetails",
            "title": "statusDetails"
          },
          "self": {
            "href": "/itim/rest/services/ZXJnbG9iYWxpZD0wMDAwMDAwMDAwMDAwMDAwMDAwMixvdT1zZXJ2aWNlcyxlcmdsb2JhbGlkPTAwMDAwMDAwMDAwMDAwMDAwMDAwLG91PW9yZyxkYz1jb20",
            "title": "ITIM Service"
          }
        },
        "_attributes": {
          "erservicename": "ITIM Service"
        }
      }
    },
    "_links": {
      "self": {
        "href": "/itim/rest/accounts/ZXJ1aWQ9YXNtaXRoLG91PXN5c3RlbVVzZXIsb3U9aXRpbSxvdT1vcmcsZGM9Y29t",
        "title": "asmith"
      }
    },
    "_attributes": {
      "eruid": "asmith"
    }
  }
]]]></parameter>
        </Script>
    
    <Script name="RESTCLIENT class 20250127 1858 Working. Now selectEntries plus">
            <ModTime>1738000566987</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[// 20250116 1116 Created
// 20250121 1146 Finishing (I hope) the creation of this Class - vrs.0.9
// 20250121 2104 RestClientConnector form working! RESTCLIENT class doing its job both in the test AL and in the Form
// 20250123 1819 Tightening up code

// This is the class that provides methods for making HTTP requests

function RESTCLIENT(args) {
	this.baseUrl = (args.baseUrl || "").trim();
	this.schemaUrl = args.schemaUrl;
	this.authUrl = args.authUrl || "";
	this.apikey = args.apikey || "";
	this.username = args.username || "";
	this.password = args.password || "";
	this.debug = false //args.debug || false;
	
	// The HTTP Client Connector to use
	this.http = system.getConnector("ibmdi.HTTPClient");
	
	// Member variables
	this.requestEntry = system.newEntry();
	
	this.token = null;
	this.sessionId = null;
	
	// Own logmsg() to aid in debugging
	this.logmsg = function(lvl, msg) {
		if (!lvl) { // undefined, and allows just a call to this.logmsg() to log a carriage return
			lvl = "INFO";
			msg = ""
		} else
		if (!msg) {
			msg = lvl;
			lvl = "INFO"
		}
		
		if ("DEBUG".equalsIgnoreCase(lvl)) {
			// Write to console out also
			java.lang.System.out.println("|" + this.LJ(lvl,5) + "| " + msg);
		}
		
		//if (form && this.debug) this.alert("RESTCLIENT.logmsg: " + msg);
		//this.alert("task: " + (typeof task) + " - " + (task instanceof com.ibm.di.server.AssemblyLine));
		
		// This to allow it to be used by Connector Form Event script
		//if (task && task instanceof com.ibm.di.server.AssemblyLine) 	task.logmsg(lvl, msg)
		main.logmsg(lvl, msg);
		java.lang.System.out.println(msg)
	}

	// REST Client http-call method. The first lines of code show you the parameters you can send in the 'param' JS object
	this.makeRequest = function(params) {
		// Get token if necessary
		if (!this.token && !params.token) {
			this.getToken();
		} 
		
		//if (form && this.debug) this.alert("RESTCLIENT.makeRequest(" + toJson(params) + "}");
			
		// Here come the various local variables set from parameters passed OR default values
		var verb = params.verb || "GET";
		var url = params.url || this.throwException("makeRequest called with no URL");
		var body = params.body || null;
		var ctype = params.ctype || "application/json";
		var where = params.where || "";
		var headers = params.headers || {};
		var gettingToken = params.token || false;
		var username = params.username || "";
		var password = params.password || "";
		
		var alreadyImportedCert = false;
		
		if (url && !url.startsWith("/")) url = "/" + url;
		
		// Empty out the requestEntry before setting it up for the call
		this.requestEntry.removeAllAttributes();
		
		// Add auth artifacts
		if (!gettingToken) {
			this.requestEntry["http.X-CSRV-TOKEN"] = this.token;
			if (this.sessionId) this.requestEntry["http.sessionId"] = this.sessionId;
		}
		
		// Prepend the host (baseURL) if not already there
		if (url.toLowerCase().indexOf(this.baseUrl.toLowerCase()) < 0) {
			url = this.baseUrl + url;
		}
		
		// If a body is passed, this must be a POST (I think)
		if (typeof body !== "undefined" && body !== null) {
			verb = "POST";
	
			if (typeof body != "string") {
				this.requestEntry["http.body"] = toJson(body);
			} else {
				this.requestEntry["http.body"] = body;
			}
		}	
		
		// Set up the global HTTP Connector
		this.http.setParam("method", verb.toUpperCase());
		this.http.setParam("url", url);
		this.http.setParam("username", username);
		this.http.setParam("password", password);
	
		// Now set up the request entry
		this.requestEntry["http.url"] = url;
		this.requestEntry["http.method"] = verb.toUpperCase();
		this.requestEntry["http.Content-Type"] = ctype;
		this.requestEntry["http.remote_user"] = username;
		this.requestEntry["http.remote_password"] = password;
		
		this.requestEntry["http.Accept"] = "application/json";
		this.requestEntry["http.Connection"] = "keep-alive";
		
		
		for (var hdr in headers) {
			this.requestEntry["http." + hdr] = headers[hdr]
		}
		
		if (this.debug) {
			this.logDetails({msg : "Request to itim", 
						obj : this.httpEntry(this.requestEntry, true), 
						url : url, 
						verb : verb, 
						ctype : ctype, 
						where : where,
						sent: true});
		}
	
		// Reinitialize the HTTP Client connector so the updated parameters are applied
		this.http.terminate();
		this.http.initialize(null);
	
		alreadyImportedCert = false; 
	
		// Make the call
		do {
			var retry = false;
			try {	
				this.alert("\nMaking call:" + this.requestEntry + "\n");
				
				var retEntry = this.http.queryReply(this.requestEntry);

				var reply = this.parseReply(retEntry);
			} catch (ex) {
				//if (form && this.debug) this.alert("Exception: " + ex);
				
				// If the token has expired, get a new one
				if (ex.toString().indexOf("Unauthorized") >= 0) {
					this.getToken();
					retry = true
				} else
				// Else if we first must import the client cert, then do so. The Server must be restarted after.
				if (ex instanceof javax.net.ssl.SSLHandshakeException) {
					if ((ex.toString().indexOf("Certificate chaining error") >= 0) && alreadyImportedCert) {
						this.throwException("You must restart the SDI server in order for the imported certificate to be trusted.")
					}
					this.getCertificate();
					alreadyImportedCert = true;
					retry = true;
				} else {
					throw ex;
				}	
			}
		} while (retry);
		
		retEntry["http.url"] = "http://" + retEntry["http.host"] + retEntry["http.base"];
		retEntry.removeAttribute("http.url");
		retEntry.removeAttribute("http.base");
		retEntry.removeAttribute("http.host");
		retEntry.removeAttribute("http.method");
		
		if (this.debug) {
			this.logDetails({msg : "Response from itim", 
						obj : this.httpEntry(retEntry),
					    entry : retEntry});
		}
		
		//if (form && this.debug) this.alert("reply: " + toJson(reply));
		
		return reply;
	}
	
	// Handle alerting
	this.alert = function(msg) {
		main.logmsg(msg);
		java.lang.System.out.println(msg)
	}	
		
	
	// Get the client certificate from the server and import it to the TDI keystore
	this.getCertificate = function() {
		this.logmsg("! Getting client cert");
		var msg = com.ibm.di.security.GetSSLCertificate.installCertificateFrom(this.baseUrl, 443);
		this.logmsg("! Result: " + msg)
	}
	
	// Get the authentication token
	this.getToken = function() {
		var reply = this.makeRequest({
				token: true, // Getting a token
				verb: "POST",
				url: this.authUrl,
				ctype: "application/json",
				where: "getToken()",
				headers: {
					Authorization: "Bearer " + this.apikey
				},
				body: {
					username: this.username,
					password: this.password
				}
		});
		
		this.token = reply.csrftoken || "";
		this.sessionId = reply.sessionId || ""
	}

	this.logDetails = function(params, sent) {
		sent = sent || false;
		var msg = params.msg;
		var obj = params.obj; 
		var url = params.url;
		var verb = params.verb;
		var ctype = params.ctype; 
		var where = params.where;
		
		if (msg == null) {
			msg = "*unknown entry*";
		}
	
		var s = new java.lang.StringBuffer();
/*		
		if (where != null) {
			s.append("\n<<" + where + ">> " + msg);
		} else {
			s.append("\n---------> " + msg);
		}
*/		
		
		if (verb != null) { s.append("   " + verb.toUpperCase()); } 
		if (ctype != null) { s.append("   " + ctype); } 
		if (url != null) { s.append("   " + url); } 
		s.append("\n");
	
		if (obj != null) {
			if (obj instanceof com.ibm.di.entry.Entry) {	
				s.append(this.httpEntry(obj, sent))	
			} else {
				s.append(obj.toString());
			}
		}	
	
		this.logmsg(s.toString());
	}

	this.throwException = function(msg) {
		throw new java.lang.Exception(msg);
	}

	// Checks the validity of the reply and sets up for Iteration
	this.parseReply = function(replyEntry) {
		if (replyEntry === null) { return } 
		
		var status = replyEntry.getString("http.responseCode");
	
		// Check the return status
		if (status == "401") { // Unauthorized - time to renew the token
			this.throwException("Unauthorized")
		}
		if (!status.startsWith("2")) {
			this.throwException("Error response from ITIM. Response code: " 
								+ status
								+ "    Message: " + replyEntry.getString("http.responseMsg"));
		}
		
		// Now parse the body
		var body = replyEntry.getString("http.bodyAsString");
	
		try {
			var reply = fromJson(body);
		} catch (ex) {
			this.throwException("Error parsing return payload from itim: " + ex.toString()
							+ "\n*** dump of reply ***\n" 
							+ replyEntry)
		}
			
		return reply;
	}
	
	// Left justified text
	this.LJ = function(txt, len) {
		txt = txt || "";
		len = len || txt.length;
		return (txt + "                                                       ").substring(0, len)
	}
	
	// Returns a string with legible listing of important attributes and their values
	this.httpEntry = function(entry, sent) {
		sent = sent || false;
		var txt = sent ? "--->>>> Request:\n" : "<<<<--- Response:\n";
	
		for (var att in entry) {
			var name = att.getName();
			var val = att.getValue();
			if (val && name.indexOf("tcp.") < 0 
				&& typeof val != "object" && typeof val !=  "com.ibm.di.entry.Attribute" 
				&& !(val instanceof Array) && !val.startsWith("[B@")) {
				txt += "  " + this.LJ(name + ": ", 25) + val + "\n"
			}
		}
		
		return txt
	}
}]]></parameter>
        </Script>
        <Script name="SCHEMA class 20250127 1858 Working. Now selectEntries plus">
            <ModTime>1738000209197</ModTime>
            <parameter name="enabled">true</parameter>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[// 20250121 1145 Change parseOpenAPIschema so the argument openApiSchema can be either JSON or JS object

function SCHEMA(schema, format) {
	_WHERE = "SCHEMA class";	/* Global variable available for error reporting */
	this.name = "SCHEMA";
	this.schemaObj = {};
	
	/* Main init logic after method definitions

       The name says it all. Returns a JS Obj */
       
    this.parseOpenAPIschema = function(openApiSchema) {
    	if (typeof(openApiSchema) != "string") return openApiSchema;
    	
        openApiSchema = openApiSchema.trim();
        var jsonString = "";

        /* Load Jackson libraries */
        var ObjectMapper = com.fasterxml.jackson.databind.ObjectMapper;
        var objectMapper = new ObjectMapper();

		if (openApiSchema.startsWith("{") && openApiSchema.endsWith("}")) {
			// overriding above arguments - for now
			this.format = "JSON"
		} else {
			this.format = "YAML"
		}

        /* Check if YAML and if so, convert to Json */
        if ("YAML".equalsIgnoreCase(this.format)) {
            /* Use SnakeYAML to convert the YAML to a map that the ObjectMapper can read */
            var Yaml = Packages.org.yaml.snakeyaml.Yaml;
            /* Create instances of Yaml and ObjectMapper */
            var yaml = new Yaml();
            /* Parse YAML into a Java Map */
            var map = yaml.load(openApiSchema);

            /* Convert Java Map to JSON string */
            jsonString = objectMapper.writeValueAsString(map)
        } else {
            jsonString = openApiSchema;
        }

        this.schemaObj = fromJson(jsonString);
        return this.schemaObj
    }

	/*
		Parses the path and returns the name of the embedded UID attribute in the URL
	*/
	this.getEmbeddedUID = function(path) {
		var parts = system.splitString(path, "/");
		
		for (var i = 0; i < parts.length; i++) {
			var part = parts[i].trim();
			if (part.startsWith("{") && part.endsWith("}")) {
				// Found an embedded uid
				return part.substring(1, part.length-1)
			}
		}
		return null
	}

	/*
		Replaces the uid placeholder in the URL path with the uid value passed
	*/
	this.replaceEmbeddedUID = function(path, entry) {
		var parts = system.splitString(path, "/");
		var newPath = [parts[0]];
		
		for (var i = 1; i < parts.length; i++) {
			var part = parts[i].trim();
			if (part.startsWith("{") && part.endsWith("}")) {
				// Found an embedded uid
				var embeddedUID = part.substring(1, part.length-1);
				var uidValue = entry[embeddedUID] || null;
				if (!uidValue) {
					throw new java.lang.Exception("UID attribute not mapped out or is null: " + embeddedUID)
				}	
				newPath.push(uidValue)
			} else {
				newPath.push(part)
			}
		}
		return newPath.join("/")
	}
	
	/*
		Uses .getChildren() to return the parameters array for the chosen path and action.
	*/
	this.getParameters = function(path, action) {
		var params = this.getChildren(["paths", path, action, "parameters"])
		return params
	}
	
    /* Returns the child elements (JS Obj) of the specified path
       Root level if no argument or blank text passed. Always return a JS object
    */
    this.getChildren = function(path) { 
        //var children = {};
        var subtree;
        
        if (!path) {
        	path = []
        }
        else 
        if (!(path instanceof Array)) {
        	path = [path]	
        }
        
        subtree = this.schemaObj[path[0]];
        for (var i = 1; i < path.length && subtree; i++) {
        	if (!subtree[path[i]]) { // This could be an array, so lets look for where we can find path[i]
        		if (subtree instanceof Array) {
	        		for (var j = 0; j < subtree.length; j++) {
	        			if (subtree[j][path[i]]) {
	        				subtree = subtree[j][path[i]];
	        				break
	        			}
	        		}
        		}
        		
        		// subtree does not exist
        		subtree = {}; // return empty
        	} else {
        		subtree = subtree[path[i]]
        	}
        }
        
        if (subtree instanceof Array) { // If it is an array, then it is parameters, so retrun as an object
        	// Make an object
        	var retTree = {};
        	for (var i = 0; i < subtree.length; i++) {
        		var param = subtree[i];
        		retTree[param.name] = param
        	}
        	return retTree
        }

        return subtree;
    }
    
    /* Main init logic */
    this.schemaArg = schema;
    this.format = format || "YAML";
    this.schemaObj = this.parseOpenAPIschema(schema)
}]]></parameter>
        </Script>
    <Script name="SCHEMA class 20250128 1552 replaceEmbeddedUID() working as desired">
            <ModTime>1738073864858</ModTime>
            <parameter name="enabled">true</parameter>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[// 20250121 1145 Change parseOpenAPIschema so the argument openApiSchema can be either JSON or JS object
// 20250128 1452 Updated replaceEmbeddedUID() to accept either an Entry or a string value as the criteria argument

function SCHEMA(schema, format) {
	_WHERE = "SCHEMA class";	/* Global variable available for error reporting */
	this.name = "SCHEMA";
	this.schemaObj = {};
	
	/* Main init logic after method definitions

       The name says it all. Returns a JS Obj */
       
    this.parseOpenAPIschema = function(openApiSchema) {
    	if (typeof(openApiSchema) != "string") return openApiSchema;
    	
        openApiSchema = openApiSchema.trim();
        var jsonString = "";

        /* Load Jackson libraries */
        var ObjectMapper = com.fasterxml.jackson.databind.ObjectMapper;
        var objectMapper = new ObjectMapper();

		if (openApiSchema.startsWith("{") && openApiSchema.endsWith("}")) {
			// overriding above arguments - for now
			this.format = "JSON"
		} else {
			this.format = "YAML"
		}

        /* Check if YAML and if so, convert to Json */
        if ("YAML".equalsIgnoreCase(this.format)) {
            /* Use SnakeYAML to convert the YAML to a map that the ObjectMapper can read */
            var Yaml = Packages.org.yaml.snakeyaml.Yaml;
            /* Create instances of Yaml and ObjectMapper */
            var yaml = new Yaml();
            /* Parse YAML into a Java Map */
            var map = yaml.load(openApiSchema);

            /* Convert Java Map to JSON string */
            jsonString = objectMapper.writeValueAsString(map)
        } else {
            jsonString = openApiSchema;
        }

        this.schemaObj = fromJson(jsonString);
        return this.schemaObj
    }

	/*
		Parses the path and returns the name of the embedded UID attribute in the URL
	*/
	this.getEmbeddedUID = function(path) {
		var parts = system.splitString(path, "/");
		
		for (var i = 0; i < parts.length; i++) {
			var part = parts[i].trim();
			if (part.startsWith("{") && part.endsWith("}")) {
				// Found an embedded uid
				return part.substring(1, part.length-1)
			}
		}
		return null
	}

	/*
		Replaces the uid placeholder in the URL path with the uid value passed
 		The criteria argument is either an Entry or a string value
	*/
	this.replaceEmbeddedUID = function(path, criteria) {
		var parts = system.splitString(path, "/");
		var newPath = [parts[0]];
		
		for (var i = 1; i < parts.length; i++) {
			var part = parts[i].trim();
			if (part.startsWith("{") && part.endsWith("}")) {
				// Found an embedded uid
				var embeddedUID = part.substring(1, part.length-1);
				
				// If criteria is an Entry then grab the attribute value, else use the parameter value itself
				var uidValue = (criteria instanceof com.ibm.di.entry.Entry) ? entry[embeddedUID] : criteria;
				
				if (!uidValue) {
					throw new java.lang.Exception("UID attribute not mapped out or is null: " + embeddedUID)
				}	
				newPath.push(uidValue)
			} else {
				newPath.push(part)
			}
		}
		return newPath.join("/")
	}
	
	/*
		Uses .getChildren() to return the parameters array for the chosen path and action.
	*/
	this.getParameters = function(path, action) {
		var params = this.getChildren(["paths", path, action, "parameters"])
		return params
	}
	
    /* Returns the child elements (JS Obj) of the specified path
       Root level if no argument or blank text passed. Always return a JS object
    */
    this.getChildren = function(path) { 
        //var children = {};
        var subtree;
        
        if (!path) {
        	path = []
        }
        else 
        if (!(path instanceof Array)) {
        	path = [path]	
        }
        
        subtree = this.schemaObj[path[0]];
        for (var i = 1; i < path.length && subtree; i++) {
        	if (!subtree[path[i]]) { // This could be an array, so lets look for where we can find path[i]
        		if (subtree instanceof Array) {
	        		for (var j = 0; j < subtree.length; j++) {
	        			if (subtree[j][path[i]]) {
	        				subtree = subtree[j][path[i]];
	        				break
	        			}
	        		}
        		}
        		
        		// subtree does not exist
        		subtree = {}; // return empty
        	} else {
        		subtree = subtree[path[i]]
        	}
        }
        
        if (subtree instanceof Array) { // If it is an array, then it is parameters, so retrun as an object
        	// Make an object
        	var retTree = {};
        	for (var i = 0; i < subtree.length; i++) {
        		var param = subtree[i];
        		retTree[param.name] = param
        	}
        	return retTree
        }

        return subtree;
    }
    
    /* Main init logic */
    this.schemaArg = schema;
    this.format = format || "YAML";
    this.schemaObj = this.parseOpenAPIschema(schema)
}]]></parameter>
        </Script>
    <Script name="RESTCLIENT class 20250318">
            <ModTime>1742478684498</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[// 20250116 1116 Created
// 20250121 1146 Finishing (I hope) the creation of this Class - vrs.0.9
// 20250121 2104 RestClientConnector form working! RESTCLIENT class doing its job both in the test AL and in the Form
// 20250123 1819 Tightening up code
// 20250128 2122 Fixing httpEntry() so it does not fail on argument = null
// 20250130 1243 Making sure this class works both inside and outside a Connector
// 20250131 1942 Made this.logmsg() write to both System.out and main.logmsg

// This is the class that provides methods for making HTTP requests

function RESTCLIENT(args) {
	this.baseUrl = (args.baseUrl || "").trim();
	this.authUrl = args.authUrl || "";
	this.apikey = args.apikey || "";
	this.username = args.username || ""; 
	this.password = args.password || "";
	this.debug = true //args.debug || false;
	
	// The HTTP Client Connector to use
	this.http = system.getConnector("ibmdi.HTTPClient");
	
	// Member variables
	this.requestEntry = system.newEntry();
	
	this.token = null;
	this.sessionId = null;
	
	// Own logmsg() to aid in debugging
	this.logmsg = function(lvl, msg) {
		if (!lvl) { // undefined, and allows just a call to this.logmsg() to log a carriage return
			lvl = "INFO";
			msg = ""
		} else
		if (!msg) {
			msg = lvl;
			lvl = "INFO"
		}
		
		if ("DEBUG".equalsIgnoreCase(lvl)) {
			// Write to console out also
			java.lang.System.out.println("|" + this.LJ(lvl,5) + "| " + msg);
		}
		
		//if (form && this.debug) this.alert("RESTCLIENT.logmsg: " + msg);
		//this.alert("task: " + (typeof task) + " - " + (task instanceof com.ibm.di.server.AssemblyLine));
		
		// This to allow it to be used by Connector Form Event script
		//if (task && task instanceof com.ibm.di.server.AssemblyLine) 	task.logmsg(lvl, msg)
		main.logmsg(lvl, msg);
		java.lang.System.out.println(((lvl == "INFO") ? "" : lvl) + msg)
	}

	// REST Client http-call method. The first lines of code show you the parameters you can send in the 'param' JS object
	this.makeRequest = function(params) {
		// Get token if necessary
		if (!this.token && !params.token) {
			this.getToken();
		} 
		
		//if (form && this.debug) this.alert("RESTCLIENT.makeRequest(" + toJson(params) + "}");
			
		// Here come the various local variables set from parameters passed OR default values
		var verb = params.verb || "GET";
		var url = params.url || this.throwException("makeRequest called with no URL");
		var body = params.body || null;
		var ctype = params.ctype || "application/json";
		var where = params.where || "";
		var headers = params.headers || {};
		var gettingToken = params.token || false;
		var username = params.username || "";
		var password = params.password || "";
		
		var alreadyImportedCert = false;
		
		if (url && !url.startsWith("/")) url = "/" + url;
		
		// Empty out the requestEntry before setting it up for the call
		this.requestEntry.removeAllAttributes();
		
		// Add auth artifacts
		if (!gettingToken) {
			this.requestEntry["http.X-CSRV-TOKEN"] = this.token;
			if (this.sessionId) this.requestEntry["http.sessionId"] = this.sessionId;
		}
		
		// Prepend the host (baseURL) if not already there
		if (url.toLowerCase().indexOf(this.baseUrl.toLowerCase()) < 0) {
			url = this.baseUrl + url;
		}
		
		// If a body is passed, this must be a POST (I think)
		if (typeof body !== "undefined" && body !== null) {
			verb = "POST";
	
			if (typeof body != "string") {
				this.requestEntry["http.body"] = toJson(body);
			} else {
				this.requestEntry["http.body"] = body;
			}
		}	
		
		// Set up the global HTTP Connector
		this.http.setParam("method", verb.toUpperCase());
		this.http.setParam("url", url);
		this.http.setParam("username", username);
		this.http.setParam("password", password);
	
		// Now set up the request entry
		this.requestEntry["http.url"] = url;
		this.requestEntry["http.method"] = verb.toUpperCase();
		this.requestEntry["http.Content-Type"] = ctype;
		this.requestEntry["http.remote_user"] = username;
		this.requestEntry["http.remote_password"] = password;
		
		this.requestEntry["http.Accept"] = "application/json";
		this.requestEntry["http.Connection"] = "keep-alive";
		
		
		for (var hdr in headers) {
			this.requestEntry["http." + hdr] = headers[hdr]
		}
		
		if (this.debug) {
			this.logDetails({msg : "Request to itim", 
						obj : this.httpEntry(this.requestEntry, true), 
						url : url, 
						verb : verb, 
						ctype : ctype, 
						where : where,
						sent: true});
		}
	
		// Reinitialize the HTTP Client connector so the updated parameters are applied
		this.http.terminate();
		this.http.initialize(null);
	
		alreadyImportedCert = false; 
	
		// Make the call
		do {
			var retry = false;
			try {	
				this.alert("\nMaking call:" + this.requestEntry + "\n");
				
				var retEntry = this.http.queryReply(this.requestEntry);

				var reply = this.parseReply(retEntry);
			} catch (ex) {
				//if (form && this.debug) this.alert("Exception: " + ex);
				
				// If the token has expired, get a new one
				if (ex.toString().indexOf("Unauthorized") >= 0) {
					this.getToken();
					retry = true
				} else
				// Else if we first must import the client cert, then do so. The Server must be restarted after.
				if (ex instanceof javax.net.ssl.SSLHandshakeException) {
					if ((ex.toString().indexOf("Certificate chaining error") >= 0) && alreadyImportedCert) {
						this.throwException("You must restart the SDI server in order for the imported certificate to be trusted.")
					}
					this.getCertificate();
					alreadyImportedCert = true;
					retry = true;
				} else {
					throw ex;
				}	
			}
		} while (retry);
		
		retEntry["http.url"] = "http://" + retEntry["http.host"] + retEntry["http.base"];
		retEntry.removeAttribute("http.url");
		retEntry.removeAttribute("http.base");
		retEntry.removeAttribute("http.host");
		retEntry.removeAttribute("http.method");
		
		if (this.debug) {
			this.logDetails({msg : "Response from itim", 
						obj : this.httpEntry(retEntry),
					    entry : retEntry});
		}
		
		//if (form && this.debug) this.alert("reply: " + toJson(reply));
		
		return reply;
	}
	
	// Handle terminate to close the connector
	this.terminate = function() {
		this.http.terminate();
		this.token = null;
		this.sessionId = null
	}
	
	// Handle alerting - @@ DISABLED for now
	this.alert = function(msg) {
		if (!this.debug) continue;
		main.logmsg(msg);
		java.lang.System.out.println(msg)
	}	
		
	
	// Get the client certificate from the server and import it to the TDI keystore
	this.getCertificate = function() {
		this.logmsg("! Getting client cert");
		var msg = com.ibm.di.security.GetSSLCertificate.installCertificateFrom(this.baseUrl, 443);
		this.logmsg("! Result: " + msg)
	}
	
	// Get the authentication token
	this.getToken = function() {
		var reply = this.makeRequest({
				token: true, // Getting a token
				verb: "POST",
				url: this.authUrl,
				ctype: "application/json",
				where: "getToken()",
				headers: {
					Authorization: "Bearer " + this.apikey
				},
				body: {
					username: this.username,
					password: this.password
				}
		});
		
		this.token = reply.csrftoken || "";
		this.sessionId = reply.sessionId || ""
	}

	this.logDetails = function(params, sent) {
		sent = sent || false;
		var msg = params.msg;
		var obj = params.obj; 
		var url = params.url;
		var verb = params.verb;
		var ctype = params.ctype; 
		var where = params.where;
		
		if (!this.debug) continue;
		
		if (msg == null) {
			msg = "*unknown entry*";
		}
	
		var s = new java.lang.StringBuffer();
/*		
		if (where != null) {
			s.append("\n<<" + where + ">> " + msg);
		} else {
			s.append("\n---------> " + msg);
		}
*/		
		
		if (verb != null) { s.append("   " + verb.toUpperCase()); } 
		if (ctype != null) { s.append("   " + ctype); } 
		if (url != null) { s.append("   " + url); } 
		s.append("\n");
	
		if (obj != null) {
			if (obj instanceof com.ibm.di.entry.Entry) {	
				s.append(this.httpEntry(obj, sent))	
			} else {
				s.append(obj.toString());
			}
		}	
	
		this.logmsg(s.toString());
	}

	this.throwException = function(msg) {
		throw new java.lang.Exception(msg);
	}

	// Checks the validity of the reply and sets up for Iteration
	this.parseReply = function(replyEntry) {
		if (replyEntry === null) { return } 
		
		var status = replyEntry.getString("http.responseCode");
	
		// Check the return status
		if (status == "401") { // Unauthorized - time to renew the token
			this.throwException("Unauthorized")
		}
		if (!status.startsWith("2")) {
			this.throwException("Error response from ITIM. Response code: " 
								+ status
								+ "    Message: " + replyEntry.getString("http.responseMsg"));
		}
		
		// Now parse the body
		var body = replyEntry.getString("http.bodyAsString");
	
		try {
			var reply = fromJson(body);
		} catch (ex) {
			this.throwException("Error parsing return payload from itim: " + ex.toString()
							+ "\n*** dump of reply ***\n" 
							+ replyEntry)
		}
			
		return reply;
	}
	
	// Left justified text
	this.LJ = function(txt, len) {
		txt = txt || "";
		len = len || txt.length;
		return (txt + "                                                       ").substring(0, len)
	}
	
	// Returns a string with legible listing of important attributes and their values
	this.httpEntry = function(entry, sent) {
		if (!entry) return "";
		
		sent = sent || false;
		var txt = sent ? "--->>>> Request:\n" : "<<<<--- Response:\n";
	
		for (var att in entry) {
			var name = att.getName();
			var val = att.getValue();
			if (val && name.indexOf("tcp.") < 0 
				&& typeof val != "object" && typeof val !=  "com.ibm.di.entry.Attribute" 
				&& !(val instanceof Array) && !val.startsWith("[B@")) {
				txt += "  " + this.LJ(name + ": ", 25) + val + "\n"
			}
		}
		
		return txt
	}
}]]></parameter>
        </Script>
        <Script name="RESTCLIENT class">
            <ModTime>1742651077191</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[// 20250116 1116 Created
// 20250121 1146 Finishing (I hope) the creation of this Class - vrs.0.9
// 20250121 2104 RestClientConnector form working! RESTCLIENT class doing its job both in the test AL and in the Form
// 20250123 1819 Tightening up code
// 20250128 2122 Fixing httpEntry() so it does not fail on argument = null
// 20250130 1243 Making sure this class works both inside and outside a Connector
// 20250131 1942 Made this.logmsg() write to both System.out and main.logmsg
// 20250319 1452 Franz and I made some changes to makeRequest(), adding support for redirection
// 20250321 2041 Still working on it
// 20250322 1443 Working now! Added Franz's code, plus made cookie handling better
//
// This is the class that provides methods for making HTTP requests
//
// NOTES:
//			* It uses its own this.logmsg() for more control over logging

function RESTCLIENT(args) {
	this.baseUrl = (args.baseUrl || "").trim();
	this.authUrl = args.authUrl || "";
	this.apikey = args.apikey || "";
	this.username = args.username || ""; 
	this.password = args.password || "";
	this.debug = true //args.debug || false;
	this.cookieArrayList = new java.util.ArrayList();
	
	// The HTTP Client Connector to use
	this.http = system.getConnector("ibmdi.HTTPClient");
	
	// Member variables
	this.requestEntry = system.newEntry();
	
	this.token = null;
	this.sessionId = null;
	
	// Get the authentication token. Argument token tells makeRequest not to getToken, and skip parsing the body and instead return http.Set-Cookie
	this.getToken = function() {
		this.cookies = ""; // empty out cookies
		this.cookieArrayList.clear();
		
		// First get session id
		this.sessionId = this.makeRequest({
				token: true, // Getting a token
				returnValue: "cookie",
				verb: "GET",
				url: "/itim/restlogin/login.jsp", // @@TODO Should make this a parameter under Connections
				where: "getToken()"
		});
		
		// Now for the LTPAToken2
		this.token = this.makeRequest({
				token: true, // Getting a token
				returnValue: "cookie",
				verb: "POST",
				url: "/itim/j_security_check", // @@TODO Should make this a parameter under Connections
				ctype: "application/x-www-form-urlencoded",
				where: "getToken()",
				headers: {
					Authorization: "Bearer " + this.apikey
				},
				body: "j_username=" + this.username + "&j_password=" + this.password
		});
		
		// Get CSRFToken
		var reply = this.makeRequest({
				token: true, // Getting a token - or at least part of the process
				returnValue: "entry",
				verb: "GET",
				url: "/itim/rest/systemusers/me", // @@TODO Should make this a parameter under Connections
				ctype: "application/json",
				where: "getToken()",
				cookies: this.sessionId + "\n" + this.token
		});
		this.CSRFToken = reply.getString("http.CSRFToken")
	}
	
	// Get the currently set Cookies
	this.getCookies = function() {
		return this.cookieArrayList.toArray().join("; ")
	}	
	
	// REST Client http-call method. The first lines of code show you the parameters you can send in the 'param' JS object
	this.makeRequest = function(params) {
		// Get token if necessary
		if (!this.token && !params.token) {
			this.getToken();
		} 
		
		//if (form && this.debug) this.alert("RESTCLIENT.makeRequest(" + toJson(params) + "}");
			
		// Here come the various local variables set from parameters passed OR default values
		var verb = params.verb || "GET";
		var url = params.url || this.throwException("makeRequest called with no URL");
		var body = params.body || null;
		var ctype = params.ctype || "application/json";
		var where = params.where || "";
		var headers = params.headers || {};
		var gettingToken = params.token || false;
		var username = params.username || "";
		var password = params.password || "";
		
		var returnValue = params.returnValue || "JS object";
		
		var alreadyImportedCert = false;
		
		if (url && !url.startsWith("/")) url = "/" + url;
		
		// Empty out the requestEntry before setting it up for the call
		this.requestEntry.removeAllAttributes();
		
		// Prepend the host (baseURL) if not already there
		if (url.toLowerCase().indexOf(this.baseUrl.toLowerCase()) < 0) {
			if (this.baseUrl.endsWith("/")) {
				this.baseUrl = this.baseUrl.substring(0, this.baseUrl.length-1) // remove / at end of baseUrl if found
			}	
			url = this.baseUrl + url;
		}
		
		// If a body is passed, this must be a POST (I think)
		if (typeof body !== "undefined" && body !== null) {
			verb = "POST";
	
			if (typeof body != "string") {
				this.requestEntry["http.body"] = toJson(body);
			} else {
				this.requestEntry["http.body"] = body;
			}
		}	
		
		// Set up the global HTTP Connector
		this.http.setParam("method", verb.toUpperCase());
		this.http.setParam("url", url);
		this.http.setParam("username", username);
		this.http.setParam("password", password);
	
		// Now set up the request entry
		this.requestEntry["http.url"] = url;
		this.requestEntry["http.method"] = verb.toUpperCase();
		this.requestEntry["http.Content-Type"] = ctype;
		this.requestEntry["http.remote_user"] = username;
		this.requestEntry["http.remote_password"] = password;
		
		this.requestEntry["http.Accept"] = "application/json";
		this.requestEntry["http.Connection"] = "keep-alive";
		
		for (var hdr in headers) {
			this.requestEntry["http." + hdr] = headers[hdr]
		}
		
		if (this.debug) {
			this.logDetails({msg : "Request to itim", 
						obj : this.httpEntry(this.requestEntry, true), 
						url : url, 
						verb : verb, 
						ctype : ctype, 
						where : where,
						sent: true});
		}
	
		// Reinitialize the HTTP Client connector so the updated parameters are applied
		this.http.terminate();
		this.http.initialize(null);
	
		alreadyImportedCert = false; 
		var reply = null;
		// Make the call
		do {
			var retry = false;
			try {	
				this.alert("\nMaking call:" + this.requestEntry + "\n");
				
				// Set cookies
				this.requestEntry["http.Cookie"] = this.getCookies(); // In case these have been changed since last time
		
				var retEntry = this.http.queryReply(this.requestEntry);

				// Grab any cookies if found
				if (retEntry["http.Set-Cookie"]) {
					this.cookieArrayList.add(retEntry.getString("http.Set-Cookie"));
				}

				// Grab the CSRFToken if found
				if (retEntry.getString("http.CSRFToken")) {
					this.CSRFToken = retEntry.getString("http.CSRFToken");
				}	
				
				// Now to decide what to return, based on the returnValue argument passed in
				if (returnValue == "cookie") {
					reply = retEntry
				} else
				if (returnValue == "JS object") {
					reply = this.parseReply(retEntry);
				} else {
					reply = retEntry
				}	
			} catch (ex) {
				//if (form && this.debug) this.alert("Exception: " + ex);
				
				// If the token has expired, get a new one
				if (ex.toString().indexOf("Unauthorized") >= 0) {
					this.getToken();
					retry = true
				} else
				// Else if we first must import the client cert, then do so. The Server must be restarted after.
				if (ex instanceof javax.net.ssl.SSLHandshakeException) {
					if ((ex.toString().indexOf("Certificate chaining error") >= 0) && alreadyImportedCert) {
						this.throwException("You must restart the SDI server in order for the imported certificate to be trusted.")
					}
					this.getCertificate();
					alreadyImportedCert = true;
					retry = true;
				} else
				// If a redirect - follow the redirect
				if (retEntry.getString("http.responseCode").startsWith("3")) {
					requestEntry["http.url"] = retEntry.getString("http.Location")
 					retry = true;
				} else {
					throw ex;
				}	
			}
		} while (retry);
		
		retEntry["http.url"] = "http://" + retEntry["http.host"] + retEntry["http.base"];
		retEntry.removeAttribute("http.url");
		retEntry.removeAttribute("http.base");
		retEntry.removeAttribute("http.host");
		retEntry.removeAttribute("http.method");
		
		if (this.debug) {
			this.logDetails({msg : "Response from itim", 
						obj : this.httpEntry(retEntry),
					    entry : retEntry});
		}
		
		//if (form && this.debug) this.alert("reply: " + toJson(reply));
		
		return reply;
	}
	
	// Handle terminate to close the connector
	this.terminate = function() {
		this.http.terminate();
		this.token = null;
		this.sessionId = null
	}
	
	// Handle alerting - @@ DISABLED for now
	this.alert = function(msg) {
		if (!this.debug) continue;
		main.logmsg(msg);
		java.lang.System.out.println(msg)
	}	
		
	
	// Get the client certificate from the server and import it to the TDI keystore
	this.getCertificate = function() {
		this.logmsg("! Getting client cert");
		var msg = com.ibm.di.security.GetSSLCertificate.installCertificateFrom(this.baseUrl, 443);
		this.logmsg("! Result: " + msg)
	}
	
	this.getToken_OLD = function() {
		var reply = this.makeRequest({
				token: true, // Getting a token
				verb: "POST",
				url: this.authUrl,
				ctype: "application/json",
				where: "getToken()",
				headers: {
					Authorization: "Bearer " + this.apikey
				},
				body: {
					username: this.username,
					password: this.password
				}
		});
		
		this.token = reply.csrftoken || "";
		this.sessionId = reply.sessionId || ""
	}
	
	// Log specifics arguments passed to makeRequest()
	this.logDetails = function(params, sent) {
		sent = sent || false;
		var msg = params.msg;
		var obj = params.obj; 
		var url = params.url;
		var verb = params.verb;
		var ctype = params.ctype; 
		var where = params.where;
		
		if (!this.debug) continue;
		
		if (msg == null) {
			msg = "*unknown entry*";
		}
	
		var s = new java.lang.StringBuffer();
/*		
		if (where != null) {
			s.append("\n<<" + where + ">> " + msg);
		} else {
			s.append("\n---------> " + msg);
		}
*/		
		
		if (verb != null) { s.append("   " + verb.toUpperCase()); } 
		if (ctype != null) { s.append("   " + ctype); } 
		if (url != null) { s.append("   " + url); } 
		s.append("\n");
	
		if (obj != null) {
			if (obj instanceof com.ibm.di.entry.Entry) {	
				s.append(this.httpEntry(obj, sent))	
			} else {
				s.append(obj.toString());
			}
		}	
	
		this.logmsg(s.toString());
	}

	this.throwException = function(msg) {
		throw new java.lang.Exception(msg);
	}

	// Checks the validity of the reply and sets up for Iteration
	this.parseReply = function(replyEntry) {
		if (replyEntry === null) { return } 
		
		var status = replyEntry.getString("http.responseCode");
	
		// Check the return status
		if (status == "401") { // Unauthorized - time to renew the token
			this.throwException("Unauthorized")
		}
		if (!status.startsWith("2")) {
			this.throwException("Error response from ITIM. Response code: " 
								+ status
								+ "    Message: " + replyEntry.getString("http.responseMsg"));
		}
		
		// Now parse the body
		var body = replyEntry.getString("http.bodyAsString");
	
		try {
			var reply = fromJson(body);
		} catch (ex) {
			this.throwException("Error parsing return payload from itim: " + ex.toString()
							+ "\n*** dump of reply ***\n" 
							+ replyEntry)
		}
			
		return reply;
	}
	
	// Left justified text
	this.LJ = function(txt, len) {
		txt = txt || "";
		len = len || txt.length;
		return (txt + "                                                       ").substring(0, len)
	}
	
	// Returns a string with legible listing of important attributes and their values
	this.httpEntry = function(entry, sent) {
		if (!entry) return "";
		
		sent = sent || false;
		var txt = sent ? "--->>>> Request:\n" : "<<<<--- Response:\n";
	
		for (var att in entry) {
			var name = att.getName();
			var val = att.getValue();
			if (val && name.indexOf("tcp.") < 0 
				&& typeof val != "object" && typeof val !=  "com.ibm.di.entry.Attribute" 
				&& !(val instanceof Array) && !val.startsWith("[B@")) {
				txt += "  " + this.LJ(name + ": ", 25) + val + "\n"
			}
		}
		
		return txt
	}

	// Own logmsg() to aid in debugging
	this.logmsg = function(lvl, msg) {
		if (!lvl) { // undefined, and allows just a call to this.logmsg() to log a carriage return
			lvl = "INFO";
			msg = ""
		} else
		if (!msg) {
			msg = lvl;
			lvl = "INFO"
		}
		
		if ("DEBUG".equalsIgnoreCase(lvl)) {
			// Write to console out also
			java.lang.System.out.println("|" + this.LJ(lvl,5) + "| " + msg);
		}
		
		//if (form && this.debug) this.alert("RESTCLIENT.logmsg: " + msg);
		//this.alert("task: " + (typeof task) + " - " + (task instanceof com.ibm.di.server.AssemblyLine));
		
		// This to allow it to be used by Connector Form Event script
		//if (task && task instanceof com.ibm.di.server.AssemblyLine) 	task.logmsg(lvl, msg)
		main.logmsg(lvl, msg);
		java.lang.System.out.println(((lvl == "INFO") ? "" : lvl) + msg)
	}	
}]]></parameter>
        </Script>
        <Script name="RESTCLIENT class 20250320 1519 adding Franzs code to connect to ISIM">
            <ModTime>1742478807724</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[// 20250116 1116 Created
// 20250121 1146 Finishing (I hope) the creation of this Class - vrs.0.9
// 20250121 2104 RestClientConnector form working! RESTCLIENT class doing its job both in the test AL and in the Form
// 20250123 1819 Tightening up code
// 20250128 2122 Fixing httpEntry() so it does not fail on argument = null
// 20250130 1243 Making sure this class works both inside and outside a Connector
// 20250131 1942 Made this.logmsg() write to both System.out and main.logmsg
// 20250319 1452 Franz and I made some changes to makeRequest(), adding support for redirection

// This is the class that provides methods for making HTTP requests

function RESTCLIENT(args) {
	this.baseUrl = (args.baseUrl || "").trim();
	this.authUrl = args.authUrl || "";
	this.apikey = args.apikey || "";
	this.username = args.username || ""; 
	this.password = args.password || "";
	this.debug = true //args.debug || false;
	
	// The HTTP Client Connector to use
	this.http = system.getConnector("ibmdi.HTTPClient");
	
	// Member variables
	this.requestEntry = system.newEntry();
	
	this.token = null;
	this.sessionId = null;
	
	// Own logmsg() to aid in debugging
	this.logmsg = function(lvl, msg) {
		if (!lvl) { // undefined, and allows just a call to this.logmsg() to log a carriage return
			lvl = "INFO";
			msg = ""
		} else
		if (!msg) {
			msg = lvl;
			lvl = "INFO"
		}
		
		if ("DEBUG".equalsIgnoreCase(lvl)) {
			// Write to console out also
			java.lang.System.out.println("|" + this.LJ(lvl,5) + "| " + msg);
		}
		
		//if (form && this.debug) this.alert("RESTCLIENT.logmsg: " + msg);
		//this.alert("task: " + (typeof task) + " - " + (task instanceof com.ibm.di.server.AssemblyLine));
		
		// This to allow it to be used by Connector Form Event script
		//if (task && task instanceof com.ibm.di.server.AssemblyLine) 	task.logmsg(lvl, msg)
		main.logmsg(lvl, msg);
		java.lang.System.out.println(((lvl == "INFO") ? "" : lvl) + msg)
	}

	// REST Client http-call method. The first lines of code show you the parameters you can send in the 'param' JS object
	this.makeRequest = function(params) {
		// Get token if necessary
		if (!this.token && !params.token) {
			this.getToken();
		} 
		
		//if (form && this.debug) this.alert("RESTCLIENT.makeRequest(" + toJson(params) + "}");
			
		// Here come the various local variables set from parameters passed OR default values
		var verb = params.verb || "GET";
		var url = params.url || this.throwException("makeRequest called with no URL");
		var body = params.body || null;
		var ctype = params.ctype || "application/json";
		var where = params.where || "";
		var headers = params.headers || {};
		var gettingToken = params.token || false;
		var username = params.username || "";
		var password = params.password || "";
		
		var alreadyImportedCert = false;
		
		if (url && !url.startsWith("/")) url = "/" + url;
		
		// Empty out the requestEntry before setting it up for the call
		this.requestEntry.removeAllAttributes();
		
		// Add auth artifacts
		if (!gettingToken) {
			this.requestEntry["http.X-CSRV-TOKEN"] = this.token;
			if (this.sessionId) this.requestEntry["http.sessionId"] = this.sessionId;
		}
		
		// Prepend the host (baseURL) if not already there
		if (url.toLowerCase().indexOf(this.baseUrl.toLowerCase()) < 0) {
			url = this.baseUrl + url;
		}
		
		// If a body is passed, this must be a POST (I think)
		if (typeof body !== "undefined" && body !== null) {
			verb = "POST";
	
			if (typeof body != "string") {
				this.requestEntry["http.body"] = toJson(body);
			} else {
				this.requestEntry["http.body"] = body;
			}
		}	
		
		// Set up the global HTTP Connector
		this.http.setParam("method", verb.toUpperCase());
		this.http.setParam("url", url);
		this.http.setParam("username", username);
		this.http.setParam("password", password);
	
		// Now set up the request entry
		this.requestEntry["http.url"] = url;
		this.requestEntry["http.method"] = verb.toUpperCase();
		this.requestEntry["http.Content-Type"] = ctype;
		this.requestEntry["http.remote_user"] = username;
		this.requestEntry["http.remote_password"] = password;
		
		this.requestEntry["http.Accept"] = "application/json";
		this.requestEntry["http.Connection"] = "keep-alive";
		
		
		for (var hdr in headers) {
			this.requestEntry["http." + hdr] = headers[hdr]
		}
		
		if (this.debug) {
			this.logDetails({msg : "Request to itim", 
						obj : this.httpEntry(this.requestEntry, true), 
						url : url, 
						verb : verb, 
						ctype : ctype, 
						where : where,
						sent: true});
		}
	
		// Reinitialize the HTTP Client connector so the updated parameters are applied
		this.http.terminate();
		this.http.initialize(null);
	
		alreadyImportedCert = false; 
	
		// Make the call
		do {
			var retry = false;
			try {	
				this.alert("\nMaking call:" + this.requestEntry + "\n");
				
				var retEntry = this.http.queryReply(this.requestEntry);

				var reply = this.parseReply(retEntry);
			} catch (ex) {
				//if (form && this.debug) this.alert("Exception: " + ex);
				
				// If the token has expired, get a new one
				if (ex.toString().indexOf("Unauthorized") >= 0) {
					this.getToken();
					retry = true
				} else
				// Else if we first must import the client cert, then do so. The Server must be restarted after.
				if (ex instanceof javax.net.ssl.SSLHandshakeException) {
					if ((ex.toString().indexOf("Certificate chaining error") >= 0) && alreadyImportedCert) {
						this.throwException("You must restart the SDI server in order for the imported certificate to be trusted.")
					}
					this.getCertificate();
					alreadyImportedCert = true;
					retry = true;
				} else
				// If a redirect - follow the redirect
				if (retEntry.getString("http.responseCode").startsWith("3")) {
					requestEntry["http.url"] = retEntry.getString("http.Location")
 					retry = true;
				} else {
					throw ex;
				}	
			}
		} while (retry);
		
		retEntry["http.url"] = "http://" + retEntry["http.host"] + retEntry["http.base"];
		retEntry.removeAttribute("http.url");
		retEntry.removeAttribute("http.base");
		retEntry.removeAttribute("http.host");
		retEntry.removeAttribute("http.method");
		
		if (this.debug) {
			this.logDetails({msg : "Response from itim", 
						obj : this.httpEntry(retEntry),
					    entry : retEntry});
		}
		
		//if (form && this.debug) this.alert("reply: " + toJson(reply));
		
		return reply;
	}
	
	// Handle terminate to close the connector
	this.terminate = function() {
		this.http.terminate();
		this.token = null;
		this.sessionId = null
	}
	
	// Handle alerting - @@ DISABLED for now
	this.alert = function(msg) {
		if (!this.debug) continue;
		main.logmsg(msg);
		java.lang.System.out.println(msg)
	}	
		
	
	// Get the client certificate from the server and import it to the TDI keystore
	this.getCertificate = function() {
		this.logmsg("! Getting client cert");
		var msg = com.ibm.di.security.GetSSLCertificate.installCertificateFrom(this.baseUrl, 443);
		this.logmsg("! Result: " + msg)
	}
	
	// Get the authentication token
	this.getToken = function() {
		var reply = this.makeRequest({
				token: true, // Getting a token
				verb: "POST",
				url: this.authUrl,
				ctype: "application/json",
				where: "getToken()",
				headers: {
					Authorization: "Bearer " + this.apikey
				},
				body: {
					username: this.username,
					password: this.password
				}
		});
		
		this.token = reply.csrftoken || "";
		this.sessionId = reply.sessionId || ""
	}

	this.logDetails = function(params, sent) {
		sent = sent || false;
		var msg = params.msg;
		var obj = params.obj; 
		var url = params.url;
		var verb = params.verb;
		var ctype = params.ctype; 
		var where = params.where;
		
		if (!this.debug) continue;
		
		if (msg == null) {
			msg = "*unknown entry*";
		}
	
		var s = new java.lang.StringBuffer();
/*		
		if (where != null) {
			s.append("\n<<" + where + ">> " + msg);
		} else {
			s.append("\n---------> " + msg);
		}
*/		
		
		if (verb != null) { s.append("   " + verb.toUpperCase()); } 
		if (ctype != null) { s.append("   " + ctype); } 
		if (url != null) { s.append("   " + url); } 
		s.append("\n");
	
		if (obj != null) {
			if (obj instanceof com.ibm.di.entry.Entry) {	
				s.append(this.httpEntry(obj, sent))	
			} else {
				s.append(obj.toString());
			}
		}	
	
		this.logmsg(s.toString());
	}

	this.throwException = function(msg) {
		throw new java.lang.Exception(msg);
	}

	// Checks the validity of the reply and sets up for Iteration
	this.parseReply = function(replyEntry) {
		if (replyEntry === null) { return } 
		
		var status = replyEntry.getString("http.responseCode");
	
		// Check the return status
		if (status == "401") { // Unauthorized - time to renew the token
			this.throwException("Unauthorized")
		}
		if (!status.startsWith("2")) {
			this.throwException("Error response from ITIM. Response code: " 
								+ status
								+ "    Message: " + replyEntry.getString("http.responseMsg"));
		}
		
		// Now parse the body
		var body = replyEntry.getString("http.bodyAsString");
	
		try {
			var reply = fromJson(body);
		} catch (ex) {
			this.throwException("Error parsing return payload from itim: " + ex.toString()
							+ "\n*** dump of reply ***\n" 
							+ replyEntry)
		}
			
		return reply;
	}
	
	// Left justified text
	this.LJ = function(txt, len) {
		txt = txt || "";
		len = len || txt.length;
		return (txt + "                                                       ").substring(0, len)
	}
	
	// Returns a string with legible listing of important attributes and their values
	this.httpEntry = function(entry, sent) {
		if (!entry) return "";
		
		sent = sent || false;
		var txt = sent ? "--->>>> Request:\n" : "<<<<--- Response:\n";
	
		for (var att in entry) {
			var name = att.getName();
			var val = att.getValue();
			if (val && name.indexOf("tcp.") < 0 
				&& typeof val != "object" && typeof val !=  "com.ibm.di.entry.Attribute" 
				&& !(val instanceof Array) && !val.startsWith("[B@")) {
				txt += "  " + this.LJ(name + ": ", 25) + val + "\n"
			}
		}
		
		return txt
	}
}]]></parameter>
        </Script>
        <Script name="RESTCLIENT class 000 SAVE">
            <ModTime>1742585970823</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[// 20250116 1116 Created
// 20250121 1146 Finishing (I hope) the creation of this Class - vrs.0.9
// 20250121 2104 RestClientConnector form working! RESTCLIENT class doing its job both in the test AL and in the Form
// 20250123 1819 Tightening up code
// 20250128 2122 Fixing httpEntry() so it does not fail on argument = null
// 20250130 1243 Making sure this class works both inside and outside a Connector
// 20250131 1942 Made this.logmsg() write to both System.out and main.logmsg
// 20250319 1452 Franz and I made some changes to makeRequest(), adding support for redirection

// This is the class that provides methods for making HTTP requests

function RESTCLIENT(args) {
	this.baseUrl = (args.baseUrl || "").trim();
	this.authUrl = args.authUrl || "";
	this.apikey = args.apikey || "";
	this.username = args.username || ""; 
	this.password = args.password || "";
	this.debug = true //args.debug || false;
	
	// The HTTP Client Connector to use
	this.http = system.getConnector("ibmdi.HTTPClient");
	
	// Member variables
	this.requestEntry = system.newEntry();
	
	this.token = null;
	this.sessionId = null;
	
	// Own logmsg() to aid in debugging
	this.logmsg = function(lvl, msg) {
		if (!lvl) { // undefined, and allows just a call to this.logmsg() to log a carriage return
			lvl = "INFO";
			msg = ""
		} else
		if (!msg) {
			msg = lvl;
			lvl = "INFO"
		}
		
		if ("DEBUG".equalsIgnoreCase(lvl)) {
			// Write to console out also
			java.lang.System.out.println("|" + this.LJ(lvl,5) + "| " + msg);
		}
		
		//if (form && this.debug) this.alert("RESTCLIENT.logmsg: " + msg);
		//this.alert("task: " + (typeof task) + " - " + (task instanceof com.ibm.di.server.AssemblyLine));
		
		// This to allow it to be used by Connector Form Event script
		//if (task && task instanceof com.ibm.di.server.AssemblyLine) 	task.logmsg(lvl, msg)
		main.logmsg(lvl, msg);
		java.lang.System.out.println(((lvl == "INFO") ? "" : lvl) + msg)
	}
	
	// Get the authentication token. Argument token tells makeRequest not to getToken, and skip parsing the body and instead return http.Set-Cookie
	this.getToken = function() {
		this.cookies = []; // empty out cookies
		
		// First get session id
		this.sessionId = this.makeRequest({
				token: true, // Getting a token
				verb: "POST",
				url: this.authUrl,
				where: "getToken()"
		});
		
		// Now for the LTPAToken2
		this.token = this.makeRequest({
				token: true, // Getting a token
				verb: "POST",
				url: "/itim/j_security_check", // @@TODO Should make this a parameter under Connections
				ctype: "application/x-www-form-urlencoded",
				where: "getToken()",
				headers: {
					Authorization: "Bearer " + this.apikey
				},
				body: "j_username=" + this.username + "&j_password=" + this.password
		});
		
		// Get CSRFToken
		var reply = this.makeRequest({
				token: true,
				verb: "GET",
				url: "/itim/rest/systemusers/me", // @@TODO Should make this a parameter under Connections
				ctype: "application/json",
				where: "getToken()",
				cookies: this.sessionId + "\n" + this.token
		});
		this.csrfToken = reply
	}
	
	// Fix the cookies string for makeRequest()
	this.setCookies = function() {
		var cookies = system.splitString("", ""); // Start with an empty Java array
		if (this.sessionId) cookies.push(this.sessionId);
		if (this.sessionId) cookies.push(this.sessionId);
		if (this.sessionId) cookies.push(this.sessionId)
		this.cookies = cookies
	}	

	// REST Client http-call method. The first lines of code show you the parameters you can send in the 'param' JS object
	this.makeRequest = function(params) {
		// Get token if necessary
		if (!this.token && !params.token) {
			this.getToken();
		} 
		
		//if (form && this.debug) this.alert("RESTCLIENT.makeRequest(" + toJson(params) + "}");
			
		// Here come the various local variables set from parameters passed OR default values
		var verb = params.verb || "GET";
		var url = params.url || this.throwException("makeRequest called with no URL");
		var body = params.body || null;
		var ctype = params.ctype || "application/json";
		var where = params.where || "";
		var headers = params.headers || {};
		var gettingToken = params.token || false;
		var username = params.username || "";
		var password = params.password || "";
		
		var alreadyImportedCert = false;
		
		if (url && !url.startsWith("/")) url = "/" + url;
		
		// Empty out the requestEntry before setting it up for the call
		this.requestEntry.removeAllAttributes();
		
		// Add cookies
		this.addCookies(this.requestEntry);
		
		// Prepend the host (baseURL) if not already there
		if (url.toLowerCase().indexOf(this.baseUrl.toLowerCase()) < 0) {
			if (this.baseUrl.endsWith("/")) {
				this.baseUrl = this.baseUrl.substring(0, this.baseUrl.length-1) // remove / at end of baseUrl if found
			}	
			url = this.baseUrl + url;
		}
		
		// If a body is passed, this must be a POST (I think)
		if (typeof body !== "undefined" && body !== null) {
			verb = "POST";
	
			if (typeof body != "string") {
				this.requestEntry["http.body"] = toJson(body);
			} else {
				this.requestEntry["http.body"] = body;
			}
		}	
		
		// Set up the global HTTP Connector
		this.http.setParam("method", verb.toUpperCase());
		this.http.setParam("url", url);
		this.http.setParam("username", username);
		this.http.setParam("password", password);
	
		// Now set up the request entry
		this.requestEntry["http.url"] = url;
		this.requestEntry["http.method"] = verb.toUpperCase();
		this.requestEntry["http.Content-Type"] = ctype;
		this.requestEntry["http.remote_user"] = username;
		this.requestEntry["http.remote_password"] = password;
		
		this.requestEntry["http.Accept"] = "application/json";
		this.requestEntry["http.Connection"] = "keep-alive";
		
		
		for (var hdr in headers) {
			this.requestEntry["http." + hdr] = headers[hdr]
		}
		
		if (this.debug) {
			this.logDetails({msg : "Request to itim", 
						obj : this.httpEntry(this.requestEntry, true), 
						url : url, 
						verb : verb, 
						ctype : ctype, 
						where : where,
						sent: true});
		}
	
		// Reinitialize the HTTP Client connector so the updated parameters are applied
		this.http.terminate();
		this.http.initialize(null);
	
		alreadyImportedCert = false; 
		var reply = null;
		// Make the call
		do {
			var retry = false;
			try {	
				this.alert("\nMaking call:" + this.requestEntry + "\n");
				
				var retEntry = this.http.queryReply(this.requestEntry);

				if (getCookie) {
					reply = retEntry.getString("http.Set-Cookie")
				} else {
					reply = this.parseReply(retEntry);
				}
				
				// Grab the CSRFToken if found
				if (retEntry.getString("http.CSRFToken")) this.CSRFToken = httpReply.getString("http.CSRFToken")
				
			} catch (ex) {
				//if (form && this.debug) this.alert("Exception: " + ex);
				
				// If the token has expired, get a new one
				if (ex.toString().indexOf("Unauthorized") >= 0) {
					this.getToken();
					retry = true
				} else
				// Else if we first must import the client cert, then do so. The Server must be restarted after.
				if (ex instanceof javax.net.ssl.SSLHandshakeException) {
					if ((ex.toString().indexOf("Certificate chaining error") >= 0) && alreadyImportedCert) {
						this.throwException("You must restart the SDI server in order for the imported certificate to be trusted.")
					}
					this.getCertificate();
					alreadyImportedCert = true;
					retry = true;
				} else
				// If a redirect - follow the redirect
				if (retEntry.getString("http.responseCode").startsWith("3")) {
					requestEntry["http.url"] = retEntry.getString("http.Location")
 					retry = true;
				} else {
					throw ex;
				}	
			}
		} while (retry);
		
		retEntry["http.url"] = "http://" + retEntry["http.host"] + retEntry["http.base"];
		retEntry.removeAttribute("http.url");
		retEntry.removeAttribute("http.base");
		retEntry.removeAttribute("http.host");
		retEntry.removeAttribute("http.method");
		
		if (this.debug) {
			this.logDetails({msg : "Response from itim", 
						obj : this.httpEntry(retEntry),
					    entry : retEntry});
		}
		
		//if (form && this.debug) this.alert("reply: " + toJson(reply));
		
		return reply;
	}
	
	// Handle terminate to close the connector
	this.terminate = function() {
		this.http.terminate();
		this.token = null;
		this.sessionId = null
	}
	
	// Handle alerting - @@ DISABLED for now
	this.alert = function(msg) {
		if (!this.debug) continue;
		main.logmsg(msg);
		java.lang.System.out.println(msg)
	}	
		
	
	// Get the client certificate from the server and import it to the TDI keystore
	this.getCertificate = function() {
		this.logmsg("! Getting client cert");
		var msg = com.ibm.di.security.GetSSLCertificate.installCertificateFrom(this.baseUrl, 443);
		this.logmsg("! Result: " + msg)
	}
	
	this.getToken_OLD = function() {
		var reply = this.makeRequest({
				token: true, // Getting a token
				verb: "POST",
				url: this.authUrl,
				ctype: "application/json",
				where: "getToken()",
				headers: {
					Authorization: "Bearer " + this.apikey
				},
				body: {
					username: this.username,
					password: this.password
				}
		});
		
		this.token = reply.csrftoken || "";
		this.sessionId = reply.sessionId || ""
	}
	
	this.logDetails = function(params, sent) {
		sent = sent || false;
		var msg = params.msg;
		var obj = params.obj; 
		var url = params.url;
		var verb = params.verb;
		var ctype = params.ctype; 
		var where = params.where;
		
		if (!this.debug) continue;
		
		if (msg == null) {
			msg = "*unknown entry*";
		}
	
		var s = new java.lang.StringBuffer();
/*		
		if (where != null) {
			s.append("\n<<" + where + ">> " + msg);
		} else {
			s.append("\n---------> " + msg);
		}
*/		
		
		if (verb != null) { s.append("   " + verb.toUpperCase()); } 
		if (ctype != null) { s.append("   " + ctype); } 
		if (url != null) { s.append("   " + url); } 
		s.append("\n");
	
		if (obj != null) {
			if (obj instanceof com.ibm.di.entry.Entry) {	
				s.append(this.httpEntry(obj, sent))	
			} else {
				s.append(obj.toString());
			}
		}	
	
		this.logmsg(s.toString());
	}

	this.throwException = function(msg) {
		throw new java.lang.Exception(msg);
	}

	// Checks the validity of the reply and sets up for Iteration
	this.parseReply = function(replyEntry) {
		if (replyEntry === null) { return } 
		
		var status = replyEntry.getString("http.responseCode");
	
		// Check the return status
		if (status == "401") { // Unauthorized - time to renew the token
			this.throwException("Unauthorized")
		}
		if (!status.startsWith("2")) {
			this.throwException("Error response from ITIM. Response code: " 
								+ status
								+ "    Message: " + replyEntry.getString("http.responseMsg"));
		}
		
		// Now parse the body
		var body = replyEntry.getString("http.bodyAsString");
	
		try {
			var reply = fromJson(body);
		} catch (ex) {
			this.throwException("Error parsing return payload from itim: " + ex.toString()
							+ "\n*** dump of reply ***\n" 
							+ replyEntry)
		}
			
		return reply;
	}
	
	// Left justified text
	this.LJ = function(txt, len) {
		txt = txt || "";
		len = len || txt.length;
		return (txt + "                                                       ").substring(0, len)
	}
	
	// Returns a string with legible listing of important attributes and their values
	this.httpEntry = function(entry, sent) {
		if (!entry) return "";
		
		sent = sent || false;
		var txt = sent ? "--->>>> Request:\n" : "<<<<--- Response:\n";
	
		for (var att in entry) {
			var name = att.getName();
			var val = att.getValue();
			if (val && name.indexOf("tcp.") < 0 
				&& typeof val != "object" && typeof val !=  "com.ibm.di.entry.Attribute" 
				&& !(val instanceof Array) && !val.startsWith("[B@")) {
				txt += "  " + this.LJ(name + ": ", 25) + val + "\n"
			}
		}
		
		return txt
	}
}]]></parameter>
        </Script>
        <Script name="RESTCLIENT class 20250321 1941 Still working on it">
            <ModTime>1742586071171</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[// 20250116 1116 Created
// 20250121 1146 Finishing (I hope) the creation of this Class - vrs.0.9
// 20250121 2104 RestClientConnector form working! RESTCLIENT class doing its job both in the test AL and in the Form
// 20250123 1819 Tightening up code
// 20250128 2122 Fixing httpEntry() so it does not fail on argument = null
// 20250130 1243 Making sure this class works both inside and outside a Connector
// 20250131 1942 Made this.logmsg() write to both System.out and main.logmsg
// 20250319 1452 Franz and I made some changes to makeRequest(), adding support for redirection
// 20250321 2041 Still working on it

// This is the class that provides methods for making HTTP requests

function RESTCLIENT(args) {
	this.baseUrl = (args.baseUrl || "").trim();
	this.authUrl = args.authUrl || "";
	this.apikey = args.apikey || "";
	this.username = args.username || ""; 
	this.password = args.password || "";
	this.debug = true //args.debug || false;
	
	// The HTTP Client Connector to use
	this.http = system.getConnector("ibmdi.HTTPClient");
	
	// Member variables
	this.requestEntry = system.newEntry();
	
	this.token = null;
	this.sessionId = null;
	
	// Own logmsg() to aid in debugging
	this.logmsg = function(lvl, msg) {
		if (!lvl) { // undefined, and allows just a call to this.logmsg() to log a carriage return
			lvl = "INFO";
			msg = ""
		} else
		if (!msg) {
			msg = lvl;
			lvl = "INFO"
		}
		
		if ("DEBUG".equalsIgnoreCase(lvl)) {
			// Write to console out also
			java.lang.System.out.println("|" + this.LJ(lvl,5) + "| " + msg);
		}
		
		//if (form && this.debug) this.alert("RESTCLIENT.logmsg: " + msg);
		//this.alert("task: " + (typeof task) + " - " + (task instanceof com.ibm.di.server.AssemblyLine));
		
		// This to allow it to be used by Connector Form Event script
		//if (task && task instanceof com.ibm.di.server.AssemblyLine) 	task.logmsg(lvl, msg)
		main.logmsg(lvl, msg);
		java.lang.System.out.println(((lvl == "INFO") ? "" : lvl) + msg)
	}
	
	// Get the authentication token. Argument token tells makeRequest not to getToken, and skip parsing the body and instead return http.Set-Cookie
	this.getToken = function() {
		this.cookies = []; // empty out cookies
		
		// First get session id
		this.sessionId = this.makeRequest({
				token: true, // Getting a token
				verb: "POST",
				url: this.authUrl,
				where: "getToken()"
		});
		
		// Now for the LTPAToken2
		this.token = this.makeRequest({
				token: true, // Getting a token
				verb: "POST",
				url: "/itim/j_security_check", // @@TODO Should make this a parameter under Connections
				ctype: "application/x-www-form-urlencoded",
				where: "getToken()",
				headers: {
					Authorization: "Bearer " + this.apikey
				},
				body: "j_username=" + this.username + "&j_password=" + this.password
		});
		
		// Get CSRFToken
		var reply = this.makeRequest({
				token: true,
				verb: "GET",
				url: "/itim/rest/systemusers/me", // @@TODO Should make this a parameter under Connections
				ctype: "application/json",
				where: "getToken()",
				cookies: this.sessionId + "\n" + this.token
		});
		this.csrfToken = reply
	}
	
	// Fix the cookies string for makeRequest()
	this.setCookies = function() {
		var cookies = system.splitString("", ""); // Start with an empty Java array
		if (this.sessionId) cookies.push(this.sessionId);
		if (this.sessionId) cookies.push(this.sessionId);
		if (this.sessionId) cookies.push(this.sessionId)
		this.cookies = cookies
	}	

	// REST Client http-call method. The first lines of code show you the parameters you can send in the 'param' JS object
	this.makeRequest = function(params) {
		// Get token if necessary
		if (!this.token && !params.token) {
			this.getToken();
		} 
		
		//if (form && this.debug) this.alert("RESTCLIENT.makeRequest(" + toJson(params) + "}");
			
		// Here come the various local variables set from parameters passed OR default values
		var verb = params.verb || "GET";
		var url = params.url || this.throwException("makeRequest called with no URL");
		var body = params.body || null;
		var ctype = params.ctype || "application/json";
		var where = params.where || "";
		var headers = params.headers || {};
		var gettingToken = params.token || false;
		var username = params.username || "";
		var password = params.password || "";
		
		var alreadyImportedCert = false;
		
		if (url && !url.startsWith("/")) url = "/" + url;
		
		// Empty out the requestEntry before setting it up for the call
		this.requestEntry.removeAllAttributes();
		
		// Add cookies
		this.addCookies(this.requestEntry);
		
		// Prepend the host (baseURL) if not already there
		if (url.toLowerCase().indexOf(this.baseUrl.toLowerCase()) < 0) {
			if (this.baseUrl.endsWith("/")) {
				this.baseUrl = this.baseUrl.substring(0, this.baseUrl.length-1) // remove / at end of baseUrl if found
			}	
			url = this.baseUrl + url;
		}
		
		// If a body is passed, this must be a POST (I think)
		if (typeof body !== "undefined" && body !== null) {
			verb = "POST";
	
			if (typeof body != "string") {
				this.requestEntry["http.body"] = toJson(body);
			} else {
				this.requestEntry["http.body"] = body;
			}
		}	
		
		// Set up the global HTTP Connector
		this.http.setParam("method", verb.toUpperCase());
		this.http.setParam("url", url);
		this.http.setParam("username", username);
		this.http.setParam("password", password);
	
		// Now set up the request entry
		this.requestEntry["http.url"] = url;
		this.requestEntry["http.method"] = verb.toUpperCase();
		this.requestEntry["http.Content-Type"] = ctype;
		this.requestEntry["http.remote_user"] = username;
		this.requestEntry["http.remote_password"] = password;
		
		this.requestEntry["http.Accept"] = "application/json";
		this.requestEntry["http.Connection"] = "keep-alive";
		
		
		for (var hdr in headers) {
			this.requestEntry["http." + hdr] = headers[hdr]
		}
		
		if (this.debug) {
			this.logDetails({msg : "Request to itim", 
						obj : this.httpEntry(this.requestEntry, true), 
						url : url, 
						verb : verb, 
						ctype : ctype, 
						where : where,
						sent: true});
		}
	
		// Reinitialize the HTTP Client connector so the updated parameters are applied
		this.http.terminate();
		this.http.initialize(null);
	
		alreadyImportedCert = false; 
		var reply = null;
		// Make the call
		do {
			var retry = false;
			try {	
				this.alert("\nMaking call:" + this.requestEntry + "\n");
				
				var retEntry = this.http.queryReply(this.requestEntry);

				if (getCookie) {
					reply = retEntry.getString("http.Set-Cookie")
				} else {
					reply = this.parseReply(retEntry);
				}
				
				// Grab the CSRFToken if found
				if (retEntry.getString("http.CSRFToken")) this.CSRFToken = httpReply.getString("http.CSRFToken")
				
			} catch (ex) {
				//if (form && this.debug) this.alert("Exception: " + ex);
				
				// If the token has expired, get a new one
				if (ex.toString().indexOf("Unauthorized") >= 0) {
					this.getToken();
					retry = true
				} else
				// Else if we first must import the client cert, then do so. The Server must be restarted after.
				if (ex instanceof javax.net.ssl.SSLHandshakeException) {
					if ((ex.toString().indexOf("Certificate chaining error") >= 0) && alreadyImportedCert) {
						this.throwException("You must restart the SDI server in order for the imported certificate to be trusted.")
					}
					this.getCertificate();
					alreadyImportedCert = true;
					retry = true;
				} else
				// If a redirect - follow the redirect
				if (retEntry.getString("http.responseCode").startsWith("3")) {
					requestEntry["http.url"] = retEntry.getString("http.Location")
 					retry = true;
				} else {
					throw ex;
				}	
			}
		} while (retry);
		
		retEntry["http.url"] = "http://" + retEntry["http.host"] + retEntry["http.base"];
		retEntry.removeAttribute("http.url");
		retEntry.removeAttribute("http.base");
		retEntry.removeAttribute("http.host");
		retEntry.removeAttribute("http.method");
		
		if (this.debug) {
			this.logDetails({msg : "Response from itim", 
						obj : this.httpEntry(retEntry),
					    entry : retEntry});
		}
		
		//if (form && this.debug) this.alert("reply: " + toJson(reply));
		
		return reply;
	}
	
	// Handle terminate to close the connector
	this.terminate = function() {
		this.http.terminate();
		this.token = null;
		this.sessionId = null
	}
	
	// Handle alerting - @@ DISABLED for now
	this.alert = function(msg) {
		if (!this.debug) continue;
		main.logmsg(msg);
		java.lang.System.out.println(msg)
	}	
		
	
	// Get the client certificate from the server and import it to the TDI keystore
	this.getCertificate = function() {
		this.logmsg("! Getting client cert");
		var msg = com.ibm.di.security.GetSSLCertificate.installCertificateFrom(this.baseUrl, 443);
		this.logmsg("! Result: " + msg)
	}
	
	this.getToken_OLD = function() {
		var reply = this.makeRequest({
				token: true, // Getting a token
				verb: "POST",
				url: this.authUrl,
				ctype: "application/json",
				where: "getToken()",
				headers: {
					Authorization: "Bearer " + this.apikey
				},
				body: {
					username: this.username,
					password: this.password
				}
		});
		
		this.token = reply.csrftoken || "";
		this.sessionId = reply.sessionId || ""
	}
	
	this.logDetails = function(params, sent) {
		sent = sent || false;
		var msg = params.msg;
		var obj = params.obj; 
		var url = params.url;
		var verb = params.verb;
		var ctype = params.ctype; 
		var where = params.where;
		
		if (!this.debug) continue;
		
		if (msg == null) {
			msg = "*unknown entry*";
		}
	
		var s = new java.lang.StringBuffer();
/*		
		if (where != null) {
			s.append("\n<<" + where + ">> " + msg);
		} else {
			s.append("\n---------> " + msg);
		}
*/		
		
		if (verb != null) { s.append("   " + verb.toUpperCase()); } 
		if (ctype != null) { s.append("   " + ctype); } 
		if (url != null) { s.append("   " + url); } 
		s.append("\n");
	
		if (obj != null) {
			if (obj instanceof com.ibm.di.entry.Entry) {	
				s.append(this.httpEntry(obj, sent))	
			} else {
				s.append(obj.toString());
			}
		}	
	
		this.logmsg(s.toString());
	}

	this.throwException = function(msg) {
		throw new java.lang.Exception(msg);
	}

	// Checks the validity of the reply and sets up for Iteration
	this.parseReply = function(replyEntry) {
		if (replyEntry === null) { return } 
		
		var status = replyEntry.getString("http.responseCode");
	
		// Check the return status
		if (status == "401") { // Unauthorized - time to renew the token
			this.throwException("Unauthorized")
		}
		if (!status.startsWith("2")) {
			this.throwException("Error response from ITIM. Response code: " 
								+ status
								+ "    Message: " + replyEntry.getString("http.responseMsg"));
		}
		
		// Now parse the body
		var body = replyEntry.getString("http.bodyAsString");
	
		try {
			var reply = fromJson(body);
		} catch (ex) {
			this.throwException("Error parsing return payload from itim: " + ex.toString()
							+ "\n*** dump of reply ***\n" 
							+ replyEntry)
		}
			
		return reply;
	}
	
	// Left justified text
	this.LJ = function(txt, len) {
		txt = txt || "";
		len = len || txt.length;
		return (txt + "                                                       ").substring(0, len)
	}
	
	// Returns a string with legible listing of important attributes and their values
	this.httpEntry = function(entry, sent) {
		if (!entry) return "";
		
		sent = sent || false;
		var txt = sent ? "--->>>> Request:\n" : "<<<<--- Response:\n";
	
		for (var att in entry) {
			var name = att.getName();
			var val = att.getValue();
			if (val && name.indexOf("tcp.") < 0 
				&& typeof val != "object" && typeof val !=  "com.ibm.di.entry.Attribute" 
				&& !(val instanceof Array) && !val.startsWith("[B@")) {
				txt += "  " + this.LJ(name + ": ", 25) + val + "\n"
			}
		}
		
		return txt
	}
}]]></parameter>
        </Script>
    <Script name="RESTCLIENT class 20250322 1432 Connector code working now with this stuff">
            <ModTime>1742650193469</ModTime>
            <parameter name="includeFiles"/>
            <parameter name="script"><![CDATA[// 20250116 1116 Created
// 20250121 1146 Finishing (I hope) the creation of this Class - vrs.0.9
// 20250121 2104 RestClientConnector form working! RESTCLIENT class doing its job both in the test AL and in the Form
// 20250123 1819 Tightening up code
// 20250128 2122 Fixing httpEntry() so it does not fail on argument = null
// 20250130 1243 Making sure this class works both inside and outside a Connector
// 20250131 1942 Made this.logmsg() write to both System.out and main.logmsg
// 20250319 1452 Franz and I made some changes to makeRequest(), adding support for redirection
// 20250321 2041 Still working on it

// This is the class that provides methods for making HTTP requests
//
// NOTES:
//			* this.logmsg() for more control over logging

function RESTCLIENT(args) {
	this.baseUrl = (args.baseUrl || "").trim();
	this.authUrl = args.authUrl || "";
	this.apikey = args.apikey || "";
	this.username = args.username || ""; 
	this.password = args.password || "";
	this.debug = true //args.debug || false;
	this.cookieArrayList = new java.util.ArrayList();
	
	// The HTTP Client Connector to use
	this.http = system.getConnector("ibmdi.HTTPClient");
	
	// Member variables
	this.requestEntry = system.newEntry();
	
	this.token = null;
	this.sessionId = null;
	
	// Get the authentication token. Argument token tells makeRequest not to getToken, and skip parsing the body and instead return http.Set-Cookie
	this.getToken = function() {
		this.cookies = ""; // empty out cookies
		this.cookieArrayList.clear();
		
		// First get session id
		this.sessionId = this.makeRequest({
				token: true, // Getting a token
				returnValue: "cookie",
				verb: "GET",
				url: "/itim/restlogin/login.jsp", // @@TODO Should make this a parameter under Connections
				where: "getToken()"
		});
		
		// Now for the LTPAToken2
		this.token = this.makeRequest({
				token: true, // Getting a token
				returnValue: "cookie",
				verb: "POST",
				url: "/itim/j_security_check", // @@TODO Should make this a parameter under Connections
				ctype: "application/x-www-form-urlencoded",
				where: "getToken()",
				headers: {
					Authorization: "Bearer " + this.apikey
				},
				body: "j_username=" + this.username + "&j_password=" + this.password
		});
		
		// Get CSRFToken
		var reply = this.makeRequest({
				token: true, // Getting a token - or at least part of the process
				returnValue: "entry",
				verb: "GET",
				url: "/itim/rest/systemusers/me", // @@TODO Should make this a parameter under Connections
				ctype: "application/json",
				where: "getToken()",
				cookies: this.sessionId + "\n" + this.token
		});
		this.CSRFToken = reply.getString("http.CSRFToken")
	}
	
	// Get the currently set Cookies
	this.getCookies = function() {
		return this.cookieArrayList.toArray().join("; ")
	}	
	
	// REST Client http-call method. The first lines of code show you the parameters you can send in the 'param' JS object
	this.makeRequest = function(params) {
		// Get token if necessary
		if (!this.token && !params.token) {
			this.getToken();
		} 
		
		//if (form && this.debug) this.alert("RESTCLIENT.makeRequest(" + toJson(params) + "}");
			
		// Here come the various local variables set from parameters passed OR default values
		var verb = params.verb || "GET";
		var url = params.url || this.throwException("makeRequest called with no URL");
		var body = params.body || null;
		var ctype = params.ctype || "application/json";
		var where = params.where || "";
		var headers = params.headers || {};
		var gettingToken = params.token || false;
		var username = params.username || "";
		var password = params.password || "";
		
		var returnValue = params.returnValue || "JS object";
		
		var alreadyImportedCert = false;
		
		if (url && !url.startsWith("/")) url = "/" + url;
		
		// Empty out the requestEntry before setting it up for the call
		this.requestEntry.removeAllAttributes();
		
		// Prepend the host (baseURL) if not already there
		if (url.toLowerCase().indexOf(this.baseUrl.toLowerCase()) < 0) {
			if (this.baseUrl.endsWith("/")) {
				this.baseUrl = this.baseUrl.substring(0, this.baseUrl.length-1) // remove / at end of baseUrl if found
			}	
			url = this.baseUrl + url;
		}
		
		// If a body is passed, this must be a POST (I think)
		if (typeof body !== "undefined" && body !== null) {
			verb = "POST";
	
			if (typeof body != "string") {
				this.requestEntry["http.body"] = toJson(body);
			} else {
				this.requestEntry["http.body"] = body;
			}
		}	
		
		// Set up the global HTTP Connector
		this.http.setParam("method", verb.toUpperCase());
		this.http.setParam("url", url);
		this.http.setParam("username", username);
		this.http.setParam("password", password);
	
		// Now set up the request entry
		this.requestEntry["http.url"] = url;
		this.requestEntry["http.method"] = verb.toUpperCase();
		this.requestEntry["http.Content-Type"] = ctype;
		this.requestEntry["http.remote_user"] = username;
		this.requestEntry["http.remote_password"] = password;
		
		this.requestEntry["http.Accept"] = "application/json";
		this.requestEntry["http.Connection"] = "keep-alive";
		
		for (var hdr in headers) {
			this.requestEntry["http." + hdr] = headers[hdr]
		}
		
		if (this.debug) {
			this.logDetails({msg : "Request to itim", 
						obj : this.httpEntry(this.requestEntry, true), 
						url : url, 
						verb : verb, 
						ctype : ctype, 
						where : where,
						sent: true});
		}
	
		// Reinitialize the HTTP Client connector so the updated parameters are applied
		this.http.terminate();
		this.http.initialize(null);
	
		alreadyImportedCert = false; 
		var reply = null;
		// Make the call
		do {
			var retry = false;
			try {	
				this.alert("\nMaking call:" + this.requestEntry + "\n");
				
				// Set cookies
				this.requestEntry["http.Cookie"] = this.getCookies(); // In case these have been changed since last time
		
				var retEntry = this.http.queryReply(this.requestEntry);

				// Grab any cookies if found
				if (retEntry["http.Set-Cookie"]) {
					this.cookieArrayList.add(retEntry.getString("http.Set-Cookie"));
				}

				// Grab the CSRFToken if found
				if (retEntry.getString("http.CSRFToken")) {
					this.CSRFToken = httpReply.getString("http.CSRFToken");
				}	
				
				// Now to decide what to return, based on the returnValue argument passed in
				if (returnValue == "cookie") {
					reply = retEntry
				} else
				if (returnValue == "JS object") {
					reply = this.parseReply(retEntry);
				} else {
					reply = retEntry
				}	
			} catch (ex) {
				//if (form && this.debug) this.alert("Exception: " + ex);
				
				// If the token has expired, get a new one
				if (ex.toString().indexOf("Unauthorized") >= 0) {
					this.getToken();
					retry = true
				} else
				// Else if we first must import the client cert, then do so. The Server must be restarted after.
				if (ex instanceof javax.net.ssl.SSLHandshakeException) {
					if ((ex.toString().indexOf("Certificate chaining error") >= 0) && alreadyImportedCert) {
						this.throwException("You must restart the SDI server in order for the imported certificate to be trusted.")
					}
					this.getCertificate();
					alreadyImportedCert = true;
					retry = true;
				} else
				// If a redirect - follow the redirect
				if (retEntry.getString("http.responseCode").startsWith("3")) {
					requestEntry["http.url"] = retEntry.getString("http.Location")
 					retry = true;
				} else {
					throw ex;
				}	
			}
		} while (retry);
		
		retEntry["http.url"] = "http://" + retEntry["http.host"] + retEntry["http.base"];
		retEntry.removeAttribute("http.url");
		retEntry.removeAttribute("http.base");
		retEntry.removeAttribute("http.host");
		retEntry.removeAttribute("http.method");
		
		if (this.debug) {
			this.logDetails({msg : "Response from itim", 
						obj : this.httpEntry(retEntry),
					    entry : retEntry});
		}
		
		//if (form && this.debug) this.alert("reply: " + toJson(reply));
		
		return reply;
	}
	
	// Handle terminate to close the connector
	this.terminate = function() {
		this.http.terminate();
		this.token = null;
		this.sessionId = null
	}
	
	// Handle alerting - @@ DISABLED for now
	this.alert = function(msg) {
		if (!this.debug) continue;
		main.logmsg(msg);
		java.lang.System.out.println(msg)
	}	
		
	
	// Get the client certificate from the server and import it to the TDI keystore
	this.getCertificate = function() {
		this.logmsg("! Getting client cert");
		var msg = com.ibm.di.security.GetSSLCertificate.installCertificateFrom(this.baseUrl, 443);
		this.logmsg("! Result: " + msg)
	}
	
	this.getToken_OLD = function() {
		var reply = this.makeRequest({
				token: true, // Getting a token
				verb: "POST",
				url: this.authUrl,
				ctype: "application/json",
				where: "getToken()",
				headers: {
					Authorization: "Bearer " + this.apikey
				},
				body: {
					username: this.username,
					password: this.password
				}
		});
		
		this.token = reply.csrftoken || "";
		this.sessionId = reply.sessionId || ""
	}
	
	// Log specifics arguments passed to makeRequest()
	this.logDetails = function(params, sent) {
		sent = sent || false;
		var msg = params.msg;
		var obj = params.obj; 
		var url = params.url;
		var verb = params.verb;
		var ctype = params.ctype; 
		var where = params.where;
		
		if (!this.debug) continue;
		
		if (msg == null) {
			msg = "*unknown entry*";
		}
	
		var s = new java.lang.StringBuffer();
/*		
		if (where != null) {
			s.append("\n<<" + where + ">> " + msg);
		} else {
			s.append("\n---------> " + msg);
		}
*/		
		
		if (verb != null) { s.append("   " + verb.toUpperCase()); } 
		if (ctype != null) { s.append("   " + ctype); } 
		if (url != null) { s.append("   " + url); } 
		s.append("\n");
	
		if (obj != null) {
			if (obj instanceof com.ibm.di.entry.Entry) {	
				s.append(this.httpEntry(obj, sent))	
			} else {
				s.append(obj.toString());
			}
		}	
	
		this.logmsg(s.toString());
	}

	this.throwException = function(msg) {
		throw new java.lang.Exception(msg);
	}

	// Checks the validity of the reply and sets up for Iteration
	this.parseReply = function(replyEntry) {
		if (replyEntry === null) { return } 
		
		var status = replyEntry.getString("http.responseCode");
	
		// Check the return status
		if (status == "401") { // Unauthorized - time to renew the token
			this.throwException("Unauthorized")
		}
		if (!status.startsWith("2")) {
			this.throwException("Error response from ITIM. Response code: " 
								+ status
								+ "    Message: " + replyEntry.getString("http.responseMsg"));
		}
		
		// Now parse the body
		var body = replyEntry.getString("http.bodyAsString");
	
		try {
			var reply = fromJson(body);
		} catch (ex) {
			this.throwException("Error parsing return payload from itim: " + ex.toString()
							+ "\n*** dump of reply ***\n" 
							+ replyEntry)
		}
			
		return reply;
	}
	
	// Left justified text
	this.LJ = function(txt, len) {
		txt = txt || "";
		len = len || txt.length;
		return (txt + "                                                       ").substring(0, len)
	}
	
	// Returns a string with legible listing of important attributes and their values
	this.httpEntry = function(entry, sent) {
		if (!entry) return "";
		
		sent = sent || false;
		var txt = sent ? "--->>>> Request:\n" : "<<<<--- Response:\n";
	
		for (var att in entry) {
			var name = att.getName();
			var val = att.getValue();
			if (val && name.indexOf("tcp.") < 0 
				&& typeof val != "object" && typeof val !=  "com.ibm.di.entry.Attribute" 
				&& !(val instanceof Array) && !val.startsWith("[B@")) {
				txt += "  " + this.LJ(name + ": ", 25) + val + "\n"
			}
		}
		
		return txt
	}

	// Own logmsg() to aid in debugging
	this.logmsg = function(lvl, msg) {
		if (!lvl) { // undefined, and allows just a call to this.logmsg() to log a carriage return
			lvl = "INFO";
			msg = ""
		} else
		if (!msg) {
			msg = lvl;
			lvl = "INFO"
		}
		
		if ("DEBUG".equalsIgnoreCase(lvl)) {
			// Write to console out also
			java.lang.System.out.println("|" + this.LJ(lvl,5) + "| " + msg);
		}
		
		//if (form && this.debug) this.alert("RESTCLIENT.logmsg: " + msg);
		//this.alert("task: " + (typeof task) + " - " + (task instanceof com.ibm.di.server.AssemblyLine));
		
		// This to allow it to be used by Connector Form Event script
		//if (task && task instanceof com.ibm.di.server.AssemblyLine) 	task.logmsg(lvl, msg)
		main.logmsg(lvl, msg);
		java.lang.System.out.println(((lvl == "INFO") ? "" : lvl) + msg)
	}	
}]]></parameter>
        </Script>
    </Folder>
    <JavaLibraries/>
    <JavaProperties/>
    <Folder name="Includes"/>
    <Folder name="Config">
        <LogConfig name="Logging"/>
        <InstanceProperties name="AutoStart">
            <AutoStart/>
        </InstanceProperties>
        <TombstonesConfig name="Tombstones"/>
        <SolutionInterface name="SolutionInterface"/>
    </Folder>
    <Folder name="Functions"/>
    <Folder name="AttributeMaps"/>
    <Properties name="Properties">
        <Stores>
            <PropertyStore name="Solution-Properties">
                <Parser/>
                <RawConnector>
                    <InheritFrom>system:/Connectors/ibmdi.Properties</InheritFrom>
                    <parameter name="collectionType">Solution-Properties</parameter>
                </RawConnector>
                <Key>key</Key>
                <Value>value</Value>
                <ReadOnly>false</ReadOnly>
                <InitialLoad>true</InitialLoad>
                <CacheTimeout>0</CacheTimeout>
            </PropertyStore>
            <PropertyStore name="Global-Properties">
                <Parser/>
                <RawConnector>
                    <InheritFrom>system:/Connectors/ibmdi.Properties</InheritFrom>
                    <parameter name="collectionType">Global-Properties</parameter>
                </RawConnector>
                <Key>key</Key>
                <Value>value</Value>
                <ReadOnly>false</ReadOnly>
                <InitialLoad>true</InitialLoad>
                <CacheTimeout>0</CacheTimeout>
            </PropertyStore>
            <PropertyStore name="System-Properties">
                <Parser/>
                <RawConnector>
                    <InheritFrom>system:/Connectors/ibmdi.Properties</InheritFrom>
                    <parameter name="collectionType">System-Properties</parameter>
                </RawConnector>
                <Key>key</Key>
                <Value>value</Value>
                <ReadOnly>false</ReadOnly>
                <InitialLoad>true</InitialLoad>
                <CacheTimeout>0</CacheTimeout>
            </PropertyStore>
            <PropertyStore name="Java-Properties">
                <Parser/>
                <RawConnector>
                    <InheritFrom>system:/Connectors/ibmdi.Properties</InheritFrom>
                    <parameter name="collection">@SUBSTITUTE{config.$directory}/_Restify.properties</parameter>
                    <parameter name="collectionType">Java-Properties</parameter>
                </RawConnector>
                <Key>key</Key>
                <Value>value</Value>
                <ReadOnly>false</ReadOnly>
                <InitialLoad>true</InitialLoad>
                <CacheTimeout>0</CacheTimeout>
            </PropertyStore>
        </Stores>
    </Properties>
    <Folder name="Schedules"/>
    <Folder name="Sequences"/>
</MetamergeConfig>