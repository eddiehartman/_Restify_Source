<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="136" UUID="8554a4c8-34fd-4c49-97fe-4a8808811c6d" created="Mon Dec 30 19:09:06 CET 2024" createdBy="eddiehartman" main="__testService" modified="Wed Apr 02 20:06:03 CEST 2025" modifiedBy="eddiehartman" project="_Restify" version="7.1.1">
    <AssemblyLine name="__testService">
        <ModTime>1743617163402</ModTime>
        <Settings/>
        <Hooks/>
        <CheckpointConfig/>
        <SandboxConfig/>
        <SimulationConfig>
            <SimulationStates>
                <Component name="Script lib" state="Enabled"/>
                <Component name="Handle call" state="Enabled"/>
                <Component name="Log it" state="Enabled"/>
                <Component name="HTTPServerConnector" state="Enabled"/>
            </SimulationStates>
            <ProxySettings/>
        </SimulationConfig>
        <LogConfig/>
        <ContainerEF name="EntryFeedContainer">
            <Connector name="HTTPServerConnector">
                <InheritFrom>system:/Connectors/ibmdi.HTTPServer</InheritFrom>
                <ModTime>1738503303908</ModTime>
                <ConnectorMode>Server</ConnectorMode>
                <ConnectorState>Disabled</ConnectorState>
                <Configuration>
                    <InheritFrom>[parent]</InheritFrom>
                    <parameter name="tcpPort">8080</parameter>
                </Configuration>
                <Parser>
                    <InheritFrom>[parent]</InheritFrom>
                </Parser>
                <AttributeMap name="Input">
                    <InheritFrom>[parent]</InheritFrom>
                    <AttributeMapItem>
                        <Name>*</Name>
                        <Type>simple</Type>
                        <Simple>*</Simple>
                    </AttributeMapItem>
                </AttributeMap>
                <AttributeMap name="Output">
                    <InheritFrom>[parent]</InheritFrom>
                    <AttributeMapItem>
                        <Name>*</Name>
                        <Type>simple</Type>
                        <Simple>*</Simple>
                    </AttributeMapItem>
                </AttributeMap>
                <DeltaSettings/>
                <Schema name="Input">
                    <InheritFrom>[parent]</InheritFrom>
                </Schema>
                <Schema name="Output">
                    <InheritFrom>[parent]</InheritFrom>
                </Schema>
                <LinkCriteria>
                    <InheritFrom>[parent]</InheritFrom>
                </LinkCriteria>
                <Hooks>
                    <InheritFrom>[parent]</InheritFrom>
                    <Hook name="before_reply">
                        <InheritFrom>[no inheritance]</InheritFrom>
                        <Name>before_reply</Name>
                        <Script>task.logmsg("&gt;&gt;&gt; Making response: \n" + conn.toJSON());</Script>
                        <Enabled>true</Enabled>
                    </Hook>
                </Hooks>
                <CheckpointConfig/>
                <SandboxConfig/>
                <Reconnect>
                    <InheritFrom>[parent]</InheritFrom>
                    <ReconnectRules/>
                </Reconnect>
                <Operations/>
                <PoolDefinition>
                    <InheritFrom>[parent]</InheritFrom>
                </PoolDefinition>
                <PoolInstance/>
            </Connector>
        </ContainerEF>
        <ContainerDF name="DataFlowContainer">
            <Script name="Script lib">
                <ModTime>1737731706881</ModTime>
                <parameter name="enabled">true</parameter>
                <parameter name="script"><![CDATA[var authReturn = {
  csrftoken: "token-xyz",
  sessionId: "session-xyz",
  user: {
    id: "12345",
    name: "Edbird"
  }	
}

// Returns a string with legible listing of important attributes and their values
function httpEntry(entry, sent) {
	sent = sent || false;
	var txt = sent ? "--->>>> Request:\n" : "<<<<--- Response:\n";

	for (var att in entry) {
		var name = att.getName();
		var val = att.getValue();
		if (val && name.indexOf("tcp.") < 0 
			&& typeof val != "object" && typeof val !=  "com.ibm.di.entry.Attribute" 
			&& !(val instanceof Array) && !val.startsWith("[B@")) {
			txt += "  " + this.LJ(name + ": ", 25) + val + "\n"
		}
	}
	
	return txt
}


function getString(e, attname) {
	return e.getString(attname) || "** " + attname + " not specified **"
}

function bodyHas(req, props) {
	var body = req.getString("http.bodyAsString");
	try {
		var creds = fromJson(body);		
	} catch (ex) {
		task.logmsg("ERROR", "Cannot parse http.body - " + e + ": " + body);
		return false
	}

	for (var p in props) {
		if (!req[p] == props[p]) {
			task.logmsg("ERROR", "Credentials " + p + " does not match: " + req[p]);
			return false	
		}
	}
	
	return true
}

function fail(msg) {
	task.logmsg("FATAL", msg);
	work.removeAllAttributes();
	work["http.responseCode"] = 400;
	work["http.responseMsg"] = msg;
	work["http.body"] = toJson({
		error: msg,
		base_received: base
	})
	system.exitFlow()
}

// Left justified text
function LJ(txt, len) {
	txt = txt || "";
	len = len || txt.length;
	return (txt + "                                                       ").substring(0, len)
}

function httpEntry(entry, sent) {
	sent = sent || false;
	var txt = sent ? "--->>>> Request:\n" : "<<<<--- Response:\n";

	for (var att in entry) {
		var name = att.getName();
		var val = att.getValue();
		if (val && name.indexOf("tcp.") < 0 
			&& typeof val != "object" && typeof val !=  "com.ibm.di.entry.Attribute" 
			&& !(val instanceof Array) && !val.startsWith("[B@")) {
			txt += "  " + LJ(name + ": ", 25) + val + "\n"
		}
	}
	
	return txt
}

function handleAuth(req) {
	if (getString(req, "http.method") != "POST") {
		fail("You must POST an auth request, instead of " + getString(req, "http.method"))
	} else
	if (getString(req, "http.content-type").equalsIgnoreCase("appliation/json")) {
		fail("Request type must be application/json but is instead '" + requ.getString("http.content-type"))
	} else
	if (getString(req, "http.Authorization").toLowerCase().indexOf("xyz") < 0) {
		fail("Authorization code is wrong: " + request.getString("http.authorization"))
	} else
	if (!bodyHas(req, {username: "edbird", password: "R0kz"})) {
		fail("Username/password invalid: " + getString("http.bodyAsString"))
	}

	req["http.body"] = toJson(authReturn);
	req["http.responseCode"] = 200
}

function handleGetAccounts(req) {
	if (getString(req, "http.method") != "GET") {
		fail("You must GET person accounts, instead of " + req["http.method"])
	} else
	if (getString(req, "http.content-type").equalsIgnoreCase("appliation/json")) {
		fail("Request type must be application/json but is instead '" + req["http.content-type"])
	} /* else
	if (getString(req, "http.X-CRF-TOKEN").toLowerCase().indexOf("xyz") < 0) {
		fail("Access token is wrong: " + req["http.X-CRF-TOKEN"])
	} */

	req["http.body"] = system.getScriptText("__testService_getReturn");
	req["http.responseCode"] = 200
}

function handleSchema(req) {
	req.removeAllAttributes();
	req["http.responseCode"] = 200;
	req["http.responseMsg"] = "OK"
	req["http.Content-Type"] = "YAML or JSON OpenAPI Schema, I presume ";
	req["http.body"] = system.getScriptText("itim_swagger.json");
	req["http.responseCode"] = 200
}]]></parameter>
            </Script>
            <Script name="Handle call">
                <ModTime>1737731618683</ModTime>
                <parameter name="enabled">false</parameter>
                <parameter name="script"><![CDATA[// Dump the work entry
task.logmsg("\n<<<<<--- Request: " + httpEntry(work));

base = work.getString("http.base");

if (base.endsWith("/schema")) {
	task.logmsg("Schema request...");
	handleSchema(work);
	task.logmsg("Schema sent!");
} else
if (base.endsWith("/token")) {
	task.logmsg("Authorizing...");
	handleAuth(work);
	task.logmsg("Authorized!")
} else
if (base.indexOf("/accounts") > 0) {
	task.logmsg("Returning accounts...");
	handleGetAccounts(work);
	task.logmsg("Accounts returned!")
}

task.logmsg("\n--->>>> Reply: " + httpEntry(work));]]></parameter>
            </Script>
            <Script name="Log it">
                <ModTime>1737731753884</ModTime>
                <parameter name="script"><![CDATA[java.lang.System.out.println("\n\nRECEIVED: " + httpEntry(work));
task.logmsg("\n\nRECEIVED: " + httpEntry(work))]]></parameter>
            </Script>
        </ContainerDF>
        <ThreadOptions/>
        <Operations/>
        <InitParams>
            <Schema name="AssemblyLineInitParams"/>
        </InitParams>
    </AssemblyLine>
</MetamergeConfig>