<?xml version="1.0" encoding="UTF-8"?><MetamergeConfig Cycle="993" UUID="5ce199ef-895c-40ee-9fc2-5cb8ee523bba" created="Wed Dec 11 22:20:03 CET 2024" createdBy="eddiehartman" main="_testScriptConnectorCode 20250211 1758 Handling Parameter parameter" modified="Wed Apr 02 20:06:05 CEST 2025" modifiedBy="eddiehartman" project="_Restify" version="7.1.1">
    <AssemblyLine name="_testScriptConnectorCode 20250211 1758 Handling Parameter parameter">
        <ModTime>1743617165737</ModTime>
        <Settings>
            <parameter name="ALPoolSettingsDialog">showALPoolSettings</parameter>
            <parameter name="automapattributes">false</parameter>
            <parameter name="createTombstones">false</parameter>
            <parameter name="includeGlobalPrologs">true</parameter>
            <parameter name="includePrologs"><![CDATA[RESTIFY library class
SCHEMA class
RESTCLIENT class
]]></parameter>
            <parameter name="nullBehaviorDialog">showNullBehavior</parameter>
        </Settings>
        <Hooks/>
        <CheckpointConfig/>
        <SandboxConfig/>
        <SimulationConfig>
            <SimulationStates>
                <Component name="SpoofLib" state="Enabled"/>
                <Component name="Connector Form Event Script" state="Enabled"/>
                <Component name="Test Form Event Script" state="Enabled"/>
                <Component name="Connector Script" state="Enabled"/>
                <Component name="Test Connector Script" state="Enabled"/>
                <Component name="Connector Form Event Script_1" state="Enabled"/>
                <Component name="RestClientConnector" state="Enabled"/>
                <Component name="DumpWorkEntry" state="Enabled"/>
                <Component name="Set up parameter value" state="Enabled"/>
                <Component name="Code parameters Param handling" state="Enabled"/>
            </SimulationStates>
            <ProxySettings/>
        </SimulationConfig>
        <LogConfig/>
        <ContainerEF name="EntryFeedContainer"/>
        <ContainerDF name="DataFlowContainer">
            <Script name="SpoofLib">
                <ModTime>1739287846076</ModTime>
                <parameter name="script"><![CDATA[function spoofing(args) {
	this.querymode = args.querymode || 0;
}

__forceQueryMode = "";

function control(val) {
	this.val = val;
	
	this.getText = function() {
		return this.val
	}
	
	this.removeAll = function() {
		
	}
	
	this.add = function(arg) {
		
	}
	
	this.select = function(arg) {
		
	}
	
	return this
}

form = {
	getControl: function(pname) {
		switch (pname.toLowerCase()) {
			case "action": 	 	return control("get");
			case "apikey": 	 	return control("xyzzy");
			case "schema":	 	return control("/schema");
			case "authurl":  	return control("/v1.0/endpoint/default/token");
			case "debug": 	 	return control(true);
			case "path": 	 	return control("/people/{personId}");
			case "password": 	return control("R0kz");
			case "url": 	 	return control("http://localhost:8080");
			case "username": 	return control("edbird");
			case "item": 		return new control("/people");
			case "action": 		return new control("post");	
			case "searchcrit": 	return new control("NO12345");
			case "querymode" : 	if (!__forceQueryMode) {
									return new control("Data");
								} 
								else return new control(__forceQueryMode); // Available parameters or Data from REST call
			case "parameters":  return new control("attributes=name,rank,serialnumber\rembedded=manager\rforms=false\rboogy=woogy\rignoreme=\randme")
			default: 		 	return control("*Invalid param: " + pname + "*")
		}
	},
	alert: function(msg) {
		main.logmsg(msg)
	}
}


connector = {
	getParam: function(pname) {
		var ctrl = form.getControl(pname);
		return ctrl.getText();
	}	
}


/*
combo = {
	text: "",
	getText: function() { return txt },
	removeAll: function() {},
	add: function() {},
	select: function() {}
}	
*/
COMBO = function(value) {
	this.value = string = value;
	this.getText = function() {return this.value};
	this.add = function() {};
	this.select = function() {};
	this.removeAll = function() {}
}

list = new java.util.ArrayList();

entry = system.newEntry();
entry[""]]]></parameter>
            </Script>
            <Script name="Connector Form Event Script">
                <ModTime>1738095914651</ModTime>
                <parameter name="enabled">false</parameter>
                <parameter name="script"><![CDATA[// 20250104 1959 Initial
// 20250121 1154 Created RESTCLIENT class and used that instead of lots of functions
// 20250121 2047 Copied back test Event Script after _testScriptConnectorCode succeeded in testing Form code
// 20250121 2103 Form Working! Now to look at Mode ops (putEntry, findEntry, ...)
// 20250128 1608 Hardened the fetchActions and fetchItems so it checks for schema first
//
//						GLOBAL VARIABLES
//
var __schema = null;
var __initialized = false;
//var __lib = null;

//
//							FUNCTIONS
//

function debug() {
	return false;
	return form.getControl("debug").getText()
}

function alert(msg) {
	if (debug()) alert(msg);
	main.logmsg(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (__initialized) return;
	__initialized = true;
	
	//alert("Initializing...");
	//eval(system.getScriptText("RESTIFY library class")); // Load script library class
	//__lib = new RESTIFY();

	eval(system.getScriptText("RESTCLIENT class")); // Load HTTP Client class
	
	// Recreate in case parameters are changed
	__http = new RESTCLIENT({
						baseUrl:  form.getControl("url").getText(),
						authUrl:  form.getControl("authUrl").getText(),
						apikey:   form.getControl("apikey").getText(),
						username: form.getControl("username").getText(),
						password: form.getControl("password").getText(),
						schemaUrl: form.getControl("schema").getText(),
						debug: debug() // true => debug output
				})		
}

// Return the openAPI schema - @TEST hardcoded for now
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	initialize();

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: "/schema",
			authUrl: form.getControl("authUrl").getText(),
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Update the dropdown with paths
function fetchItems() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")
	//alert("---> fetchItems");

	initialize();

	path = "paths";

    updateDropdown("path",
        [path],
        "Cannot fetch actions for Path");
        
	fetchActions()
}

// Update the dropdown with opera tions for the selected path
function fetchActions() {
	if (!__schema) throw java.lang.Exception("You must request the Schema first")
	
	initialize();
	
    var selectedItem = form.getControl("path").getText() || "";
	// alert("fetchActions() for " + selectedItem);

    updateDropdown("action",
        ["paths", selectedItem],
        "Cannot fetch actions for Path: " + selectedItem)
}

// Update dropdown based api
function updateDropdown(controlName, path, errorMsg) {
    try {
    	alert("updateDropdown("
    			+ controlName
    			+ ", " + path + ", errmsg)");

	    initialize();
		
        if (!path) {
        	alert("updateDropdown() - Path parameter must be set");
        	return	
        };

        var subtree = __schema.getChildren(path);
        
        if (subtree == null) {
        	path.shift();
        	alert("Invalid item path: " + path.toString());
        	return
        }
        
		combo = form.getControl(controlName);
		combo.removeAll(); // Empty drop-down

		var arrList = java.util.ArrayList();
        for (var propName in subtree) {
        	arrList.add(propName);
        }
        var arr = arrList.toArray();
        java.util.Arrays.sort(arr);
    			
        for (var propName in arr) {
            //alert("   ..adding " + res);
            combo.add(propName)
        }

        alert("drop-down updated!");

        combo.select(0)

    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        alert(msg);
        throw msg
    }
}

// Empty out both Item and Object dropdowns
function clearDropdowns() {
	form.getControl("path").removeAll();
	form.getControl("action").removeAll()	
}

// For debugging from inside 
function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("_Restify/Log_" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]></parameter>
            </Script>
            <Script name="Test Form Event Script">
                <ModTime>1738095916831</ModTime>
                <parameter name="enabled">false</parameter>
                <parameter name="script"><![CDATA[//initialize();
fetchSchema();
fetchItems();
fetchActions();

i = 42;]]></parameter>
            </Script>
            <Script name="Connector Script">
                <ModTime>1739290623827</ModTime>
                <parameter name="enabled">true</parameter>
                <parameter name="script"><![CDATA[// 20250104 2008 Initial
// 20250111 1915 Handling queryParameters in url
// 20250126 1901 Adding queryMode for querySchema to return either params, or schema of data
// 20250127 1346 initialize(), terminate(), selectEntries() and a test queryReply() in place
// 20250127	1854 maded querySchema drop the token in the parameters returned
// 20250128 1503 selectEntries and getNextEntry implemented - ready for more testing I'm sure :)
// 20250128 1705 Added the check for spoofing
// 20250128 2136 querySchema() can now return either parameters or data when you press Connect and Next in the Schema pane
// 20250130 1207 Hopefully now
// 20250130 1221 Fixing it in place in the Connector
// 20250131 1928 Gonna get querySchema to work right
// 20250131 2009 Now looking at getNextEntry() so I can return parameter descriptions with Connect + Next if querySchemaMode == Parameters
// 20250131 2033 Something still not right - alas, tomorrow
// 20250202 1313 Looking for my "entry not found" error when Connect while queryMode == Data
// 20250202 1407 Connect working for both settings!!!! 
// 20250202 1453 getNextEntry for Connect + Next now it's working!
// 20250207 1819 looking at selectEntries and getNextEntry, as well as findEntry, putEntry and modEntry. Tonight!!!
//          1917 Nope - manana
// 20250210 2024 Fixed mock server for people put, delete and servers - I hope
//
//
// --- TODO Freetext parameter where all the standard set of parameter values can be set
//                                        
//
//						GLOBAL VARIABLES
//
var __parameters = {};						// params for the chosen path and action
var __debug = connector.getParam("debug");	// debug output?
var __schema = null;						// shared openAPI schema object (SCHEMA class)
var __initialized = false;					// Do I need this?
var __emptyEntry = system.newEntry();		// for craftQueryString
var __http = null; 							// for the RESTCLIENT we will use for the calls
var __resultSet = null;						// A container for returned entries (selectEntries/findEntry)
var __resultSetIndex = 0;					// Index into the result set
var __forceQueryMode = "";
var __formEventCalling = false;

var spoofing = false;

var __paramNames = {
	action: true,
	apikey: true,
	schema: true,
	authUrl: true,
	debug: true,
	path: true,
	password: true,
	url: true,
	username: true,
	item: true,
	action: true,
	queryMode: true,
	searchCrit: true,
	includeUIDs: true,
	parameters: true
}

//
//							FUNCTIONS
//



function connParamField2Entry(connParams) {
	var paramsEntry = system.newEntry();
	var paramSetting = connParams.parameters;
	var lines = paramSetting.split(/\r?\n|\r/);
	for (var lineIndex = 0; lineIndex < lines.length; lineIndex++){
		var thisLine = lines[lineIndex];
		var parts = thisLine.split("=");
		var paramName = parts[0].trim();
		var paramValue = (parts.length > 1) ? parts[1].trim() : "";
		
		if (paramValue) {
			paramsEntry[paramName] = paramValue
		}
	}
	
	return paramsEntry
}

function craftQueryString(args) {
	var path = args.path;
	var action = args.action;
	var connParams = args.connParams;
	var useParams = args.queryParams || {};
	var entry = args.entry || __emptyEntry;
	
	var embeddedUID = __schema.getEmbeddedUID(path);

	var paramsEntry = connParamField2Entry(connParams);
	
	var queryParams = [];
	for (var i in useParams) {
		var param = useParams[i];
		var paramName = param.name;
		if (param["in"] == "query" || true) {
			if (entry[paramName] != null || paramsEntry[paramName] != null) {
				paramValue = paramsEntry[paramName] ? paramsEntry[paramName].getValue() : entry[paramName].getValue(0);
				if (paramValue != null) {
					queryParams.push(paramName + "=" + paramValue)
				}
			}
		}	
	}
	
	return queryParams.join("&")
}

function fixUrl(url) {
	if (!url.endsWith("/")) {
		return url + "/";
	} else {
		return url;
	}
}

function debug() {
	return __debug;
}

// Rest the connector and re-initialize it in case parameters have changed
function resetConnector() {
	__initialized = false;
	__resultSetIndex = 0;
	
	
	// Now zero out the __resultSet global ArrayList
	__resultSet = new java.util.ArrayList();

	if (typeof list != "undefined") list.clear(); // so it works while spoofing
	if (__http != null) __http.terminate();
	
	// Renew the RESTCLIENT with the currently set parameters
	if (!RESTCLIENT) eval(system.getScriptText("RESTCLIENT class"));
	__http = new RESTCLIENT({
						baseUrl:   __parameters.url,
						authUrl:   __parameters.authUrl,
						apikey:    __parameters.apikey,
						username:  __parameters.username,
						password:  __parameters.password,
						schemaUrl: __parameters.schema,
						debug: 	   debug() // true => debug output		
					})
}

// Change the URL path so the UID placeholder is replace with the Attribute value
function replaceUID(path, entry) {
	
}

// Turn the JS object returned from a call into the global entry object
function toEntry(obj, entry) {
	var connParams = refreshParameters();
	entry = entry || system.newEntry();

	//main.logmsg("toEntry() - includeUIDs: " + connector.getParam("includeUIDs"))
	
	for (var propName in obj) {
		// skip _links
		if (propName.equalsIgnoreCase("_links") && !connParams.includeUIDs) continue;
		for (var subPropName in obj[propName]) {
			if (typeof(subPropName) != "string") {
				//main.logmsg("toEntry() - !!!!!!!! subPropName not string: " + subPropName);
			} else {
				var newVal = beautifyValue(obj[propName][subPropName]);
				/*
				var prepend = (propName.equalsIgnoreCase("_links") ? propName + "_" : "");
				
				// For _links we must prepend the propName to the Attribute name
				subPropName = prepend + subPropName;
				*/
				if (newVal.toLowerCase().startsWith("erglobalid=")) {
					//main.logmsg("FOUND erglobalid value for " + subPropName)
					if (!connParams.includeUIDs) continue;	
				}
				
				//main.logmsg("toEntry() - adding " + subPropName + " - " + obj[propName][subPropName]);
				entry[subPropName] = newVal
			}
		}
	}
	
	//main.logmsg("toEntry - Complete: \n" + entry)
	
	return entry // Not necessary, since entry is global in the Connector context - I just like doing it :)
}

function debugMsg(msg) {
	if (__debug) {
//		task.logmsg(msg);
		main.logmsg(msg);
		java.lang.System.out.println(msg)
	}
}

function alertObject(objName, obj) {
	debugMsg("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	debugMsg(arr.toString())
}

// Return the openAPI schema
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: __parameters.schema,
			authUrl: __parameters.authUrl,
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Parse the openAPI schema
function parseSchema() {
	if (__schema) return __schema;

	// @@TODO Make actual call
	debugMsg("Fetching schema...")
	//var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	//var schemaJSON = fetchSchema();

	//debugMsg("Creating SCHEMA object");
	__schema = fetchSchema();

	//var toplvl = "";
	//for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
	//debugMsg("SCHEMA -> " + toplvl)

	//debugMsg("Got it!");
	return __schema
}

function refreshParameters() {
	var path = connector.getParam("path");
	//if (!path) throw new java.lang.RuntimeException("Path parameter has not been set")
	var action = connector.getParam("action");
	// if (!action) throw new java.lang.RuntimeException("Action parameter has not been set")

	__parameters = {};
	
	for (var paramName in __paramNames) {
		//java.lang.System.out.println("> " + paramName);
		__parameters[paramName] = connector.getParam(paramName);
	}
	
	return __parameters
}

function beautifyValue(val) {
	//main.logmsg("beautifyValue() - " + val);
	if (typeof(val) != "object") return val;
	
	try {
		var newVal = toJson(val);
		
		//main.logmsg("!!! It IS JSON !!!");
		if (val.description) newVal = val.description;
		//main.logmsg("--- Returning: '" + newVal + "'");
		return newVal;
	} catch (ex) {
		return val
	}
}



//
// -------  Standard Connector functions 
//
function initialize() {
	refreshParameters();
	resetConnector();
	parseSchema()
}

function terminate() {
	resetConnector()
}

// CallReply function
function queryReply() {
	// Get latest settings in case changed
	var connParams = refreshParameters();
	
	// Embed mapped parameters into the path
	java.lang.System.out.println("queryReply() - entry: " + entry);
	main.logmsg("queryReply() - entry: " + entry);
	
	var usePath = __schema.replaceEmbeddedUID(connParams.path, entry);

	// Now for queryParameters
	var queryParams = __schema.getParameters(connParams.path, connParams.action);
	
	var queryString = craftQueryString({
		path: usePath,
		connParams: connParams,
		queryParams: queryParams,
		action: connParams.action,
		entry: entry
	});
	
	// If there is a queryString, prepend it with ?
	queryString = queryString ? "?" + queryString : "";
	
	// Make the REST call @@TODO Only does GET for now
	var reply = __http.makeRequest({
			verb: "GET", // @@TODO Must figure out how to set the HTTP verb based on the schema
			url: usePath + queryString,
			ctype: "application/json",
			where: "queryReply()"
	});

	java.lang.System.out.println("Reply: " + entry.fromJSON(toJson(reply)));

	toEntry(reply, entry);
	return entry
}

// Since this function is being double-purposed, to also retrieve parameters for the Schema pane
// I have to add more logic that is not necessary for normal connector operations.
function selectEntries() {
	// Clear out the selected array of entries and set the index to 0
	__resultSetIndex = 0;
	if (typeof(form) == "undefined") __resultSet.clear();
	
	// Always refresh connParams to catch any user changes
	var connParams = refreshParameters();
	
	// So this code works in my testScriptConnectorCode AL
	if (typeof(entry) == "undefined") var entry = system.newEntry();
	
	// Return either the parameters from the path + action from the openAPI schema, which means 
	// you can use Connect + Next to list all available parameters w/ descriptions...
	if (connParams.queryMode == "Parameters" || typeof(task) == "undefined") {
		var restParams = __schema.getParameters(connParams.path, connParams.action);
		
		for (var i in restParams) {
			var paramName = restParams[i].name;
			//main.logmsg("getNextEntry() - " + paramName + " - " + beautifyValue(restParams[i]))
			entry[paramName] = beautifyValue(restParams[i]);
		}
		
		__resultSet.add(entry)
	} else {
		// ...else work like getNextEntry() usually does and return data
		
		// This the search filter parameter in the Connections tab
		var personId = connParams.searchCrit;
		if (!personId) throw java.lang.Exception("Search criteria (personId) must be configured")
		
		// Get the path and replace id's as required
		var usePath = __schema.replaceEmbeddedUID(connParams.path, personId);
	
		// Now for queryParameters
		var queryParams = __schema.getParameters(connParams.path, connParams.action);
		
		var queryString = craftQueryString({
			connParams: connParams,
			path: usePath,
			queryParams: queryParams,
			action: connParams.action,
			entry: entry
		});
		
		// If there is a queryString, prepend it with ?
		queryString = queryString ? "?" + queryString : "";
		
		//main.logmsg("selectEntries for Data - making call");
		
		// Make the REST call @@TODO Only does GET for now
		var reply = __http.makeRequest({
				verb: "GET", // @@TODO Must figure out how to set the HTTP verb based on the schema
				url: usePath + queryString,
				ctype: "application/json",
				where: "queryReply()"
		});
	
		//main.logmsg("selectEntries for Data - Reply: " + com.ibm.di.entry.Entry.fromJSON(toJson(reply)));

		// Update the global 'entry' variable with these values
		var entry = toEntry(reply);
		
		//main.logmsg("selectEntries for Data - toEntry(): " + entry);

		var resultEntry = system.newEntry();
		resultEntry.merge(entry);
		__resultSet.add(resultEntry);
	}

	return __resultSet	
}

function getNextEntry() {
	//main.logmsg("@@getNextEntry - remaining in buffer: " + __resultSet.size());
	if (__resultSetIndex >= __resultSet.size()) {
		result.setStatus(0);
		return null;
	}

	if (typeof(entry) == "undefined") entry = system.newEntry(); // only for testing
	
	//main.logmsg("getNextEntry() - getting index " + __resultSetIndex);
	entry.merge(__resultSet.get(__resultSetIndex));
	__resultSetIndex++;

	result.setStatus(1);
	//main.logmsg("@@getNextEntry: " + entry);
	return entry
}

function putEntry() {}

function modEntry() {}

function deleteEntry() {}

function findEntry() {}

function querySchema() {
	//main.logmsg("@@querySchema...");
	var connParams = refreshParameters();
	var path = connParams.path;
	var action = connParams.action;
	
	list.clear(); // For use in the _testScriptConnectorCode
	
	if (connParams.queryMode == "Parameters" || typeof(task) == "undefined") {
/* don't think this is needed
		var embeddedParameter = __schema.getEmbeddedUID(path);
		if (embeddedParameter) {
			var e = system.newEntry();
			e.name = embeddedParameter;
			e.syntax = "MUST/uid";
			e.required = true;
			e.mandatory = true;
			list.add(e)
		}
*/
		var parameters = __schema.getParameters(path, action);
	
		for (var i in parameters) {
			var param = parameters[i];
	   
			if (param.name.equalsIgnoreCase("CSRFToken")) continue;
			
			var e = system.newEntry();
			e.name = param.name;
			e.syntax = "MUST/" + param.schema.type;
			e.required = true;
			e.mandatory = true;
			//main.logmsg("@@adding " + param.name);
			list.add(e)
		}
	} else { // queryMode is "Data"
		selectEntries();
		var dataEntry = getNextEntry();
		// Remember to reset the index to the result set for any getNextEntry() called after
		__resultSetIndex = Math.min(0, __resultSetIndex - 1);
		
		
		for (var att in dataEntry) {
			if (att instanceof com.ibm.di.entry.Entry) { // This is one of the links
				var name = "link_";
				throw "OOOOOOPS!! Connector Script line 373"
			} else {
				var name = att.getName();
				var val = att.getValue(0);
				
				//main.logmsg("querySchema() adding " + name + " - " + val);
				
				e = system.newEntry();
				e.name = name;
				e.syntax = typeof(val);
				list.add(e)
			}	
		}
	}

	result.setStatus(1);
	return list
}]]></parameter>
            </Script>
            <Script name="Test Connector Script">
                <ModTime>1739216102354</ModTime>
                <parameter name="enabled">true</parameter>
                <parameter name="script"><![CDATA[initialize();

// First we test the alternative querySchema functionality (data or parameters)
cnt = 1;

__forceQueryMode = "Parameters"
querySchema();
params = refreshParameters();
task.logmsg("\n ---- SCHEMA (" + params.queryMode + ") ----\n" + list)

__forceQueryMode = "Data"
params = refreshParameters();
querySchema();
task.logmsg("\n ---- SCHEMA (" + params.queryMode + ") ----\n" + list)


// Now to test the alternative getNext() functionality (data or parameters)
cnt = 1;

selectEntries();

__forceQueryMode = "Parameters"
params = refreshParameters();
e = getNextEntry();
task.logmsg("\n ---- ENTRY (" + params.queryMode + ") ----\n" + e)

__forceQueryMode = "Data"
params = refreshParameters();
e = getNextEntry();
task.logmsg("\n ---- ENTRY (" + params.queryMode + ") ----\n" + e)]]></parameter>
            </Script>
            <Script name="Connector Form Event Script_1">
                <ModTime>1737914686188</ModTime>
                <parameter name="enabled">false</parameter>
                <parameter name="script"><![CDATA[// 20250104 1959 Initial
// 20250121 1154 Created RESTCLIENT class and used that instead of lots of functions
// 20250121 2047 Copied back test Event Script after _testScriptConnectorCode succeeded in testing Form code
// 20250121 2103 Form Working! Now to look at Mode ops (putEntry, findEntry, ...)
// 20250126 1901 Adding queryMode for querySchema to return either params, or schema of data
//
//						GLOBAL VARIABLES
//
var __schema = null;
var __initialized = false;
//var __lib = null;

//
//							FUNCTIONS
//

function debug() {
	return false;
	return form.getControl("debug").getText()
}

function alert(msg) {
	if (debug()) alert(msg);
	main.logmsg(msg)
}

function alertObject(objName, obj) {
	alert("alertObj(" + objName + ", " + toJson(obj));
	var arr = [objName + ": " + typeof(obj) + " ----------\n"];
	for (var child in obj) {
		arr.push("   " + child + "\n")
	}
	alert(arr.toString())
} 

function initialize() {
	if (__initialized) return;
	__initialized = true;
	
	//alert("Initializing...");
	//eval(system.getScriptText("RESTIFY library class")); // Load script library class
	//__lib = new RESTIFY();

	eval(system.getScriptText("RESTCLIENT class")); // Load HTTP Client class
	
	// Recreate in case parameters are changed
	__http = new RESTCLIENT({
						baseUrl:  form.getControl("url").getText(),
						authUrl:  form.getControl("authUrl").getText(),
						apikey:   form.getControl("apikey").getText(),
						username: form.getControl("username").getText(),
						password: form.getControl("password").getText(),
						schemaUrl: form.getControl("schema").getText(),
						debug: debug() // true => debug output
				})		
}

// Return the openAPI schema - @TEST hardcoded for now
function fetchSchema() {
	//alert("Fetching schema...")
	if (__schema) return __schema;

	initialize();

	//alert("About to loadFileToString...");
//	var schemaJSON = __lib.loadFileToString("_Restify/itim_swagger.json");
	var schemaJSON = __http.makeRequest({
			verb: "GET",
			url: "/schema",
			authUrl: form.getControl("authUrl").getText(),
			ctype: "application/json",
			where: "fetchSchema()"		
	})
    
    // Load the SCHEMA class
    eval(system.getScriptText("SCHEMA class")) // Load SCHEMA handling class
    
    //alert("Creating SCHEMA object");
    __schema = new SCHEMA(schemaJSON, "JSON");
    
    //var toplvl = "";
    //for (var tl in __schema) toplvl = (toplvl ? ", " + tl : tl);
    //alert("SCHEMA -> " + toplvl)
    
    //alert("Got it!");
	return __schema
}

// Update the dropdown with paths
function fetchItems() {
	//alert("---> fetchItems");
    //var path = form.getControl("PathToObjects").getText();

	initialize();

	path = "paths";

    updateDropdown("path",
        [path],
        "Cannot fetch actions for Path");
        
	fetchActions()
}

// Update the dropdown with opera tions for the selected path
function fetchActions() {
	initialize();
	
    var selectedItem = form.getControl("path").getText() || "";
	// alert("fetchActions() for " + selectedItem);

    updateDropdown("action",
        ["paths", selectedItem],
        "Cannot fetch actions for Path: " + selectedItem)
}

// Update dropdown based api
function updateDropdown(controlName, path, errorMsg) {
    try {
    	alert("updateDropdown("
    			+ controlName
    			+ ", " + path + ", errmsg)");

	    initialize();
		
        if (!path) {
        	alert("updateDropdown() - Path parameter must be set");
        	return	
        };

        var subtree = __schema.getChildren(path);
        
        if (subtree == null) {
        	path.shift();
        	alert("Invalid item path: " + path.toString());
        	return
        }
        
		combo = form.getControl(controlName);
		combo.removeAll(); // Empty drop-down

		var arrList = java.util.ArrayList();
        for (var propName in subtree) {
        	arrList.add(propName);
        }
        var arr = arrList.toArray();
        java.util.Arrays.sort(arr);
    			
        for (var propName in arr) {
            //alert("   ..adding " + res);
            combo.add(propName)
        }

        alert("drop-down updated!");

        combo.select(0)

    } catch (ex) {
        var msg = "Cannot get API schema - " + ex;
        alert(msg);
        throw msg
    }
}

// Empty out both Item and Object dropdowns
function clearDropdowns() {
	form.getControl("path").removeAll();
	form.getControl("action").removeAll()	
}

// For debugging from inside 
function write(fname, str) {
    var bw = new java.io.BufferedWriter(new java.io.FileWriter("_Restify/Log_" + fname))
    //	for (var m in obj.getClass().getMethods()) {
    //		bw.write(m)
    //		bw.newLine()
    //	}

    bw.write(str)
    bw.newLine()
    bw.close()
}]]></parameter>
            </Script>
            <Connector name="RestClientConnector">
                <InheritFrom>/Connectors/ITIMRestClientConnector</InheritFrom>
                <ModTime>1739292133836</ModTime>
                <ConnectorMode>CallReply</ConnectorMode>
                <ConnectorState>Disabled</ConnectorState>
                <Configuration>
                    <InheritFrom>[parent]</InheritFrom>
                    <parameter name="queryMode">Data</parameter>
                </Configuration>
                <Parser>
                    <InheritFrom>[parent]</InheritFrom>
                </Parser>
                <AttributeMap name="Input">
                    <InheritFrom>[parent]</InheritFrom>
                    <AttributeMapItem>
                        <Name>*</Name>
                        <Type>simple</Type>
                        <Simple>*</Simple>
                    </AttributeMapItem>
                </AttributeMap>
                <AttributeMap name="Output">
                    <InheritFrom>[parent]</InheritFrom>
                    <AttributeMapItem>
                        <Name>personId</Name>
                        <Type>advanced</Type>
                        <Script>"NO12345"</Script>
                        <Simple>personId</Simple>
                    </AttributeMapItem>
                </AttributeMap>
                <DeltaSettings>
                    <WhenToCommit>After every database operation</WhenToCommit>
                    <RowLocking>SERIALIZABLE</RowLocking>
                    <ChangeDetectionMode>DETECT_ALL</ChangeDetectionMode>
                </DeltaSettings>
                <Schema name="Input">
                    <InheritFrom>[parent]</InheritFrom>
                    <SchemaItem>
                        <Name>attributes</Name>
                        <Syntax>java.lang.String</Syntax>
                        <NativeSyntax>MUST/string</NativeSyntax>
                    </SchemaItem>
                    <SchemaItem>
                        <Name>embedded</Name>
                        <Syntax>java.lang.String</Syntax>
                        <NativeSyntax>MUST/string</NativeSyntax>
                    </SchemaItem>
                    <SchemaItem>
                        <Name>forms</Name>
                        <Syntax>java.lang.String</Syntax>
                        <NativeSyntax>MUST/string</NativeSyntax>
                    </SchemaItem>
                    <SchemaItem>
                        <Name>personId</Name>
                        <Syntax>java.lang.String</Syntax>
                        <NativeSyntax>MUST/string</NativeSyntax>
                    </SchemaItem>
                </Schema>
                <Schema name="Output">
                    <InheritFrom>[parent]</InheritFrom>
                    <SchemaItem>
                        <Name>attributes</Name>
                        <Syntax>java.lang.String</Syntax>
                        <NativeSyntax>MUST/string</NativeSyntax>
                    </SchemaItem>
                    <SchemaItem>
                        <Name>embedded</Name>
                        <Syntax>java.lang.String</Syntax>
                        <NativeSyntax>MUST/string</NativeSyntax>
                    </SchemaItem>
                    <SchemaItem>
                        <Name>forms</Name>
                        <Syntax>java.lang.String</Syntax>
                        <NativeSyntax>MUST/string</NativeSyntax>
                    </SchemaItem>
                    <SchemaItem>
                        <Name>personId</Name>
                        <Syntax>java.lang.String</Syntax>
                        <NativeSyntax>MUST/string</NativeSyntax>
                    </SchemaItem>
                </Schema>
                <LinkCriteria>
                    <InheritFrom>[parent]</InheritFrom>
                </LinkCriteria>
                <Hooks>
                    <InheritFrom>[parent]</InheritFrom>
                </Hooks>
                <CheckpointConfig/>
                <SandboxConfig/>
                <Reconnect>
                    <InheritFrom>[parent]</InheritFrom>
                    <ReconnectRules/>
                </Reconnect>
                <Operations/>
                <PoolDefinition>
                    <InheritFrom>[parent]</InheritFrom>
                </PoolDefinition>
                <PoolInstance/>
            </Connector>
            <Script name="DumpWorkEntry">
                <ModTime>1739214546085</ModTime>
                <parameter name="enabled">false</parameter>
                <parameter name="script"><![CDATA[// Dump the work entry
task.dumpEntry(work);
]]></parameter>
            </Script>
            <ALMap name="Set up parameter value">
                <InheritFrom>[no inheritance]</InheritFrom>
                <ModTime>1739216094137</ModTime>
                <AttributeMap name="Input">
                    <InheritFrom>[parent]</InheritFrom>
                    <AttributeMapItem>
                        <Name>parameters</Name>
                        <Type>substitution</Type>
                        <Script>work.parameters</Script>
                        <SubstitutionTemplate><![CDATA[attributes=name,rank,serialnumber
embedded=manager
forms=false
boogy=woogy
ignoreme
novalue=
]]></SubstitutionTemplate>
                    </AttributeMapItem>
                </AttributeMap>
                <State>Disabled</State>
            </ALMap>
            <Script name="Code parameters Param handling">
                <ModTime>1739216096240</ModTime>
                <parameter name="enabled">false</parameter>
                <parameter name="script"><![CDATA[function parseParamsValue(paramsValue) {
	var paramsObj = {};
	var lines = paramsValue.split(/\r?\n|\r/);
	for (var lineIndex = 0; lineIndex < lines.length; lineIndex++){
		var thisLine = lines[lineIndex];
		var parts = thisLine.split("=");
		var paramName = parts[0].trim();
		var paramValue = (parts.length > 1) ? parts[1].trim() : "";
		
		if (paramValue) {
			paramsObj[paramName] = paramValue
		}
	}
	
	return paramsObj
}

paramsValue = work.getString("parameters");

obj = parseParamsValue(paramsValue);
task.logmsg(work.fromJSON(toJson(obj)));]]></parameter>
            </Script>
        </ContainerDF>
        <ThreadOptions/>
        <Operations/>
        <InitParams>
            <Schema name="AssemblyLineInitParams"/>
        </InitParams>
    </AssemblyLine>
</MetamergeConfig>